{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/components/bootstrap-components/Sidepanel.js\";\nimport React, { Fragment, useContext } from 'react';\nimport { Button, Card, CardBody, Table } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport CodeHighlight from '../common/CodeHighlight';\nimport AppContext from '../../context/Context';\n\nconst Sidepanel = () => {\n  const {\n    toggleModal\n  } = useContext(AppContext);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PageHeader, {\n    title: \"Sidepanel\",\n    description: \"You can show lists, forms, notifications, or other custom contents into the Falcon Sidepanel.\",\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    tag: \"a\",\n    href: \"#!\",\n    color: \"link\",\n    size: \"sm\",\n    className: \"pl-0\",\n    onClick: () => {\n      toggleModal();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, \"Show Sidepanel\", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"chevron-right\",\n    className: \"ml-1 fs--2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Card, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FalconCardHeader, {\n    title: \"Structure\",\n    light: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"bg-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, \"Falcon Sidepanel uses Boostrap Modal features to show the panel content. \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 86\n    }\n  }, \".modal-fixed-right\"), \" and\", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, \".modal-dialog-vertical\"), \" classes are used to stick the panel at the right side and animate the panel from right to left.\"), /*#__PURE__*/React.createElement(CodeHighlight, {\n    language: \"html\",\n    code: `\n              <Modal\n                isOpen={isOpenSidePanel}\n                toggle={toggleModal}\n                modalClassName=\"overflow-hidden modal-fixed-right modal-theme\"\n                className=\"modal-dialog-vertical\"\n              >\n                <ModalHeader tag=\"div\" toggle={toggleModal} className=\"modal-header-settings\">\n                  // Heder Content\n                </ModalHeader>\n                  <ModalBody className=\"px-card\">\n                    //Body Content\n                  </ModalBody>\n              </Modal>`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Card, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FalconCardHeader, {\n    title: \"Options\",\n    light: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"bg-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, ' ', \"You can pass options via Props through \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 52\n    }\n  }, \"Sidepanel\"), \" component. It will decide whether the panel is shown or remain hidden when the page loads.\"), /*#__PURE__*/React.createElement(Table, {\n    class: \"border border-200 fs--1\",\n    bordered: true,\n    responsive: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    class: \"bg-200 text-900\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, \"Option\"), /*#__PURE__*/React.createElement(\"th\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, \"Type\"), /*#__PURE__*/React.createElement(\"th\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, \"Defaults\"), /*#__PURE__*/React.createElement(\"th\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, \"Description\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, \"autoShow\"), /*#__PURE__*/React.createElement(\"td\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, ' ', /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 19\n    }\n  }, \"Boolean\")), /*#__PURE__*/React.createElement(\"td\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, ' ', /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 19\n    }\n  }, \"false\")), /*#__PURE__*/React.createElement(\"td\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, \"Set \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 23\n    }\n  }, \"true \"), \"to make the Slidepanel show automatically after the page is loaded.\")), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, \"autoShowDelay\"), /*#__PURE__*/React.createElement(\"td\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 19\n    }\n  }, \"Number \")), /*#__PURE__*/React.createElement(\"td\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, ' ', /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 19\n    }\n  }, \"3000\")), /*#__PURE__*/React.createElement(\"td\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, \"How much time \", /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 33\n    }\n  }, \"(ms) \"), \"should wait after the page is loaded before showing the Sidepanel. Works only when the autoShow is set true\")), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, \"showOnce\"), /*#__PURE__*/React.createElement(\"td\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 19\n    }\n  }, \"Boolean\")), /*#__PURE__*/React.createElement(\"td\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 19\n    }\n  }, \"false\")), /*#__PURE__*/React.createElement(\"td\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, \"The Sidepanel will show only once - for the first time when a user view the website and remain hidden as per the cookie expiration date.\")), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, \"cookieExpireTime\"), /*#__PURE__*/React.createElement(\"td\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, ' ', /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 19\n    }\n  }, \"Number \")), /*#__PURE__*/React.createElement(\"td\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, ' ', /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 19\n    }\n  }, \"7200000\")), /*#__PURE__*/React.createElement(\"td\", {\n    class: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, \"After how many time \", /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 39\n    }\n  }, \"(ms) \"), \"the cookie will expired.\")))))));\n};\n\nexport default Sidepanel;","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/components/bootstrap-components/Sidepanel.js"],"names":["React","Fragment","useContext","Button","Card","CardBody","Table","FontAwesomeIcon","PageHeader","FalconCardHeader","CodeHighlight","AppContext","Sidepanel","toggleModal"],"mappings":"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","sourcesContent":["import React, { Fragment, useContext } from 'react';\r\nimport { Button, Card, CardBody, Table } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport PageHeader from '../common/PageHeader';\r\nimport FalconCardHeader from '../common/FalconCardHeader';\r\nimport CodeHighlight from '../common/CodeHighlight';\r\nimport AppContext from '../../context/Context';\r\n\r\nconst Sidepanel = () => {\r\n  const { toggleModal } = useContext(AppContext);\r\n  return (\r\n    <Fragment>\r\n      <PageHeader\r\n        title=\"Sidepanel\"\r\n        description=\"You can show lists, forms, notifications, or other custom contents into the Falcon Sidepanel.\"\r\n        className=\"mb-3\"\r\n      >\r\n        <Button\r\n          tag=\"a\"\r\n          href=\"#!\"\r\n          color=\"link\"\r\n          size=\"sm\"\r\n          className=\"pl-0\"\r\n          onClick={() => {\r\n            toggleModal();\r\n          }}\r\n        >\r\n          Show Sidepanel\r\n          <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\r\n        </Button>\r\n      </PageHeader>\r\n      <Card className=\"mb-3\">\r\n        <FalconCardHeader title=\"Structure\" light={false} />\r\n        <CardBody className=\"bg-light\">\r\n          <p>\r\n            Falcon Sidepanel uses Boostrap Modal features to show the panel content. <code>.modal-fixed-right</code> and\r\n            <code>.modal-dialog-vertical</code> classes are used to stick the panel at the right side and animate the\r\n            panel from right to left.\r\n          </p>\r\n          <CodeHighlight\r\n            language=\"html\"\r\n            code={`\r\n              <Modal\r\n                isOpen={isOpenSidePanel}\r\n                toggle={toggleModal}\r\n                modalClassName=\"overflow-hidden modal-fixed-right modal-theme\"\r\n                className=\"modal-dialog-vertical\"\r\n              >\r\n                <ModalHeader tag=\"div\" toggle={toggleModal} className=\"modal-header-settings\">\r\n                  // Heder Content\r\n                </ModalHeader>\r\n                  <ModalBody className=\"px-card\">\r\n                    //Body Content\r\n                  </ModalBody>\r\n              </Modal>`}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n      <Card className=\"mb-3\">\r\n        <FalconCardHeader title=\"Options\" light={false} />\r\n        <CardBody className=\"bg-light\">\r\n          <p>\r\n            {' '}\r\n            You can pass options via Props through <code>Sidepanel</code> component. It will decide whether the panel is\r\n            shown or remain hidden when the page loads.\r\n          </p>\r\n          <Table class=\"border border-200 fs--1\" bordered responsive>\r\n            <thead class=\"bg-200 text-900\">\r\n              <tr>\r\n                <th class=\"white-space-nowrap\">Option</th>\r\n                <th class=\"white-space-nowrap\">Type</th>\r\n                <th class=\"white-space-nowrap\">Defaults</th>\r\n                <th class=\"white-space-nowrap\">Description</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td class=\"white-space-nowrap\">autoShow</td>\r\n                <td class=\"white-space-nowrap\">\r\n                  {' '}\r\n                  <code>Boolean</code>\r\n                </td>\r\n                <td class=\"white-space-nowrap\">\r\n                  {' '}\r\n                  <code>false</code>\r\n                </td>\r\n                <td class=\"white-space-nowrap\">\r\n                  Set <code>true </code>to make the Slidepanel show automatically after the page is loaded.\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td class=\"white-space-nowrap\">autoShowDelay</td>\r\n                <td class=\"white-space-nowrap\">\r\n                  <code>Number </code>\r\n                </td>\r\n                <td class=\"white-space-nowrap\">\r\n                  {' '}\r\n                  <code>3000</code>\r\n                </td>\r\n                <td class=\"white-space-nowrap\">\r\n                  How much time <i>(ms) </i>should wait after the page is loaded before showing the Sidepanel. Works\r\n                  only when the autoShow is set true\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td class=\"white-space-nowrap\">showOnce</td>\r\n                <td class=\"white-space-nowrap\">\r\n                  <code>Boolean</code>\r\n                </td>\r\n                <td class=\"white-space-nowrap\">\r\n                  <code>false</code>\r\n                </td>\r\n                <td class=\"white-space-nowrap\">\r\n                  The Sidepanel will show only once - for the first time when a user view the website and remain hidden\r\n                  as per the cookie expiration date.\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td class=\"white-space-nowrap\">cookieExpireTime</td>\r\n                <td class=\"white-space-nowrap\">\r\n                  {' '}\r\n                  <code>Number </code>\r\n                </td>\r\n                <td class=\"white-space-nowrap\">\r\n                  {' '}\r\n                  <code>7200000</code>\r\n                </td>\r\n                <td class=\"white-space-nowrap\">\r\n                  After how many time <i>(ms) </i>the cookie will expired.\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </Table>\r\n        </CardBody>\r\n      </Card>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Sidepanel;\r\n"]},"metadata":{},"sourceType":"module"}