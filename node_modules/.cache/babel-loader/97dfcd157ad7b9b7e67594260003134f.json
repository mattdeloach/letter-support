{"ast":null,"code":"var _jsxFileName = \"/Users/greypro/Documents/Dev/letter/letter-support/src/components/bootstrap-components/CookieNotice.js\";\nimport React, { Fragment, useState } from 'react';\nimport { Button, Card, CardBody, Table } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport CodeHighlight from '../common/CodeHighlight';\nimport CookieAlert from './CookieAlert';\nimport cookieImage from '../../assets/img/icons/cookie.png';\n\nconst CookieNotice = () => {\n  const [visible, setVisible] = useState(false);\n\n  const onDismiss = () => setVisible(false);\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PageHeader, {\n    title: \"Cookie Notice\",\n    description: \"Falcon has a built-in notification component that allows users to notify cookie uses on the website.\",\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    tag: \"a\",\n    href: \"#!\",\n    color: \"link\",\n    size: \"sm\",\n    className: \"pl-0\",\n    onClick: () => {\n      setVisible(pre => !pre);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, \"Toggle notification\", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"chevron-right\",\n    className: \"ml-1 fs--2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Card, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FalconCardHeader, {\n    title: \"Structure\",\n    light: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"bg-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, \"Falcon's Cookie Notice uses Reactstrap's \\\"Alerts\\\" feature to show the notice content. \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 99\n    }\n  }, \"visible\"), ' ', \"state is responsible for showing the notice as a popup. See\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://reactstrap.github.io/components/alerts/\",\n    className: \"text-decoration-none\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, \"Alerts documentation on Reactstrap\")), /*#__PURE__*/React.createElement(CodeHighlight, {\n    language: \"html\",\n    code: `\n              <Alert className=\"notice text-center fs--1 d-flex flex-center\" color=\"light\" isOpen={visible} toggle={onDismiss}>\n                  // place your content here\n              </Alert>`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Card, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FalconCardHeader, {\n    title: \"Options\",\n    light: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"bg-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, ' ', \"You can pass options via Props through \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 52\n    }\n  }, \"CookieAlert\"), \" component. It will decide whether the notice is shown or remain hidden when the page loads.\"), /*#__PURE__*/React.createElement(Table, {\n    className: \"border border-200\",\n    bordered: true,\n    responsive: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    className: \"bg-200 text-900\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, \"Option\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, \"Type\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, \"Defaults\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, \"Description\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, \"autoShow\"), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, ' ', /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 19\n    }\n  }, \"Boolean\")), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, ' ', /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 19\n    }\n  }, \"false\")), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, \"Set \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 23\n    }\n  }, \"true \"), \"to make the notice show automatically after the page is loaded.\")), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, \"autoShowDelay\"), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 19\n    }\n  }, \"Number \")), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, ' ', /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 19\n    }\n  }, \"0\")), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, \"How much time \", /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 33\n    }\n  }, \"(ms) \"), \"should wait after the page is loaded before showing the notice. Works only when the autoShow is set true\")), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, \"showOnce\"), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 19\n    }\n  }, \"Boolean\")), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 19\n    }\n  }, \"false\")), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, \"The notice will show only once - for the first time when a user view the website and remain hidden as per the cookie expiration date.\")), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, \"cookieExpireTime\"), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, ' ', /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 19\n    }\n  }, \"Number \")), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, ' ', /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 19\n    }\n  }, \"7200000\")), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"white-space-nowrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, \"After how many time \", /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 39\n    }\n  }, \"(ms) \"), \"the cookie will expired.\")))))), /*#__PURE__*/React.createElement(CookieAlert, {\n    visible: visible,\n    setVisible: setVisible,\n    showOnce: false,\n    onDismiss: onDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: cookieImage,\n    alt: \"\",\n    width: 20,\n    className: \"mr-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mb-2 mb-lg-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, \"Our site uses cookies. By continuing to use our site, you agree to our\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#!\",\n    className: \"text-underline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, ' ', \"Cookie Policy\"), \".\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    size: \"sm\",\n    className: \"ml-2\",\n    onClick: () => setVisible(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, \"Ok, I Understand\")));\n};\n\nexport default CookieNotice;","map":{"version":3,"sources":["/Users/greypro/Documents/Dev/letter/letter-support/src/components/bootstrap-components/CookieNotice.js"],"names":["React","Fragment","useState","Button","Card","CardBody","Table","FontAwesomeIcon","PageHeader","FalconCardHeader","CodeHighlight","CookieAlert","cookieImage","CookieNotice","visible","setVisible","onDismiss","pre"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport { Button, Card, CardBody, Table } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport PageHeader from '../common/PageHeader';\r\nimport FalconCardHeader from '../common/FalconCardHeader';\r\nimport CodeHighlight from '../common/CodeHighlight';\r\n\r\nimport CookieAlert from './CookieAlert';\r\nimport cookieImage from '../../assets/img/icons/cookie.png';\r\n\r\nconst CookieNotice = () => {\r\n  const [visible, setVisible] = useState(false);\r\n  const onDismiss = () => setVisible(false);\r\n\r\n  return (\r\n    <Fragment>\r\n      <PageHeader\r\n        title=\"Cookie Notice\"\r\n        description=\"Falcon has a built-in notification component that allows users to notify cookie uses on the website.\"\r\n        className=\"mb-3\"\r\n      >\r\n        <Button\r\n          tag=\"a\"\r\n          href=\"#!\"\r\n          color=\"link\"\r\n          size=\"sm\"\r\n          className=\"pl-0\"\r\n          onClick={() => {\r\n            setVisible(pre => !pre);\r\n          }}\r\n        >\r\n          Toggle notification\r\n          <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\r\n        </Button>\r\n      </PageHeader>\r\n      <Card className=\"mb-3\">\r\n        <FalconCardHeader title=\"Structure\" light={false} />\r\n        <CardBody className=\"bg-light\">\r\n          <p>\r\n            Falcon's Cookie Notice uses Reactstrap's \"Alerts\" feature to show the notice content. <code>visible</code>{' '}\r\n            state is responsible for showing the notice as a popup. See{' '}\r\n            <a\r\n              href=\"https://reactstrap.github.io/components/alerts/\"\r\n              className=\"text-decoration-none\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Alerts documentation on Reactstrap\r\n            </a>\r\n          </p>\r\n          <CodeHighlight\r\n            language=\"html\"\r\n            code={`\r\n              <Alert className=\"notice text-center fs--1 d-flex flex-center\" color=\"light\" isOpen={visible} toggle={onDismiss}>\r\n                  // place your content here\r\n              </Alert>`}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n      <Card className=\"mb-3\">\r\n        <FalconCardHeader title=\"Options\" light={false} />\r\n        <CardBody className=\"bg-light\">\r\n          <p>\r\n            {' '}\r\n            You can pass options via Props through <code>CookieAlert</code> component. It will decide whether the notice\r\n            is shown or remain hidden when the page loads.\r\n          </p>\r\n          <Table className=\"border border-200\" bordered responsive>\r\n            <thead className=\"bg-200 text-900\">\r\n              <tr>\r\n                <th className=\"white-space-nowrap\">Option</th>\r\n                <th className=\"white-space-nowrap\">Type</th>\r\n                <th className=\"white-space-nowrap\">Defaults</th>\r\n                <th className=\"white-space-nowrap\">Description</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td className=\"white-space-nowrap\">autoShow</td>\r\n                <td className=\"white-space-nowrap\">\r\n                  {' '}\r\n                  <code>Boolean</code>\r\n                </td>\r\n                <td className=\"white-space-nowrap\">\r\n                  {' '}\r\n                  <code>false</code>\r\n                </td>\r\n                <td className=\"white-space-nowrap\">\r\n                  Set <code>true </code>to make the notice show automatically after the page is loaded.\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td className=\"white-space-nowrap\">autoShowDelay</td>\r\n                <td className=\"white-space-nowrap\">\r\n                  <code>Number </code>\r\n                </td>\r\n                <td className=\"white-space-nowrap\">\r\n                  {' '}\r\n                  <code>0</code>\r\n                </td>\r\n                <td className=\"white-space-nowrap\">\r\n                  How much time <i>(ms) </i>should wait after the page is loaded before showing the notice. Works only\r\n                  when the autoShow is set true\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td className=\"white-space-nowrap\">showOnce</td>\r\n                <td className=\"white-space-nowrap\">\r\n                  <code>Boolean</code>\r\n                </td>\r\n                <td className=\"white-space-nowrap\">\r\n                  <code>false</code>\r\n                </td>\r\n                <td className=\"white-space-nowrap\">\r\n                  The notice will show only once - for the first time when a user view the website and remain hidden as\r\n                  per the cookie expiration date.\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td className=\"white-space-nowrap\">cookieExpireTime</td>\r\n                <td className=\"white-space-nowrap\">\r\n                  {' '}\r\n                  <code>Number </code>\r\n                </td>\r\n                <td className=\"white-space-nowrap\">\r\n                  {' '}\r\n                  <code>7200000</code>\r\n                </td>\r\n                <td className=\"white-space-nowrap\">\r\n                  After how many time <i>(ms) </i>the cookie will expired.\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </Table>\r\n        </CardBody>\r\n      </Card>\r\n      <CookieAlert visible={visible} setVisible={setVisible} showOnce={false} onDismiss={onDismiss}>\r\n        <img src={cookieImage} alt=\"\" width={20} className=\"mr-2\" />\r\n        <p className=\"mb-2 mb-lg-0\">\r\n          Our site uses cookies. By continuing to use our site, you agree to our{' '}\r\n          <a href=\"#!\" className=\"text-underline\">\r\n            {' '}\r\n            Cookie Policy\r\n          </a>\r\n          .\r\n        </p>\r\n        <Button color=\"primary\" size=\"sm\" className=\"ml-2\" onClick={() => setVisible(false)}>\r\n          Ok, I Understand\r\n        </Button>\r\n      </CookieAlert>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default CookieNotice;\r\n"]},"metadata":{},"sourceType":"module"}