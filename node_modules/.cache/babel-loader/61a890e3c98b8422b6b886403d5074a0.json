{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/reducers/arrayReducer.js\";\nimport React from 'react';\nimport orderBy from 'lodash/orderBy';\nimport { toast } from 'react-toastify';\nexport const arrayReducer = (state, action) => {\n  const {\n    type,\n    id,\n    payload,\n    sortBy,\n    order,\n    isAddToStart,\n    isUpdatedStart\n  } = action;\n\n  switch (type) {\n    case 'ADD':\n      if (!payload) {\n        console.error('payload is required!');\n        return state;\n      }\n\n      if (state.find(item => item.id === payload.id)) {\n        toast( /*#__PURE__*/React.createElement(\"span\", {\n          className: \"text-warning\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 15\n          }\n        }, \"Item already exists in the list!\"));\n        return state;\n      }\n\n      if (isAddToStart) {\n        return [payload, ...state];\n      }\n\n      return [...state, payload];\n\n    case 'REMOVE':\n      if (id !== 0 && !id) {\n        console.error('id is required!');\n        return state;\n      }\n\n      return state.filter(item => item.id !== id);\n\n    case 'EDIT':\n      if (id !== 0 && !id) {\n        console.error('id is required!');\n        return state;\n      }\n\n      if (isUpdatedStart) {\n        const filteredState = state.filter(item => item.id !== id);\n        return [payload, ...filteredState];\n      }\n\n      return state.map(item => item.id === id ? payload : item);\n\n    case 'SORT':\n      if (!sortBy || !order) {\n        console.error('sortBy and order, both are required!');\n        return state;\n      }\n\n      return orderBy(state, sortBy, order);\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/reducers/arrayReducer.js"],"names":["React","orderBy","toast","arrayReducer","state","action","type","id","payload","sortBy","order","isAddToStart","isUpdatedStart","console","error","find","item","filter","filteredState","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,EAAR;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA,KAA7B;AAAoCC,IAAAA,YAApC;AAAkDC,IAAAA;AAAlD,MAAqEP,MAA3E;;AACA,UAAQC,IAAR;AACE,SAAK,KAAL;AACE,UAAI,CAACE,OAAL,EAAc;AACZK,QAAAA,OAAO,CAACC,KAAR,CAAc,sBAAd;AACA,eAAOV,KAAP;AACD;;AACD,UAAIA,KAAK,CAACW,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACT,EAAL,KAAYC,OAAO,CAACD,EAAvC,CAAJ,EAAgD;AAC9CL,QAAAA,KAAK,eAAC;AAAM,UAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAD,CAAL;AACA,eAAOE,KAAP;AACD;;AACD,UAAIO,YAAJ,EAAkB;AAChB,eAAO,CAACH,OAAD,EAAU,GAAGJ,KAAb,CAAP;AACD;;AACD,aAAO,CAAC,GAAGA,KAAJ,EAAWI,OAAX,CAAP;;AACF,SAAK,QAAL;AACE,UAAID,EAAE,KAAK,CAAP,IAAY,CAACA,EAAjB,EAAqB;AACnBM,QAAAA,OAAO,CAACC,KAAR,CAAc,iBAAd;AACA,eAAOV,KAAP;AACD;;AACD,aAAOA,KAAK,CAACa,MAAN,CAAaD,IAAI,IAAIA,IAAI,CAACT,EAAL,KAAYA,EAAjC,CAAP;;AACF,SAAK,MAAL;AACE,UAAIA,EAAE,KAAK,CAAP,IAAY,CAACA,EAAjB,EAAqB;AACnBM,QAAAA,OAAO,CAACC,KAAR,CAAc,iBAAd;AACA,eAAOV,KAAP;AACD;;AACD,UAAIQ,cAAJ,EAAoB;AAClB,cAAMM,aAAa,GAAGd,KAAK,CAACa,MAAN,CAAaD,IAAI,IAAIA,IAAI,CAACT,EAAL,KAAYA,EAAjC,CAAtB;AACA,eAAO,CAACC,OAAD,EAAU,GAAGU,aAAb,CAAP;AACD;;AACD,aAAOd,KAAK,CAACe,GAAN,CAAUH,IAAI,IAAKA,IAAI,CAACT,EAAL,KAAYA,EAAZ,GAAiBC,OAAjB,GAA2BQ,IAA9C,CAAP;;AACF,SAAK,MAAL;AACE,UAAI,CAACP,MAAD,IAAW,CAACC,KAAhB,EAAuB;AACrBG,QAAAA,OAAO,CAACC,KAAR,CAAc,sCAAd;AACA,eAAOV,KAAP;AACD;;AACD,aAAOH,OAAO,CAACG,KAAD,EAAQK,MAAR,EAAgBC,KAAhB,CAAd;;AACF;AACE,aAAON,KAAP;AArCJ;AAuCD,CAzCM","sourcesContent":["import React from 'react';\r\nimport orderBy from 'lodash/orderBy';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const arrayReducer = (state, action) => {\r\n  const { type, id, payload, sortBy, order, isAddToStart, isUpdatedStart } = action;\r\n  switch (type) {\r\n    case 'ADD':\r\n      if (!payload) {\r\n        console.error('payload is required!');\r\n        return state;\r\n      }\r\n      if (state.find(item => item.id === payload.id)) {\r\n        toast(<span className=\"text-warning\">Item already exists in the list!</span>);\r\n        return state;\r\n      }\r\n      if (isAddToStart) {\r\n        return [payload, ...state];\r\n      }\r\n      return [...state, payload];\r\n    case 'REMOVE':\r\n      if (id !== 0 && !id) {\r\n        console.error('id is required!');\r\n        return state;\r\n      }\r\n      return state.filter(item => item.id !== id);\r\n    case 'EDIT':\r\n      if (id !== 0 && !id) {\r\n        console.error('id is required!');\r\n        return state;\r\n      }\r\n      if (isUpdatedStart) {\r\n        const filteredState = state.filter(item => item.id !== id);\r\n        return [payload, ...filteredState];\r\n      }\r\n      return state.map(item => (item.id === id ? payload : item));\r\n    case 'SORT':\r\n      if (!sortBy || !order) {\r\n        console.error('sortBy and order, both are required!');\r\n        return state;\r\n      }\r\n      return orderBy(state, sortBy, order);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}