{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/components/e-commerce/Checkout.js\";\nimport React, { Fragment, useState, useContext } from 'react';\nimport ContentWithAsideLayout from '../../layouts/ContentWithAsideLayout';\nimport { ProductContext } from '../../context/Context';\nimport { calculateSale, getTotalPrice } from '../../helpers/utils';\nimport CheckoutAside from './checkout/CheckoutAside';\nimport CheckoutShippingAddress from './checkout/CheckoutShippingAddress';\nimport CheckoutPaymentMethod from './checkout/CheckoutPaymentMethod';\n\nconst Checkout = () => {\n  const {\n    products,\n    shoppingCart,\n    appliedPromo\n  } = useContext(ProductContext);\n  const [shippingAddress, setShippingAddress] = useState('address-1');\n  const [paymentMethod, setPaymentMethod] = useState('credit-card');\n  const calculatedShippingCost = parseFloat(shoppingCart.map(shoppingCartItem => products.find(product => product.id === shoppingCartItem.id)).filter(product => product.hasOwnProperty('shippingCost') && product.shippingCost !== 0).reduce((accumulated, product) => accumulated > product.shippingCost ? accumulated : product.shippingCost, 0));\n  const subTotal = parseFloat(getTotalPrice(shoppingCart, products).toFixed(2));\n  const payableTotal = parseFloat((parseFloat(calculateSale(subTotal, !!appliedPromo ? appliedPromo.discount : 0)) + calculatedShippingCost).toFixed(2));\n  return /*#__PURE__*/React.createElement(ContentWithAsideLayout, {\n    aside: /*#__PURE__*/React.createElement(CheckoutAside, {\n      calculatedShippingCost: calculatedShippingCost,\n      subTotal: subTotal,\n      payableTotal: payableTotal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }),\n    isStickyAside: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CheckoutShippingAddress, {\n    shippingAddress: shippingAddress,\n    setShippingAddress: setShippingAddress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CheckoutPaymentMethod, {\n    payableTotal: payableTotal,\n    paymentMethod: paymentMethod,\n    setPaymentMethod: setPaymentMethod,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Checkout;","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/components/e-commerce/Checkout.js"],"names":["React","Fragment","useState","useContext","ContentWithAsideLayout","ProductContext","calculateSale","getTotalPrice","CheckoutAside","CheckoutShippingAddress","CheckoutPaymentMethod","Checkout","products","shoppingCart","appliedPromo","shippingAddress","setShippingAddress","paymentMethod","setPaymentMethod","calculatedShippingCost","parseFloat","map","shoppingCartItem","find","product","id","filter","hasOwnProperty","shippingCost","reduce","accumulated","subTotal","toFixed","payableTotal","discount"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,UAApC,QAAsD,OAAtD;AACA,OAAOC,sBAAP,MAAmC,sCAAnC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,qBAA7C;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AACA,OAAOC,qBAAP,MAAkC,kCAAlC;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA;AAA1B,MAA2CX,UAAU,CAACE,cAAD,CAA3D;AACA,QAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCd,QAAQ,CAAC,WAAD,CAAtD;AACA,QAAM,CAACe,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAAC,aAAD,CAAlD;AAEA,QAAMiB,sBAAsB,GAAGC,UAAU,CACvCP,YAAY,CACTQ,GADH,CACOC,gBAAgB,IAAIV,QAAQ,CAACW,IAAT,CAAcC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeH,gBAAgB,CAACG,EAAzD,CAD3B,EAEGC,MAFH,CAEUF,OAAO,IAAIA,OAAO,CAACG,cAAR,CAAuB,cAAvB,KAA0CH,OAAO,CAACI,YAAR,KAAyB,CAFxF,EAGGC,MAHH,CAGU,CAACC,WAAD,EAAcN,OAAd,KAA2BM,WAAW,GAAGN,OAAO,CAACI,YAAtB,GAAqCE,WAArC,GAAmDN,OAAO,CAACI,YAHhG,EAG+G,CAH/G,CADuC,CAAzC;AAMA,QAAMG,QAAQ,GAAGX,UAAU,CAACb,aAAa,CAACM,YAAD,EAAeD,QAAf,CAAb,CAAsCoB,OAAtC,CAA8C,CAA9C,CAAD,CAA3B;AACA,QAAMC,YAAY,GAAGb,UAAU,CAC7B,CAACA,UAAU,CAACd,aAAa,CAACyB,QAAD,EAAW,CAAC,CAACjB,YAAF,GAAiBA,YAAY,CAACoB,QAA9B,GAAyC,CAApD,CAAd,CAAV,GAAkFf,sBAAnF,EAA2Ga,OAA3G,CACE,CADF,CAD6B,CAA/B;AAMA,sBACE,oBAAC,sBAAD;AACE,IAAA,KAAK,eACH,oBAAC,aAAD;AACE,MAAA,sBAAsB,EAAEb,sBAD1B;AAEE,MAAA,QAAQ,EAAEY,QAFZ;AAGE,MAAA,YAAY,EAAEE,YAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAQE,IAAA,aAAa,EAAE,KARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAUE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,uBAAD;AAAyB,IAAA,eAAe,EAAElB,eAA1C;AAA2D,IAAA,kBAAkB,EAAEC,kBAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,qBAAD;AACE,IAAA,YAAY,EAAEiB,YADhB;AAEE,IAAA,aAAa,EAAEhB,aAFjB;AAGE,IAAA,gBAAgB,EAAEC,gBAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAVF,CADF;AAqBD,CAvCD;;AAyCA,eAAeP,QAAf","sourcesContent":["import React, { Fragment, useState, useContext } from 'react';\nimport ContentWithAsideLayout from '../../layouts/ContentWithAsideLayout';\nimport { ProductContext } from '../../context/Context';\nimport { calculateSale, getTotalPrice } from '../../helpers/utils';\nimport CheckoutAside from './checkout/CheckoutAside';\nimport CheckoutShippingAddress from './checkout/CheckoutShippingAddress';\nimport CheckoutPaymentMethod from './checkout/CheckoutPaymentMethod';\n\nconst Checkout = () => {\n  const { products, shoppingCart, appliedPromo } = useContext(ProductContext);\n  const [shippingAddress, setShippingAddress] = useState('address-1');\n  const [paymentMethod, setPaymentMethod] = useState('credit-card');\n\n  const calculatedShippingCost = parseFloat(\n    shoppingCart\n      .map(shoppingCartItem => products.find(product => product.id === shoppingCartItem.id))\n      .filter(product => product.hasOwnProperty('shippingCost') && product.shippingCost !== 0)\n      .reduce((accumulated, product) => (accumulated > product.shippingCost ? accumulated : product.shippingCost), 0)\n  );\n  const subTotal = parseFloat(getTotalPrice(shoppingCart, products).toFixed(2));\n  const payableTotal = parseFloat(\n    (parseFloat(calculateSale(subTotal, !!appliedPromo ? appliedPromo.discount : 0)) + calculatedShippingCost).toFixed(\n      2\n    )\n  );\n\n  return (\n    <ContentWithAsideLayout\n      aside={\n        <CheckoutAside\n          calculatedShippingCost={calculatedShippingCost}\n          subTotal={subTotal}\n          payableTotal={payableTotal}\n        />\n      }\n      isStickyAside={false}\n    >\n      <Fragment>\n        <CheckoutShippingAddress shippingAddress={shippingAddress} setShippingAddress={setShippingAddress} />\n        <CheckoutPaymentMethod\n          payableTotal={payableTotal}\n          paymentMethod={paymentMethod}\n          setPaymentMethod={setPaymentMethod}\n        />\n      </Fragment>\n    </ContentWithAsideLayout>\n  );\n};\n\nexport default Checkout;\n"]},"metadata":{},"sourceType":"module"}