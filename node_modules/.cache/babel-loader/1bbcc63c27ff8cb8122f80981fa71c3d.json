{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/components/event/EventCustomField.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, Col, CustomInput, Form, FormGroup, Input, Label, Row } from 'reactstrap';\nimport Datetime from 'react-datetime';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport { isIterableArray } from '../../helpers/utils';\nimport ButtonIcon from '../common/ButtonIcon';\nimport FormGroupSelect from '../common/FormGroupSelect';\nimport createMarkup from '../../helpers/createMarkup';\n\nconst CustomField = ({\n  name,\n  type,\n  options,\n  index\n}) => {\n  switch (type) {\n    case 'select':\n      return /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        for: `customField${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }\n      }, name), /*#__PURE__*/React.createElement(CustomInput, {\n        type: \"select\",\n        id: `customField${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }\n      }, isIterableArray(options) && options.map((value, i) => /*#__PURE__*/React.createElement(\"option\", {\n        value: value,\n        key: i,\n        dangerouslySetInnerHTML: createMarkup(value),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 41\n        }\n      }))));\n\n    case 'checkboxes':\n      return /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }\n      }, name), options.map((option, key) => /*#__PURE__*/React.createElement(CustomInput, {\n        type: \"checkbox\",\n        id: `customField${index}${key}`,\n        label: option,\n        key: key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }\n      })));\n\n    case 'radio':\n      return /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }\n      }, name), options.map((option, key) => /*#__PURE__*/React.createElement(CustomInput, {\n        type: \"radio\",\n        name: `customField${index}`,\n        id: `customField${index}${key}`,\n        label: option,\n        key: key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }\n      })));\n\n    case 'textarea':\n      return /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        for: `customField${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }\n      }, name), /*#__PURE__*/React.createElement(Input, {\n        type: \"textarea\",\n        rows: 5,\n        id: `customField${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }\n      }));\n\n    case 'date':\n      return /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        for: `customField${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }\n      }, name), /*#__PURE__*/React.createElement(Datetime, {\n        timeFormat: false,\n        bsSize: \"sm\",\n        id: `customField${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }\n      }));\n\n    case 'time':\n      return /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        for: `customField${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }\n      }, name), /*#__PURE__*/React.createElement(Datetime, {\n        dateFormat: false,\n        bsSize: \"sm\",\n        id: `customField${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }\n      }));\n\n    case 'file':\n      return /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        for: `customField${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }\n      }, name), /*#__PURE__*/React.createElement(CustomInput, {\n        type: \"file\",\n        id: `customField${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }\n      }));\n\n    default:\n      return /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        for: `customField${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }\n      }, name), /*#__PURE__*/React.createElement(Input, {\n        id: `customField${index}`,\n        type: type,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }\n      }));\n  }\n};\n\nCustomField.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  options: PropTypes.array\n};\n\nconst EventCustomField = () => {\n  // State\n  const [name, setName] = useState('');\n  const [type, setType] = useState('text');\n  const [options, setOptions] = useState('');\n  const [hasOptions, setHasOptions] = useState(false);\n  const [customFields, setCustomFields] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n  const types = [{\n    label: 'Text',\n    value: 'text'\n  }, {\n    label: 'Select',\n    value: 'select'\n  }, {\n    label: 'Checkboxes',\n    value: 'checkboxes'\n  }, {\n    label: 'Radio',\n    value: 'radio'\n  }, {\n    label: 'Textarea',\n    value: 'textarea'\n  }, {\n    label: 'Date',\n    value: 'date'\n  }, {\n    label: 'Time',\n    value: 'time'\n  }, {\n    label: 'Url',\n    value: 'url'\n  }, {\n    label: 'Email',\n    value: 'email'\n  }, {\n    label: 'Password',\n    value: 'password'\n  }, {\n    label: 'Number',\n    value: 'number'\n  }, {\n    label: 'File',\n    value: 'file'\n  }]; // Handler\n\n  const validateCustomFieldOptions = () => !hasOptions || hasOptions && options.length;\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (hasOptions) {\n      const updatedOptions = options.split(',');\n      setCustomFields([...customFields, {\n        name,\n        type,\n        options: updatedOptions\n      }]);\n    } else {\n      setCustomFields([...customFields, {\n        name,\n        type\n      }]);\n    }\n\n    setName('');\n    setType('text');\n    setOptions('');\n    setHasOptions(false);\n    setDisabled(true);\n  };\n\n  useEffect(() => {\n    setHasOptions(type === 'select' || type === 'checkboxes' || type === 'radio');\n  }, [type]);\n  useEffect(() => {\n    setDisabled(!(name.length && validateCustomFieldOptions())); // eslint-disable-next-line\n  }, [name, options, type]);\n  return /*#__PURE__*/React.createElement(Card, {\n    className: \"mb-3 mb-lg-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FalconCardHeader, {\n    title: \"Custom Field\",\n    light: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }), isIterableArray(customFields) && /*#__PURE__*/React.createElement(CardBody, {\n    className: \"bg-200\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, customFields.map((customField, index) => /*#__PURE__*/React.createElement(CustomField, Object.assign({}, customField, {\n    index: index,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(CardBody, {\n    tag: Form,\n    className: \"bg-light\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    form: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"field-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 15\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(Input, {\n    value: name,\n    onChange: ({\n      target\n    }) => setName(target.value),\n    bsSize: \"sm\",\n    id: \"field-name\",\n    placeholder: \"Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    sm: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormGroupSelect, {\n    loading: false,\n    label: \"Type\",\n    options: types,\n    value: type,\n    type: \"select\",\n    onChange: ({\n      target\n    }) => setType(target.value),\n    bsSize: \"sm\",\n    id: \"field-type\",\n    placeholder: \"Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }))), hasOptions && /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"field-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, \"Field Options\"), /*#__PURE__*/React.createElement(Input, {\n    value: options,\n    onChange: ({\n      target\n    }) => setOptions(target.value),\n    type: \"textarea\",\n    id: \"field-options\",\n    placeholder: \"Field Options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"small\", {\n    className: \"text-warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }, \"*Separate your options with comma\")), /*#__PURE__*/React.createElement(ButtonIcon, {\n    color: \"falcon-default\",\n    size: \"sm\",\n    icon: \"plus\",\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }, \"Add Field\")));\n};\n\nexport default EventCustomField;","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/components/event/EventCustomField.js"],"names":["React","useEffect","useState","PropTypes","Card","CardBody","Col","CustomInput","Form","FormGroup","Input","Label","Row","Datetime","FalconCardHeader","isIterableArray","ButtonIcon","FormGroupSelect","createMarkup","CustomField","name","type","options","index","map","value","i","option","key","propTypes","string","isRequired","number","array","EventCustomField","setName","setType","setOptions","hasOptions","setHasOptions","customFields","setCustomFields","disabled","setDisabled","types","label","validateCustomFieldOptions","length","handleSubmit","e","preventDefault","updatedOptions","split","customField","target"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, Col, CustomInput, Form, FormGroup, Input, Label, Row } from 'reactstrap';\nimport Datetime from 'react-datetime';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport { isIterableArray } from '../../helpers/utils';\nimport ButtonIcon from '../common/ButtonIcon';\nimport FormGroupSelect from '../common/FormGroupSelect';\nimport createMarkup from '../../helpers/createMarkup';\n\nconst CustomField = ({ name, type, options, index }) => {\n  switch (type) {\n    case 'select':\n      return (\n        <FormGroup>\n          <Label for={`customField${index}`}>{name}</Label>\n          <CustomInput type=\"select\" id={`customField${index}`}>\n            {isIterableArray(options) &&\n              options.map((value, i) => <option value={value} key={i} dangerouslySetInnerHTML={createMarkup(value)} />)}\n          </CustomInput>\n        </FormGroup>\n      );\n\n    case 'checkboxes':\n      return (\n        <FormGroup>\n          <Label>{name}</Label>\n          {options.map((option, key) => (\n            <CustomInput type=\"checkbox\" id={`customField${index}${key}`} label={option} key={key} />\n          ))}\n        </FormGroup>\n      );\n\n    case 'radio':\n      return (\n        <FormGroup>\n          <Label>{name}</Label>\n          {options.map((option, key) => (\n            <CustomInput\n              type=\"radio\"\n              name={`customField${index}`}\n              id={`customField${index}${key}`}\n              label={option}\n              key={key}\n            />\n          ))}\n        </FormGroup>\n      );\n\n    case 'textarea':\n      return (\n        <FormGroup>\n          <Label for={`customField${index}`}>{name}</Label>\n          <Input type=\"textarea\" rows={5} id={`customField${index}`} />\n        </FormGroup>\n      );\n\n    case 'date':\n      return (\n        <FormGroup>\n          <Label for={`customField${index}`}>{name}</Label>\n          <Datetime timeFormat={false} bsSize=\"sm\" id={`customField${index}`} />\n        </FormGroup>\n      );\n\n    case 'time':\n      return (\n        <FormGroup>\n          <Label for={`customField${index}`}>{name}</Label>\n          <Datetime dateFormat={false} bsSize=\"sm\" id={`customField${index}`} />\n        </FormGroup>\n      );\n\n    case 'file':\n      return (\n        <FormGroup>\n          <Label for={`customField${index}`}>{name}</Label>\n          <CustomInput type=\"file\" id={`customField${index}`} />\n        </FormGroup>\n      );\n\n    default:\n      return (\n        <FormGroup>\n          <Label for={`customField${index}`}>{name}</Label>\n          <Input id={`customField${index}`} type={type} />\n        </FormGroup>\n      );\n  }\n};\n\nCustomField.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  options: PropTypes.array\n};\n\nconst EventCustomField = () => {\n  // State\n  const [name, setName] = useState('');\n  const [type, setType] = useState('text');\n  const [options, setOptions] = useState('');\n  const [hasOptions, setHasOptions] = useState(false);\n  const [customFields, setCustomFields] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n\n  const types = [\n    { label: 'Text', value: 'text' },\n    { label: 'Select', value: 'select' },\n    { label: 'Checkboxes', value: 'checkboxes' },\n    { label: 'Radio', value: 'radio' },\n    { label: 'Textarea', value: 'textarea' },\n    { label: 'Date', value: 'date' },\n    { label: 'Time', value: 'time' },\n    { label: 'Url', value: 'url' },\n    { label: 'Email', value: 'email' },\n    { label: 'Password', value: 'password' },\n    { label: 'Number', value: 'number' },\n    { label: 'File', value: 'file' }\n  ];\n\n  // Handler\n  const validateCustomFieldOptions = () => !hasOptions || (hasOptions && options.length);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (hasOptions) {\n      const updatedOptions = options.split(',');\n      setCustomFields([...customFields, { name, type, options: updatedOptions }]);\n    } else {\n      setCustomFields([...customFields, { name, type }]);\n    }\n\n    setName('');\n    setType('text');\n    setOptions('');\n    setHasOptions(false);\n    setDisabled(true);\n  };\n\n  useEffect(() => {\n    setHasOptions(type === 'select' || type === 'checkboxes' || type === 'radio');\n  }, [type]);\n\n  useEffect(() => {\n    setDisabled(!(name.length && validateCustomFieldOptions()));\n    // eslint-disable-next-line\n  }, [name, options, type]);\n\n  return (\n    <Card className=\"mb-3 mb-lg-0\">\n      <FalconCardHeader title=\"Custom Field\" light={false} />\n      {isIterableArray(customFields) && (\n        <CardBody className=\"bg-200\">\n          {customFields.map((customField, index) => (\n            <CustomField {...customField} index={index} key={index} />\n          ))}\n        </CardBody>\n      )}\n      <CardBody tag={Form} className=\"bg-light\" onSubmit={handleSubmit}>\n        <Row form>\n          <Col sm>\n            <FormGroup>\n              <Label for=\"field-name\">Name</Label>\n              <Input\n                value={name}\n                onChange={({ target }) => setName(target.value)}\n                bsSize=\"sm\"\n                id=\"field-name\"\n                placeholder=\"Name\"\n              />\n            </FormGroup>\n          </Col>\n          <Col sm>\n            <FormGroupSelect\n              loading={false}\n              label=\"Type\"\n              options={types}\n              value={type}\n              type=\"select\"\n              onChange={({ target }) => setType(target.value)}\n              bsSize=\"sm\"\n              id=\"field-type\"\n              placeholder=\"Name\"\n            />\n          </Col>\n        </Row>\n        {hasOptions && (\n          <FormGroup>\n            <Label for=\"field-options\">Field Options</Label>\n            <Input\n              value={options}\n              onChange={({ target }) => setOptions(target.value)}\n              type=\"textarea\"\n              id=\"field-options\"\n              placeholder=\"Field Options\"\n            />\n            <small className=\"text-warning\">*Separate your options with comma</small>\n          </FormGroup>\n        )}\n        <ButtonIcon color=\"falcon-default\" size=\"sm\" icon=\"plus\" disabled={disabled}>\n          Add Field\n        </ButtonIcon>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default EventCustomField;\n"]},"metadata":{},"sourceType":"module"}