{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/components/email/inbox/InboxProvider.js\";\nimport React, { Component } from 'react';\nimport { EmailContext } from '../../../context/Context';\nimport rawEmails from '../../../data/email/emails';\nimport { isIterableArray } from '../../../helpers/utils';\n\nclass InboxProvider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.setEmails = emails => this.setState({\n      emails\n    });\n\n    this.setCurrentFilter = currentFilter => this.setState({\n      currentFilter\n    });\n\n    this.handleAction = (action, selectedIds) => {\n      const {\n        emails,\n        setEmails\n      } = this.state;\n      setEmails(action === 'delete' || action === 'archive' ? emails.filter(({\n        id\n      }) => !selectedIds.includes(id)) : emails.map(email => selectedIds.includes(email.id) ? { ...email,\n        [action]: !email[action]\n      } : email));\n    };\n\n    this.handleFilter = filter => {\n      const {\n        setEmails,\n        setCurrentFilter\n      } = this.state;\n      setCurrentFilter(filter);\n\n      switch (filter) {\n        case 'all':\n          return setEmails(rawEmails);\n\n        case 'unread':\n          return setEmails(rawEmails.filter(email => !email.read));\n\n        case 'attachments':\n          return setEmails(rawEmails.filter(email => isIterableArray(email.attachments)));\n\n        default:\n          return setEmails(rawEmails.filter(email => email[filter]));\n      }\n    };\n\n    this.state = {\n      emails: [],\n      setEmails: this.setEmails,\n      filters: ['all', 'unread', 'star', 'attachments', 'archive', 'snooze'],\n      currentFilter: 'all',\n      setCurrentFilter: this.setCurrentFilter,\n      handleFilter: this.handleFilter,\n      handleAction: this.handleAction\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(EmailContext.Provider, {\n      value: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 12\n      }\n    }, this.props.children);\n  }\n\n}\n\nexport default InboxProvider;","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/components/email/inbox/InboxProvider.js"],"names":["React","Component","EmailContext","rawEmails","isIterableArray","InboxProvider","setEmails","emails","setState","setCurrentFilter","currentFilter","handleAction","action","selectedIds","state","filter","id","includes","map","email","handleFilter","read","attachments","filters","render","props","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,eAAT,QAAgC,wBAAhC;;AAEA,MAAMC,aAAN,SAA4BJ,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SACpCK,SADoC,GACxBC,MAAM,IAAI,KAAKC,QAAL,CAAc;AAAED,MAAAA;AAAF,KAAd,CADc;;AAAA,SAEpCE,gBAFoC,GAEjBC,aAAa,IAAI,KAAKF,QAAL,CAAc;AAAEE,MAAAA;AAAF,KAAd,CAFA;;AAAA,SAKpCC,YALoC,GAKrB,CAACC,MAAD,EAASC,WAAT,KAAyB;AACtC,YAAM;AAAEN,QAAAA,MAAF;AAAUD,QAAAA;AAAV,UAAwB,KAAKQ,KAAnC;AAEAR,MAAAA,SAAS,CACPM,MAAM,KAAK,QAAX,IAAuBA,MAAM,KAAK,SAAlC,GACIL,MAAM,CAACQ,MAAP,CAAc,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAY,CAACH,WAAW,CAACI,QAAZ,CAAqBD,EAArB,CAA3B,CADJ,GAEIT,MAAM,CAACW,GAAP,CAAWC,KAAK,IAAKN,WAAW,CAACI,QAAZ,CAAqBE,KAAK,CAACH,EAA3B,IAAiC,EAAE,GAAGG,KAAL;AAAY,SAACP,MAAD,GAAU,CAACO,KAAK,CAACP,MAAD;AAA5B,OAAjC,GAA0EO,KAA/F,CAHG,CAAT;AAKD,KAbmC;;AAAA,SAepCC,YAfoC,GAerBL,MAAM,IAAI;AACvB,YAAM;AAAET,QAAAA,SAAF;AAAaG,QAAAA;AAAb,UAAkC,KAAKK,KAA7C;AACAL,MAAAA,gBAAgB,CAACM,MAAD,CAAhB;;AAEA,cAAQA,MAAR;AACE,aAAK,KAAL;AACE,iBAAOT,SAAS,CAACH,SAAD,CAAhB;;AACF,aAAK,QAAL;AACE,iBAAOG,SAAS,CAACH,SAAS,CAACY,MAAV,CAAiBI,KAAK,IAAI,CAACA,KAAK,CAACE,IAAjC,CAAD,CAAhB;;AACF,aAAK,aAAL;AACE,iBAAOf,SAAS,CAACH,SAAS,CAACY,MAAV,CAAiBI,KAAK,IAAIf,eAAe,CAACe,KAAK,CAACG,WAAP,CAAzC,CAAD,CAAhB;;AACF;AACE,iBAAOhB,SAAS,CAACH,SAAS,CAACY,MAAV,CAAiBI,KAAK,IAAIA,KAAK,CAACJ,MAAD,CAA/B,CAAD,CAAhB;AARJ;AAUD,KA7BmC;;AAAA,SA+BpCD,KA/BoC,GA+B5B;AACNP,MAAAA,MAAM,EAAE,EADF;AAEND,MAAAA,SAAS,EAAE,KAAKA,SAFV;AAGNiB,MAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,QAAR,EAAkB,MAAlB,EAA0B,aAA1B,EAAyC,SAAzC,EAAoD,QAApD,CAHH;AAINb,MAAAA,aAAa,EAAE,KAJT;AAKND,MAAAA,gBAAgB,EAAE,KAAKA,gBALjB;AAMNW,MAAAA,YAAY,EAAE,KAAKA,YANb;AAONT,MAAAA,YAAY,EAAE,KAAKA;AAPb,KA/B4B;AAAA;;AAyCpCa,EAAAA,MAAM,GAAG;AACP,wBAAO,oBAAC,YAAD,CAAc,QAAd;AAAuB,MAAA,KAAK,EAAE,KAAKV,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2C,KAAKW,KAAL,CAAWC,QAAtD,CAAP;AACD;;AA3CmC;;AA8CtC,eAAerB,aAAf","sourcesContent":["import React, { Component } from 'react';\nimport { EmailContext } from '../../../context/Context';\nimport rawEmails from '../../../data/email/emails';\nimport { isIterableArray } from '../../../helpers/utils';\n\nclass InboxProvider extends Component {\n  setEmails = emails => this.setState({ emails });\n  setCurrentFilter = currentFilter => this.setState({ currentFilter });\n\n  // Handlers\n  handleAction = (action, selectedIds) => {\n    const { emails, setEmails } = this.state;\n\n    setEmails(\n      action === 'delete' || action === 'archive'\n        ? emails.filter(({ id }) => !selectedIds.includes(id))\n        : emails.map(email => (selectedIds.includes(email.id) ? { ...email, [action]: !email[action] } : email))\n    );\n  };\n\n  handleFilter = filter => {\n    const { setEmails, setCurrentFilter } = this.state;\n    setCurrentFilter(filter);\n\n    switch (filter) {\n      case 'all':\n        return setEmails(rawEmails);\n      case 'unread':\n        return setEmails(rawEmails.filter(email => !email.read));\n      case 'attachments':\n        return setEmails(rawEmails.filter(email => isIterableArray(email.attachments)));\n      default:\n        return setEmails(rawEmails.filter(email => email[filter]));\n    }\n  };\n\n  state = {\n    emails: [],\n    setEmails: this.setEmails,\n    filters: ['all', 'unread', 'star', 'attachments', 'archive', 'snooze'],\n    currentFilter: 'all',\n    setCurrentFilter: this.setCurrentFilter,\n    handleFilter: this.handleFilter,\n    handleAction: this.handleAction\n  };\n\n  render() {\n    return <EmailContext.Provider value={this.state}>{this.props.children}</EmailContext.Provider>;\n  }\n}\n\nexport default InboxProvider;\n"]},"metadata":{},"sourceType":"module"}