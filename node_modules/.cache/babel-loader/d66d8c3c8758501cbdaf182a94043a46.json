{"ast":null,"code":"import Prism from './prism-core';\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\n\nPrism.languages.markup = {\n  'comment': /<!--[\\s\\S]*?-->/,\n  'prolog': /<\\?[\\s\\S]+?\\?>/,\n  'doctype': /<!DOCTYPE[\\s\\S]+?>/i,\n  'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/i,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n        inside: {\n          'punctuation': [/^=/, {\n            pattern: /^(\\s*)[\"']|[\"']$/,\n            lookbehind: true\n          }]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': /&#?[\\da-z]{1,8};/i\n};\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity']; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: Prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, tagName), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    Prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  var insideString = {\n    variable: [// Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        variable: [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        operator: /--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        punctuation: /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // Command Substitution\n    {\n      pattern: /\\$\\([^)]+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        variable: /^\\$\\(|^`|\\)$|`$/\n      }\n    }, /\\$(?:[\\w#?*!@]+|\\{[^}]+\\})/i]\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/bin\\/bash|^#!\\s*\\/bin\\/sh/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\])#.*/,\n      lookbehind: true\n    },\n    'string': [//Support for Here-Documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<\\s*)[\"']?(\\w+?)[\"']?\\s*\\r?\\n(?:[\\s\\S])*?\\r?\\n\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, {\n      pattern: /([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|`[^`]+`|(?!\\1)[^\\\\])*\\1/,\n      greedy: true,\n      inside: insideString\n    }],\n    'variable': insideString.variable,\n    // Originally based on http://ss64.com/bash/\n    'function': {\n      pattern: /(^|[\\s;|&])(?:add|alias|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|builtin|bzip2|cal|cat|cd|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|comm|command|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|ethtool|eval|exec|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|getopts|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|hash|head|help|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logout|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|quota|quotacheck|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|shift|shopt|shutdown|sleep|slocate|sort|source|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tail|tar|tee|test|time|timeout|times|top|touch|tr|traceroute|trap|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zip|zypper)(?=$|[\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&])(?:let|:|\\.|if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)(?=$|[\\s;|&])/,\n      lookbehind: true\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&])(?:true|false)(?=$|[\\s;|&])/,\n      lookbehind: true\n    },\n    'operator': /&&?|\\|\\|?|==?|!=?|<<<?|>>|<=?|>=?|=~/,\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];]/\n  };\n  var inside = insideString.variable[1].inside;\n  inside.string = Prism.languages.bash.string;\n  inside['function'] = Prism.languages.bash['function'];\n  inside.keyword = Prism.languages.bash.keyword;\n  inside['boolean'] = Prism.languages.bash['boolean'];\n  inside.operator = Prism.languages.bash.operator;\n  inside.punctuation = Prism.languages.bash.punctuation;\n  Prism.languages.shell = Prism.languages.bash;\n})(Prism);\n/* \"prismjs/components/prism-clike\" */\n\n\nPrism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      punctuation: /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'function': /\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nPrism.languages.c = Prism.languages.extend('clike', {\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+)\\w+/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/,\n  'number': /(?:\\b0x(?:[\\da-f]+\\.?[\\da-f]*|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]*/i\n});\nPrism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^\\s*)#\\s*[a-z]+(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    alias: 'property',\n    inside: {\n      // highlight the path of the include statement as a string\n      'string': {\n        pattern: /(#\\s*include\\s*)(?:<.+?>|(\"|')(?:\\\\?.)+?\\2)/,\n        lookbehind: true\n      },\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /(#\\s*)\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\b/,\n        lookbehind: true,\n        alias: 'keyword'\n      }\n    }\n  },\n  // highlight predefined macros as constants\n  'constant': /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n});\ndelete Prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\nPrism.languages.cpp = Prism.languages.extend('c', {\n  'class-name': {\n    pattern: /(\\b(?:class|enum|struct)\\s+)\\w+/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/\n});\nPrism.languages.insertBefore('cpp', 'string', {\n  'raw-string': {\n    pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n    alias: 'string',\n    greedy: true\n  }\n});\n/* \"prismjs/components/prism-css\" */\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-]+?[\\s\\S]*?(?:;|(?=\\s*\\{))/i,\n      inside: {\n        'rule': /@[\\w-]+/ // See rest below\n\n      }\n    },\n    'url': RegExp('url\\\\((?:' + string.source + '|.*?)\\\\)', 'i'),\n    'selector': RegExp('[^{}\\\\s](?:[^{};\"\\']|' + string.source + ')*?(?=\\\\s*\\\\{)'),\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n    'important': /!important\\b/i,\n    'function': /[-a-z0-9]+(?=\\()/i,\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    Prism.languages.insertBefore('inside', 'attr-value', {\n      'style-attr': {\n        pattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n        inside: {\n          'attr-name': {\n            pattern: /^\\s*style/i,\n            inside: markup.tag.inside\n          },\n          'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,\n          'attr-value': {\n            pattern: /.+/i,\n            inside: Prism.languages.css\n          }\n        },\n        alias: 'language-css'\n      }\n    }, markup.tag);\n  }\n})(Prism);\n/* \"prismjs/components/prism-css-extras\" */\n\n\nPrism.languages.css.selector = {\n  pattern: Prism.languages.css.selector,\n  inside: {\n    'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n    'pseudo-class': /:[-\\w]+/,\n    'class': /\\.[-:.\\w]+/,\n    'id': /#[-:.\\w]+/,\n    'attribute': {\n      pattern: /\\[(?:[^[\\]\"']|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1)*\\]/,\n      greedy: true,\n      inside: {\n        'punctuation': /^\\[|\\]$/,\n        'case-sensitivity': {\n          pattern: /(\\s)[si]$/i,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'namespace': {\n          pattern: /^(\\s*)[-*\\w\\xA0-\\uFFFF]*\\|(?!=)/,\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\|$/\n          }\n        },\n        'attribute': {\n          pattern: /^(\\s*)[-\\w\\xA0-\\uFFFF]+/,\n          lookbehind: true\n        },\n        'value': [/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/, {\n          pattern: /(=\\s*)[-\\w\\xA0-\\uFFFF]+(?=\\s*$)/,\n          lookbehind: true\n        }],\n        'operator': /[|~*^$]?=/\n      }\n    },\n    'n-th': {\n      pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n      lookbehind: true,\n      inside: {\n        'number': /[\\dn]+/,\n        'operator': /[+-]/\n      }\n    },\n    'punctuation': /[()]/\n  }\n};\nPrism.languages.insertBefore('css', 'property', {\n  'variable': {\n    pattern: /(^|[^-\\w\\xA0-\\uFFFF])--[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*/i,\n    lookbehind: true\n  }\n});\nPrism.languages.insertBefore('css', 'function', {\n  'operator': {\n    pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n    lookbehind: true\n  },\n  'hexcode': /#[\\da-f]{3,8}/i,\n  'entity': /\\\\[\\da-f]{1,8}/i,\n  'unit': {\n    pattern: /(\\d)(?:%|[a-z]+)/,\n    lookbehind: true\n  },\n  'number': /-?[\\d.]+/\n});\n/* \"prismjs/components/prism-javascript\" */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n  'class-name': [Prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  'number': /\\b(?:(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\\d+n|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'operator': /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nPrism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n    lookbehind: true,\n    greedy: true\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nPrism.languages.insertBefore('javascript', 'string', {\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\${[^}]+}|[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /\\${[^}]+}/,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\${|}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\n\nif (Prism.languages.markup) {\n  Prism.languages.markup.tag.addInlined('script', 'javascript');\n}\n\nPrism.languages.js = Prism.languages.javascript;\n/* \"prismjs/components/prism-jsx\" */\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i;\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: /\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,\n      inside: {\n        'punctuation': /\\.{3}|[{}.]/,\n        'attr-value': /\\w+/\n      }\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'attr-value', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: /=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?={)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      },\n      'alias': 'language-javascript'\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function stringifyToken(token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function walkTokens(tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') {} else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(Prism);\n/* \"prismjs/components/prism-javadoclike\" */\n\n\n(function (Prism) {\n  var javaDocLike = Prism.languages.javadoclike = {\n    'parameter': {\n      pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n      lookbehind: true\n    },\n    'keyword': {\n      // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n      // @word, {@word}\n      pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n      lookbehind: true\n    },\n    'punctuation': /[{}]/\n  };\n  /**\n   * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n   *\n   * @param {string} lang the language add doc comment support to.\n   * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n   */\n\n  function docCommentSupport(lang, callback) {\n    var tokenName = 'doc-comment';\n    var grammar = Prism.languages[lang];\n\n    if (!grammar) {\n      return;\n    }\n\n    var token = grammar[tokenName];\n\n    if (!token) {\n      // add doc comment: /** */\n      var definition = {};\n      definition[tokenName] = {\n        pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n        alias: 'comment'\n      };\n      grammar = Prism.languages.insertBefore(lang, 'comment', definition);\n      token = grammar[tokenName];\n    }\n\n    if (token instanceof RegExp) {\n      // convert regex to object\n      token = grammar[tokenName] = {\n        pattern: token\n      };\n    }\n\n    if (Array.isArray(token)) {\n      for (var i = 0, l = token.length; i < l; i++) {\n        if (token[i] instanceof RegExp) {\n          token[i] = {\n            pattern: token[i]\n          };\n        }\n\n        callback(token[i]);\n      }\n    } else {\n      callback(token);\n    }\n  }\n  /**\n   * Adds doc-comment support to the given languages for the given documentation language.\n   *\n   * @param {string[]|string} languages\n   * @param {Object} docLanguage\n   */\n\n\n  function addSupport(languages, docLanguage) {\n    if (typeof languages === 'string') {\n      languages = [languages];\n    }\n\n    languages.forEach(function (lang) {\n      docCommentSupport(lang, function (pattern) {\n        if (!pattern.inside) {\n          pattern.inside = {};\n        }\n\n        pattern.inside.rest = docLanguage;\n      });\n    });\n  }\n\n  Object.defineProperty(javaDocLike, 'addSupport', {\n    value: addSupport\n  });\n  javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n})(Prism);\n/* \"prismjs/components/prism-java\" */\n\n\n(function (Prism) {\n  var keywords = /\\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while|var|null|exports|module|open|opens|provides|requires|to|transitive|uses|with)\\b/; // based on the java naming conventions\n\n  var className = /\\b[A-Z](?:\\w*[a-z]\\w*)?\\b/;\n  Prism.languages.java = Prism.languages.extend('clike', {\n    'class-name': [className, // variables and parameters\n    // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n    /\\b[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/],\n    'keyword': keywords,\n    'function': [Prism.languages.clike.function, {\n      pattern: /(\\:\\:)[a-z_]\\w*/,\n      lookbehind: true\n    }],\n    'number': /\\b0b[01][01_]*L?\\b|\\b0x[\\da-f_]*\\.?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*\\.?[\\d_]*|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n    'operator': {\n      pattern: /(^|[^.])(?:<<=?|>>>?=?|->|([-+&|])\\2|[?:~]|[-+*/%&|^!=<>]=?)/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('java', 'class-name', {\n    'annotation': {\n      alias: 'punctuation',\n      pattern: /(^|[^.])@\\w+/,\n      lookbehind: true\n    },\n    'namespace': {\n      pattern: /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)[a-z]\\w*(\\.[a-z]\\w*)+/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    },\n    'generics': {\n      pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n      inside: {\n        'class-name': className,\n        'keyword': keywords,\n        'punctuation': /[<>(),.:]/,\n        'operator': /[?&|]/\n      }\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-markup-templating\" */\n\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function value(env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n            ++i;\n          } // Create a sparse array\n\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function value(env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n\n            var token = tokens[i];\n\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n\n                replacement.push(middle);\n\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */\n            ) {\n                walkTokens(token.content);\n              }\n          }\n\n          return tokens;\n        }\n\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-php\" */\n\n/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n\n\n(function (Prism) {\n  Prism.languages.php = Prism.languages.extend('clike', {\n    'keyword': /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n    'boolean': {\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: 'constant'\n    },\n    'constant': [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('php', 'string', {\n    'shell-comment': {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true,\n      alias: 'comment'\n    }\n  });\n  Prism.languages.insertBefore('php', 'comment', {\n    'delimiter': {\n      pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n      alias: 'important'\n    }\n  });\n  Prism.languages.insertBefore('php', 'keyword', {\n    'variable': /\\$+(?:\\w+\\b|(?={))/i,\n    'package': {\n      pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\\\/\n      }\n    }\n  }); // Must be defined after the function pattern\n\n  Prism.languages.insertBefore('php', 'operator', {\n    'property': {\n      pattern: /(->)[\\w]+/,\n      lookbehind: true\n    }\n  });\n  var string_interpolation = {\n    pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n    lookbehind: true,\n    inside: {\n      rest: Prism.languages.php\n    }\n  };\n  Prism.languages.insertBefore('php', 'string', {\n    'nowdoc-string': {\n      pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<'?|[';]$/\n          }\n        }\n      }\n    },\n    'heredoc-string': {\n      pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<\"?|[\";]$/\n          }\n        },\n        'interpolation': string_interpolation // See below\n\n      }\n    },\n    'single-quoted-string': {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'double-quoted-string': {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'interpolation': string_interpolation // See below\n\n      }\n    }\n  }); // The different types of PHP strings \"replace\" the C-like standard string\n\n  delete Prism.languages.php['string'];\n  Prism.hooks.add('before-tokenize', function (env) {\n    if (!/<\\?/.test(env.code)) {\n      return;\n    }\n\n    var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/ig;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n  });\n})(Prism);\n/* \"prismjs/components/prism-jsdoc\" */\n\n\n(function (Prism) {\n  var javascript = Prism.languages.javascript;\n  var type = /{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})+}/.source;\n  var parameterPrefix = '(@(?:param|arg|argument|property)\\\\s+(?:' + type + '\\\\s+)?)';\n  Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {\n    'parameter': {\n      // @param {string} foo - foo bar\n      pattern: RegExp(parameterPrefix + /[$\\w\\xA0-\\uFFFF.]+(?=\\s|$)/.source),\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    }\n  });\n  Prism.languages.insertBefore('jsdoc', 'keyword', {\n    'optional-parameter': {\n      // @param {string} [baz.foo=\"bar\"] foo bar\n      pattern: RegExp(parameterPrefix + /\\[[$\\w\\xA0-\\uFFFF.]+(?:=[^[\\]]+)?\\](?=\\s|$)/.source),\n      lookbehind: true,\n      inside: {\n        'parameter': {\n          pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\./\n          }\n        },\n        'code': {\n          pattern: /(=)[\\s\\S]*(?=\\]$)/,\n          lookbehind: true,\n          inside: javascript,\n          alias: 'language-javascript'\n        },\n        'punctuation': /[=[\\]]/\n      }\n    },\n    'class-name': [{\n      pattern: RegExp('(@[a-z]+\\\\s+)' + type),\n      lookbehind: true,\n      inside: {\n        'punctuation': /[.,:?=<>|{}()[\\]]/\n      }\n    }, {\n      pattern: /(@(?:augments|extends|class|interface|memberof!?|this)\\s+)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    }],\n    'example': {\n      pattern: /(@example\\s+)[^@]+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n      lookbehind: true,\n      inside: {\n        'code': {\n          pattern: /^(\\s*(?:\\*\\s*)?).+$/m,\n          lookbehind: true,\n          inside: javascript,\n          alias: 'language-javascript'\n        }\n      }\n    }\n  });\n  Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc);\n})(Prism);\n/* \"prismjs/components/prism-actionscript\" */\n\n\nPrism.languages.actionscript = Prism.languages.extend('javascript', {\n  'keyword': /\\b(?:as|break|case|catch|class|const|default|delete|do|else|extends|finally|for|function|if|implements|import|in|instanceof|interface|internal|is|native|new|null|package|private|protected|public|return|super|switch|this|throw|try|typeof|use|var|void|while|with|dynamic|each|final|get|include|namespace|native|override|set|static)\\b/,\n  'operator': /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/\n});\nPrism.languages.actionscript['class-name'].alias = 'function';\n\nif (Prism.languages.markup) {\n  Prism.languages.insertBefore('actionscript', 'string', {\n    'xml': {\n      pattern: /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.markup\n      }\n    }\n  });\n}\n/* \"prismjs/components/prism-coffeescript\" */\n\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/,\n      interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.javascript\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(Prism);\n/* \"prismjs/components/prism-js-extras\" */\n\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: /(\\.\\s*)[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*/,\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(Prism);\n/* \"prismjs/components/prism-flow\" */\n\n\n(function (Prism) {\n  Prism.languages.flow = Prism.languages.extend('javascript', {});\n  Prism.languages.insertBefore('flow', 'keyword', {\n    'type': [{\n      pattern: /\\b(?:[Nn]umber|[Ss]tring|[Bb]oolean|Function|any|mixed|null|void)\\b/,\n      alias: 'tag'\n    }]\n  });\n  Prism.languages.flow['function-variable'].pattern = /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)(?:\\s*:\\s*\\w+)?|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i;\n  delete Prism.languages.flow['parameter'];\n  Prism.languages.insertBefore('flow', 'operator', {\n    'flow-punctuation': {\n      pattern: /\\{\\||\\|\\}/,\n      alias: 'punctuation'\n    }\n  });\n\n  if (!Array.isArray(Prism.languages.flow.keyword)) {\n    Prism.languages.flow.keyword = [Prism.languages.flow.keyword];\n  }\n\n  Prism.languages.flow.keyword.unshift({\n    pattern: /(^|[^$]\\b)(?:type|opaque|declare|Class)\\b(?!\\$)/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^$]\\B)\\$(?:await|Diff|Exact|Keys|ObjMap|PropertyType|Shape|Record|Supertype|Subtype|Enum)\\b(?!\\$)/,\n    lookbehind: true\n  });\n})(Prism);\n/* \"prismjs/components/prism-n4js\" */\n\n\nPrism.languages.n4js = Prism.languages.extend('javascript', {\n  // Keywords from N4JS language spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html\n  'keyword': /\\b(?:any|Array|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/\n});\nPrism.languages.insertBefore('n4js', 'constant', {\n  // Annotations in N4JS spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html#_annotations\n  'annotation': {\n    pattern: /@+\\w+/,\n    alias: 'operator'\n  }\n});\nPrism.languages.n4jsd = Prism.languages.n4js;\n/* \"prismjs/components/prism-typescript\" */\n\nPrism.languages.typescript = Prism.languages.extend('javascript', {\n  // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n  'keyword': /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n  'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n});\nPrism.languages.ts = Prism.languages.typescript;\n/* \"prismjs/components/prism-diff\" */\n\nPrism.languages.diff = {\n  'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n  /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n  /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n  /^\\d+.*$/m],\n  // Match inserted and deleted lines. Support both +/- and >/< styles.\n  'deleted': /^[-<].*$/m,\n  'inserted': /^[+>].*$/m,\n  // Match \"different\" lines (prefixed with \"!\") in context diff.\n  'diff': {\n    'pattern': /^!(?!!).+$/m,\n    'alias': 'important'\n  }\n};\n/* \"prismjs/components/prism-git\" */\n\nPrism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/m\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit_sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nPrism.languages.go = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/,\n  'boolean': /\\b(?:_|iota|nil|true|false)\\b/,\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,\n  'string': {\n    pattern: /([\"'`])(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: true\n  }\n});\ndelete Prism.languages.go['class-name'];\n/* \"prismjs/components/prism-graphql\" */\n\nPrism.languages.graphql = {\n  'comment': /#.*/,\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:true|false)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:enum|fragment|implements|input|interface|mutation|on|query|scalar|schema|type|union)\\b/,\n  'operator': /[!=|]|\\.{3}/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'constant': /\\b(?!ID\\b)[A-Z][A-Z_\\d]*\\b/\n};\n/* \"prismjs/components/prism-handlebars\" */\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'block': {\n      pattern: /^(\\s*~?\\s*)[#\\/]\\S+?(?=\\s*~?\\s*$|\\s)/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n})(Prism);\n/* \"prismjs/components/prism-json\" */\n\n\nPrism.languages.json = {\n  'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n  'property': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    greedy: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    greedy: true\n  },\n  'number': /-?\\d+\\.?\\d*(e[+-]?\\d+)?/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nPrism.languages.less = Prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n  'operator': /[+\\-*\\/]/\n});\nPrism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      \"punctuation\": /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nPrism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  // Built-in target names\n  'builtin': /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n  // Targets\n  'symbol': {\n    pattern: /^[^:=\\r\\n]+(?=\\s*:(?!=))/m,\n    inside: {\n      'variable': /\\$+(?:[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  'keyword': [// Directives\n  /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/, // Functions\n  {\n    pattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,\n    lookbehind: true\n  }],\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-markdown\" */\n\nPrism.languages.markdown = Prism.languages.extend('markup', {});\nPrism.languages.insertBefore('markdown', 'prolog', {\n  'blockquote': {\n    // > ...\n    pattern: /^>(?:[\\t ]*>)*/m,\n    alias: 'punctuation'\n  },\n  'code': [{\n    // Prefixed by 4 spaces or 1 tab\n    pattern: /^(?: {4}|\\t).+/m,\n    alias: 'keyword'\n  }, {\n    // `code`\n    // ``code``\n    pattern: /``.+?``|`[^`\\n]+`/,\n    alias: 'keyword'\n  }, {\n    // ```optional language\n    // code block\n    // ```\n    pattern: /^```[\\s\\S]*?^```$/m,\n    greedy: true,\n    inside: {\n      'code-block': {\n        pattern: /^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,\n        lookbehind: true\n      },\n      'code-language': {\n        pattern: /^(```).+/,\n        lookbehind: true\n      },\n      'punctuation': /```/\n    }\n  }],\n  'title': [{\n    // title 1\n    // =======\n    // title 2\n    // -------\n    pattern: /\\S.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n    alias: 'important',\n    inside: {\n      punctuation: /==+$|--+$/\n    }\n  }, {\n    // # title 1\n    // ###### title 6\n    pattern: /(^\\s*)#+.+/m,\n    lookbehind: true,\n    alias: 'important',\n    inside: {\n      punctuation: /^#+|#+$/\n    }\n  }],\n  'hr': {\n    // ***\n    // ---\n    // * * *\n    // -----------\n    pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind: true,\n    alias: 'punctuation'\n  },\n  'list': {\n    // * item\n    // + item\n    // - item\n    // 1. item\n    pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind: true,\n    alias: 'punctuation'\n  },\n  'url-reference': {\n    // [id]: http://example.com \"Optional title\"\n    // [id]: http://example.com 'Optional title'\n    // [id]: http://example.com (Optional title)\n    // [id]: <http://example.com> \"Optional title\"\n    pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside: {\n      'variable': {\n        pattern: /^(!?\\[)[^\\]]+/,\n        lookbehind: true\n      },\n      'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      'punctuation': /^[\\[\\]!:]|[<>]/\n    },\n    alias: 'url'\n  },\n  'bold': {\n    // **strong**\n    // __strong__\n    // Allow only one line break\n    pattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'punctuation': /^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  'italic': {\n    // *em*\n    // _em_\n    // Allow only one line break\n    pattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'punctuation': /^[*_]|[*_]$/\n    }\n  },\n  'strike': {\n    // ~~strike through~~\n    // ~strike~\n    // Allow only one line break\n    pattern: /(^|[^\\\\])(~~?)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'punctuation': /^~~?|~~?$/\n    }\n  },\n  'url': {\n    // [example](http://example.com \"Optional title\")\n    // [example] [id]\n    pattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside: {\n      'variable': {\n        pattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind: true\n      },\n      'string': {\n        pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n});\n['bold', 'italic', 'strike'].forEach(function (token) {\n  ['url', 'bold', 'italic', 'strike'].forEach(function (inside) {\n    if (token !== inside) {\n      Prism.languages.markdown[token].inside[inside] = Prism.languages.markdown[inside];\n    }\n  });\n});\nPrism.hooks.add('after-tokenize', function (env) {\n  if (env.language !== 'markdown' && env.language !== 'md') {\n    return;\n  }\n\n  function walkTokens(tokens) {\n    if (!tokens || typeof tokens === 'string') {\n      return;\n    }\n\n    for (var i = 0, l = tokens.length; i < l; i++) {\n      var token = tokens[i];\n\n      if (token.type !== 'code') {\n        walkTokens(token.content);\n        continue;\n      }\n\n      var codeLang = token.content[1];\n      var codeBlock = token.content[3];\n\n      if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n        // this might be a language that Prism does not support\n        var alias = 'language-' + codeLang.content.trim().split(/\\s+/)[0].toLowerCase(); // add alias\n\n        if (!codeBlock.alias) {\n          codeBlock.alias = [alias];\n        } else if (typeof codeBlock.alias === 'string') {\n          codeBlock.alias = [codeBlock.alias, alias];\n        } else {\n          codeBlock.alias.push(alias);\n        }\n      }\n    }\n  }\n\n  walkTokens(env.tokens);\n});\nPrism.hooks.add('wrap', function (env) {\n  if (env.type !== 'code-block') {\n    return;\n  }\n\n  var codeLang = '';\n\n  for (var i = 0, l = env.classes.length; i < l; i++) {\n    var cls = env.classes[i];\n    var match = /language-(.+)/.exec(cls);\n\n    if (match) {\n      codeLang = match[1];\n      break;\n    }\n  }\n\n  var grammar = Prism.languages[codeLang];\n\n  if (!grammar) {\n    return;\n  } // reverse Prism.util.encode\n\n\n  var code = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n  env.content = Prism.highlight(code, grammar, codeLang);\n});\nPrism.languages.md = Prism.languages.markdown;\n/* \"prismjs/components/prism-objectivec\" */\n\nPrism.languages.objectivec = Prism.languages.extend('c', {\n  'keyword': /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'string': /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete Prism.languages.objectivec['class-name'];\n/* \"prismjs/components/prism-ocaml\" */\n\nPrism.languages.ocaml = {\n  'comment': /\\(\\*[\\s\\S]*?\\*\\)/,\n  'string': [{\n    pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n    greedy: true\n  }],\n  'number': /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*\\.?[\\d_]*(?:e[+-]?[\\d_]+)?)/i,\n  'type': {\n    pattern: /\\B['`]\\w*/,\n    alias: 'variable'\n  },\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|object|of|open|prefix|private|rec|then|sig|struct|to|try|type|val|value|virtual|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  // Custom operators are allowed\n  'operator': /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lxor|lsl|lsr|mod|nor|or)\\b/,\n  'punctuation': /[(){}\\[\\]|_.,:;]/\n};\n/* \"prismjs/components/prism-python\" */\n\nPrism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]+?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^\\s*)@\\w+(?:\\.\\w+)*/i,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:True|False|None)\\b/,\n  'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n  'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;\nPrism.languages.py = Prism.languages.python;\n/* \"prismjs/components/prism-reason\" */\n\nPrism.languages.reason = Prism.languages.extend('clike', {\n  'comment': {\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n  'character': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    alias: 'string'\n  },\n  'constructor': {\n    // Negative look-ahead prevents from matching things like String.capitalize\n    pattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    alias: 'variable'\n  },\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete Prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s+)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n      lookbehind: true\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-scss\" */\n\n\nPrism.languages.scss = Prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)*url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()]|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nPrism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i, {\n    pattern: /( +)(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nPrism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nPrism.languages.insertBefore('scss', 'function', {\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n    lookbehind: true\n  }\n});\nPrism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\n/* \"prismjs/components/prism-sql\" */\n\nPrism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var inside = {\n    'url': /url\\(([\"']?).*?\\1\\)/i,\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'number': /\\b\\d+(?:\\.\\d+)?%?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^{|}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'comment': {\n      pattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'atrule-declaration': {\n      pattern: /(^\\s*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,\n      lookbehind: true,\n      inside: {\n        keyword: /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(Prism);\n/* \"prismjs/components/prism-wasm\" */\n\n\nPrism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^_`|~]+/i,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\n/* \"prismjs/components/prism-yaml\" */\n\nPrism.languages.yaml = {\n  'scalar': {\n    pattern: /([\\-:]\\s*(?:![^\\s]+)?[ \\t]*[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)[^\\r\\n]+(?:\\2[^\\r\\n]+)*)/,\n    lookbehind: true,\n    alias: 'string'\n  },\n  'comment': /#.*/,\n  'key': {\n    pattern: /(\\s*(?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:![^\\s]+)?[ \\t]*)[^\\r\\n{[\\]},#\\s]+?(?=\\s*:\\s)/,\n    lookbehind: true,\n    alias: 'atrule'\n  },\n  'directive': {\n    pattern: /(^[ \\t]*)%.+/m,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'datetime': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?)?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?)(?=[ \\t]*(?:$|,|]|}))/m,\n    lookbehind: true,\n    alias: 'number'\n  },\n  'boolean': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:true|false)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'null': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:null|~)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'string': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(\"|')(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2(?=[ \\t]*(?:$|,|]|}|\\s*#))/m,\n    lookbehind: true,\n    greedy: true\n  },\n  'number': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+\\.?\\d*|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true\n  },\n  'tag': /![^\\s]+/,\n  'important': /[&*][\\w]+/,\n  'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n};\nPrism.languages.yml = Prism.languages.yaml;\nexport default Prism;","map":{"version":3,"sources":["/Users/greypro/Documents/Dev/letter/letter-support/node_modules/prism-react-renderer/es/vendor/prism/index.js"],"names":["Prism","languages","markup","pattern","greedy","inside","lookbehind","hooks","add","env","type","attributes","content","replace","Object","defineProperty","tag","value","addInlined","tagName","lang","includedCdataInside","def","RegExp","source","insertBefore","xml","extend","html","mathml","svg","insideString","variable","number","operator","punctuation","bash","alias","string","keyword","shell","clike","c","cpp","css","rest","selector","javascript","js","util","clone","jsx","stringifyToken","token","map","join","walkTokens","tokens","openedTags","i","length","notTagNorBrace","pop","push","openedBraces","plainText","splice","Token","language","javaDocLike","javadoclike","docCommentSupport","callback","tokenName","grammar","definition","Array","isArray","l","addSupport","docLanguage","forEach","keywords","className","java","function","getPlaceholder","index","toUpperCase","defineProperties","buildPlaceholders","placeholderPattern","replaceFilter","tokenStack","code","match","placeholder","indexOf","tokenizePlaceholders","j","keys","k","t","s","before","substring","middle","tokenize","after","replacement","apply","concat","php","string_interpolation","test","phpPattern","parameterPrefix","jsdoc","actionscript","comment","interpolation","coffeescript","coffee","unshift","maybeClassNameTokens","flow","n4js","n4jsd","typescript","ts","diff","git","go","graphql","handlebars","handlebarsPattern","json","less","makefile","markdown","codeLang","codeBlock","trim","split","toLowerCase","classes","cls","exec","highlight","md","objectivec","ocaml","python","py","reason","sass","atrule","important","property","scss","sql","stylus","func","wasm","yaml","yml"],"mappings":"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","sourcesContent":["import Prism from './prism-core';\n\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\nPrism.languages.markup = {\n  'comment': /<!--[\\s\\S]*?-->/,\n  'prolog': /<\\?[\\s\\S]+?\\?>/,\n  'doctype': /<!DOCTYPE[\\s\\S]+?>/i,\n  'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/i,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n        inside: {\n          'punctuation': [/^=/, {\n            pattern: /^(\\s*)[\"']|[\"']$/,\n            lookbehind: true\n          }]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': /&#?[\\da-z]{1,8};/i\n};\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity']; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: Prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, tagName), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    Prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  var insideString = {\n    variable: [// Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        variable: [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        operator: /--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        punctuation: /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // Command Substitution\n    {\n      pattern: /\\$\\([^)]+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        variable: /^\\$\\(|^`|\\)$|`$/\n      }\n    }, /\\$(?:[\\w#?*!@]+|\\{[^}]+\\})/i]\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/bin\\/bash|^#!\\s*\\/bin\\/sh/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\])#.*/,\n      lookbehind: true\n    },\n    'string': [//Support for Here-Documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<\\s*)[\"']?(\\w+?)[\"']?\\s*\\r?\\n(?:[\\s\\S])*?\\r?\\n\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, {\n      pattern: /([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|`[^`]+`|(?!\\1)[^\\\\])*\\1/,\n      greedy: true,\n      inside: insideString\n    }],\n    'variable': insideString.variable,\n    // Originally based on http://ss64.com/bash/\n    'function': {\n      pattern: /(^|[\\s;|&])(?:add|alias|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|builtin|bzip2|cal|cat|cd|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|comm|command|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|ethtool|eval|exec|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|getopts|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|hash|head|help|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logout|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|quota|quotacheck|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|shift|shopt|shutdown|sleep|slocate|sort|source|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tail|tar|tee|test|time|timeout|times|top|touch|tr|traceroute|trap|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zip|zypper)(?=$|[\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&])(?:let|:|\\.|if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)(?=$|[\\s;|&])/,\n      lookbehind: true\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&])(?:true|false)(?=$|[\\s;|&])/,\n      lookbehind: true\n    },\n    'operator': /&&?|\\|\\|?|==?|!=?|<<<?|>>|<=?|>=?|=~/,\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];]/\n  };\n  var inside = insideString.variable[1].inside;\n  inside.string = Prism.languages.bash.string;\n  inside['function'] = Prism.languages.bash['function'];\n  inside.keyword = Prism.languages.bash.keyword;\n  inside['boolean'] = Prism.languages.bash['boolean'];\n  inside.operator = Prism.languages.bash.operator;\n  inside.punctuation = Prism.languages.bash.punctuation;\n  Prism.languages.shell = Prism.languages.bash;\n})(Prism);\n/* \"prismjs/components/prism-clike\" */\n\n\nPrism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      punctuation: /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'function': /\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nPrism.languages.c = Prism.languages.extend('clike', {\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+)\\w+/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/,\n  'number': /(?:\\b0x(?:[\\da-f]+\\.?[\\da-f]*|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]*/i\n});\nPrism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^\\s*)#\\s*[a-z]+(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    alias: 'property',\n    inside: {\n      // highlight the path of the include statement as a string\n      'string': {\n        pattern: /(#\\s*include\\s*)(?:<.+?>|(\"|')(?:\\\\?.)+?\\2)/,\n        lookbehind: true\n      },\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /(#\\s*)\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\b/,\n        lookbehind: true,\n        alias: 'keyword'\n      }\n    }\n  },\n  // highlight predefined macros as constants\n  'constant': /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n});\ndelete Prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\nPrism.languages.cpp = Prism.languages.extend('c', {\n  'class-name': {\n    pattern: /(\\b(?:class|enum|struct)\\s+)\\w+/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/\n});\nPrism.languages.insertBefore('cpp', 'string', {\n  'raw-string': {\n    pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n    alias: 'string',\n    greedy: true\n  }\n});\n/* \"prismjs/components/prism-css\" */\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-]+?[\\s\\S]*?(?:;|(?=\\s*\\{))/i,\n      inside: {\n        'rule': /@[\\w-]+/ // See rest below\n\n      }\n    },\n    'url': RegExp('url\\\\((?:' + string.source + '|.*?)\\\\)', 'i'),\n    'selector': RegExp('[^{}\\\\s](?:[^{};\"\\']|' + string.source + ')*?(?=\\\\s*\\\\{)'),\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n    'important': /!important\\b/i,\n    'function': /[-a-z0-9]+(?=\\()/i,\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    Prism.languages.insertBefore('inside', 'attr-value', {\n      'style-attr': {\n        pattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n        inside: {\n          'attr-name': {\n            pattern: /^\\s*style/i,\n            inside: markup.tag.inside\n          },\n          'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,\n          'attr-value': {\n            pattern: /.+/i,\n            inside: Prism.languages.css\n          }\n        },\n        alias: 'language-css'\n      }\n    }, markup.tag);\n  }\n})(Prism);\n/* \"prismjs/components/prism-css-extras\" */\n\n\nPrism.languages.css.selector = {\n  pattern: Prism.languages.css.selector,\n  inside: {\n    'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n    'pseudo-class': /:[-\\w]+/,\n    'class': /\\.[-:.\\w]+/,\n    'id': /#[-:.\\w]+/,\n    'attribute': {\n      pattern: /\\[(?:[^[\\]\"']|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1)*\\]/,\n      greedy: true,\n      inside: {\n        'punctuation': /^\\[|\\]$/,\n        'case-sensitivity': {\n          pattern: /(\\s)[si]$/i,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'namespace': {\n          pattern: /^(\\s*)[-*\\w\\xA0-\\uFFFF]*\\|(?!=)/,\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\|$/\n          }\n        },\n        'attribute': {\n          pattern: /^(\\s*)[-\\w\\xA0-\\uFFFF]+/,\n          lookbehind: true\n        },\n        'value': [/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/, {\n          pattern: /(=\\s*)[-\\w\\xA0-\\uFFFF]+(?=\\s*$)/,\n          lookbehind: true\n        }],\n        'operator': /[|~*^$]?=/\n      }\n    },\n    'n-th': {\n      pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n      lookbehind: true,\n      inside: {\n        'number': /[\\dn]+/,\n        'operator': /[+-]/\n      }\n    },\n    'punctuation': /[()]/\n  }\n};\nPrism.languages.insertBefore('css', 'property', {\n  'variable': {\n    pattern: /(^|[^-\\w\\xA0-\\uFFFF])--[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*/i,\n    lookbehind: true\n  }\n});\nPrism.languages.insertBefore('css', 'function', {\n  'operator': {\n    pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n    lookbehind: true\n  },\n  'hexcode': /#[\\da-f]{3,8}/i,\n  'entity': /\\\\[\\da-f]{1,8}/i,\n  'unit': {\n    pattern: /(\\d)(?:%|[a-z]+)/,\n    lookbehind: true\n  },\n  'number': /-?[\\d.]+/\n});\n/* \"prismjs/components/prism-javascript\" */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n  'class-name': [Prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  'number': /\\b(?:(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\\d+n|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'operator': /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nPrism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n    lookbehind: true,\n    greedy: true\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nPrism.languages.insertBefore('javascript', 'string', {\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\${[^}]+}|[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /\\${[^}]+}/,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\${|}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\n\nif (Prism.languages.markup) {\n  Prism.languages.markup.tag.addInlined('script', 'javascript');\n}\n\nPrism.languages.js = Prism.languages.javascript;\n/* \"prismjs/components/prism-jsx\" */\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i;\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: /\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,\n      inside: {\n        'punctuation': /\\.{3}|[{}.]/,\n        'attr-value': /\\w+/\n      }\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'attr-value', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: /=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?={)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      },\n      'alias': 'language-javascript'\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function stringifyToken(token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function walkTokens(tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') {} else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(Prism);\n/* \"prismjs/components/prism-javadoclike\" */\n\n\n(function (Prism) {\n  var javaDocLike = Prism.languages.javadoclike = {\n    'parameter': {\n      pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n      lookbehind: true\n    },\n    'keyword': {\n      // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n      // @word, {@word}\n      pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n      lookbehind: true\n    },\n    'punctuation': /[{}]/\n  };\n  /**\n   * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n   *\n   * @param {string} lang the language add doc comment support to.\n   * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n   */\n\n  function docCommentSupport(lang, callback) {\n    var tokenName = 'doc-comment';\n    var grammar = Prism.languages[lang];\n\n    if (!grammar) {\n      return;\n    }\n\n    var token = grammar[tokenName];\n\n    if (!token) {\n      // add doc comment: /** */\n      var definition = {};\n      definition[tokenName] = {\n        pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n        alias: 'comment'\n      };\n      grammar = Prism.languages.insertBefore(lang, 'comment', definition);\n      token = grammar[tokenName];\n    }\n\n    if (token instanceof RegExp) {\n      // convert regex to object\n      token = grammar[tokenName] = {\n        pattern: token\n      };\n    }\n\n    if (Array.isArray(token)) {\n      for (var i = 0, l = token.length; i < l; i++) {\n        if (token[i] instanceof RegExp) {\n          token[i] = {\n            pattern: token[i]\n          };\n        }\n\n        callback(token[i]);\n      }\n    } else {\n      callback(token);\n    }\n  }\n  /**\n   * Adds doc-comment support to the given languages for the given documentation language.\n   *\n   * @param {string[]|string} languages\n   * @param {Object} docLanguage\n   */\n\n\n  function addSupport(languages, docLanguage) {\n    if (typeof languages === 'string') {\n      languages = [languages];\n    }\n\n    languages.forEach(function (lang) {\n      docCommentSupport(lang, function (pattern) {\n        if (!pattern.inside) {\n          pattern.inside = {};\n        }\n\n        pattern.inside.rest = docLanguage;\n      });\n    });\n  }\n\n  Object.defineProperty(javaDocLike, 'addSupport', {\n    value: addSupport\n  });\n  javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n})(Prism);\n/* \"prismjs/components/prism-java\" */\n\n\n(function (Prism) {\n  var keywords = /\\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while|var|null|exports|module|open|opens|provides|requires|to|transitive|uses|with)\\b/; // based on the java naming conventions\n\n  var className = /\\b[A-Z](?:\\w*[a-z]\\w*)?\\b/;\n  Prism.languages.java = Prism.languages.extend('clike', {\n    'class-name': [className, // variables and parameters\n    // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n    /\\b[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/],\n    'keyword': keywords,\n    'function': [Prism.languages.clike.function, {\n      pattern: /(\\:\\:)[a-z_]\\w*/,\n      lookbehind: true\n    }],\n    'number': /\\b0b[01][01_]*L?\\b|\\b0x[\\da-f_]*\\.?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*\\.?[\\d_]*|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n    'operator': {\n      pattern: /(^|[^.])(?:<<=?|>>>?=?|->|([-+&|])\\2|[?:~]|[-+*/%&|^!=<>]=?)/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('java', 'class-name', {\n    'annotation': {\n      alias: 'punctuation',\n      pattern: /(^|[^.])@\\w+/,\n      lookbehind: true\n    },\n    'namespace': {\n      pattern: /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)[a-z]\\w*(\\.[a-z]\\w*)+/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    },\n    'generics': {\n      pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n      inside: {\n        'class-name': className,\n        'keyword': keywords,\n        'punctuation': /[<>(),.:]/,\n        'operator': /[?&|]/\n      }\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-markup-templating\" */\n\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function value(env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n            ++i;\n          } // Create a sparse array\n\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function value(env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n\n            var token = tokens[i];\n\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n\n                replacement.push(middle);\n\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */\n            ) {\n                walkTokens(token.content);\n              }\n          }\n\n          return tokens;\n        }\n\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-php\" */\n\n/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n\n\n(function (Prism) {\n  Prism.languages.php = Prism.languages.extend('clike', {\n    'keyword': /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n    'boolean': {\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: 'constant'\n    },\n    'constant': [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('php', 'string', {\n    'shell-comment': {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true,\n      alias: 'comment'\n    }\n  });\n  Prism.languages.insertBefore('php', 'comment', {\n    'delimiter': {\n      pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n      alias: 'important'\n    }\n  });\n  Prism.languages.insertBefore('php', 'keyword', {\n    'variable': /\\$+(?:\\w+\\b|(?={))/i,\n    'package': {\n      pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\\\/\n      }\n    }\n  }); // Must be defined after the function pattern\n\n  Prism.languages.insertBefore('php', 'operator', {\n    'property': {\n      pattern: /(->)[\\w]+/,\n      lookbehind: true\n    }\n  });\n  var string_interpolation = {\n    pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n    lookbehind: true,\n    inside: {\n      rest: Prism.languages.php\n    }\n  };\n  Prism.languages.insertBefore('php', 'string', {\n    'nowdoc-string': {\n      pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<'?|[';]$/\n          }\n        }\n      }\n    },\n    'heredoc-string': {\n      pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<\"?|[\";]$/\n          }\n        },\n        'interpolation': string_interpolation // See below\n\n      }\n    },\n    'single-quoted-string': {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'double-quoted-string': {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'interpolation': string_interpolation // See below\n\n      }\n    }\n  }); // The different types of PHP strings \"replace\" the C-like standard string\n\n  delete Prism.languages.php['string'];\n  Prism.hooks.add('before-tokenize', function (env) {\n    if (!/<\\?/.test(env.code)) {\n      return;\n    }\n\n    var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/ig;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n  });\n})(Prism);\n/* \"prismjs/components/prism-jsdoc\" */\n\n\n(function (Prism) {\n  var javascript = Prism.languages.javascript;\n  var type = /{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})+}/.source;\n  var parameterPrefix = '(@(?:param|arg|argument|property)\\\\s+(?:' + type + '\\\\s+)?)';\n  Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {\n    'parameter': {\n      // @param {string} foo - foo bar\n      pattern: RegExp(parameterPrefix + /[$\\w\\xA0-\\uFFFF.]+(?=\\s|$)/.source),\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    }\n  });\n  Prism.languages.insertBefore('jsdoc', 'keyword', {\n    'optional-parameter': {\n      // @param {string} [baz.foo=\"bar\"] foo bar\n      pattern: RegExp(parameterPrefix + /\\[[$\\w\\xA0-\\uFFFF.]+(?:=[^[\\]]+)?\\](?=\\s|$)/.source),\n      lookbehind: true,\n      inside: {\n        'parameter': {\n          pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\./\n          }\n        },\n        'code': {\n          pattern: /(=)[\\s\\S]*(?=\\]$)/,\n          lookbehind: true,\n          inside: javascript,\n          alias: 'language-javascript'\n        },\n        'punctuation': /[=[\\]]/\n      }\n    },\n    'class-name': [{\n      pattern: RegExp('(@[a-z]+\\\\s+)' + type),\n      lookbehind: true,\n      inside: {\n        'punctuation': /[.,:?=<>|{}()[\\]]/\n      }\n    }, {\n      pattern: /(@(?:augments|extends|class|interface|memberof!?|this)\\s+)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    }],\n    'example': {\n      pattern: /(@example\\s+)[^@]+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n      lookbehind: true,\n      inside: {\n        'code': {\n          pattern: /^(\\s*(?:\\*\\s*)?).+$/m,\n          lookbehind: true,\n          inside: javascript,\n          alias: 'language-javascript'\n        }\n      }\n    }\n  });\n  Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc);\n})(Prism);\n/* \"prismjs/components/prism-actionscript\" */\n\n\nPrism.languages.actionscript = Prism.languages.extend('javascript', {\n  'keyword': /\\b(?:as|break|case|catch|class|const|default|delete|do|else|extends|finally|for|function|if|implements|import|in|instanceof|interface|internal|is|native|new|null|package|private|protected|public|return|super|switch|this|throw|try|typeof|use|var|void|while|with|dynamic|each|final|get|include|namespace|native|override|set|static)\\b/,\n  'operator': /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/\n});\nPrism.languages.actionscript['class-name'].alias = 'function';\n\nif (Prism.languages.markup) {\n  Prism.languages.insertBefore('actionscript', 'string', {\n    'xml': {\n      pattern: /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.markup\n      }\n    }\n  });\n}\n/* \"prismjs/components/prism-coffeescript\" */\n\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/,\n      interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.javascript\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(Prism);\n/* \"prismjs/components/prism-js-extras\" */\n\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: /(\\.\\s*)[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*/,\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(Prism);\n/* \"prismjs/components/prism-flow\" */\n\n\n(function (Prism) {\n  Prism.languages.flow = Prism.languages.extend('javascript', {});\n  Prism.languages.insertBefore('flow', 'keyword', {\n    'type': [{\n      pattern: /\\b(?:[Nn]umber|[Ss]tring|[Bb]oolean|Function|any|mixed|null|void)\\b/,\n      alias: 'tag'\n    }]\n  });\n  Prism.languages.flow['function-variable'].pattern = /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)(?:\\s*:\\s*\\w+)?|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i;\n  delete Prism.languages.flow['parameter'];\n  Prism.languages.insertBefore('flow', 'operator', {\n    'flow-punctuation': {\n      pattern: /\\{\\||\\|\\}/,\n      alias: 'punctuation'\n    }\n  });\n\n  if (!Array.isArray(Prism.languages.flow.keyword)) {\n    Prism.languages.flow.keyword = [Prism.languages.flow.keyword];\n  }\n\n  Prism.languages.flow.keyword.unshift({\n    pattern: /(^|[^$]\\b)(?:type|opaque|declare|Class)\\b(?!\\$)/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^$]\\B)\\$(?:await|Diff|Exact|Keys|ObjMap|PropertyType|Shape|Record|Supertype|Subtype|Enum)\\b(?!\\$)/,\n    lookbehind: true\n  });\n})(Prism);\n/* \"prismjs/components/prism-n4js\" */\n\n\nPrism.languages.n4js = Prism.languages.extend('javascript', {\n  // Keywords from N4JS language spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html\n  'keyword': /\\b(?:any|Array|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/\n});\nPrism.languages.insertBefore('n4js', 'constant', {\n  // Annotations in N4JS spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html#_annotations\n  'annotation': {\n    pattern: /@+\\w+/,\n    alias: 'operator'\n  }\n});\nPrism.languages.n4jsd = Prism.languages.n4js;\n/* \"prismjs/components/prism-typescript\" */\n\nPrism.languages.typescript = Prism.languages.extend('javascript', {\n  // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n  'keyword': /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n  'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n});\nPrism.languages.ts = Prism.languages.typescript;\n/* \"prismjs/components/prism-diff\" */\n\nPrism.languages.diff = {\n  'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n  /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n  /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n  /^\\d+.*$/m],\n  // Match inserted and deleted lines. Support both +/- and >/< styles.\n  'deleted': /^[-<].*$/m,\n  'inserted': /^[+>].*$/m,\n  // Match \"different\" lines (prefixed with \"!\") in context diff.\n  'diff': {\n    'pattern': /^!(?!!).+$/m,\n    'alias': 'important'\n  }\n};\n/* \"prismjs/components/prism-git\" */\n\nPrism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/m\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit_sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nPrism.languages.go = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/,\n  'boolean': /\\b(?:_|iota|nil|true|false)\\b/,\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,\n  'string': {\n    pattern: /([\"'`])(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: true\n  }\n});\ndelete Prism.languages.go['class-name'];\n/* \"prismjs/components/prism-graphql\" */\n\nPrism.languages.graphql = {\n  'comment': /#.*/,\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:true|false)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:enum|fragment|implements|input|interface|mutation|on|query|scalar|schema|type|union)\\b/,\n  'operator': /[!=|]|\\.{3}/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'constant': /\\b(?!ID\\b)[A-Z][A-Z_\\d]*\\b/\n};\n/* \"prismjs/components/prism-handlebars\" */\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'block': {\n      pattern: /^(\\s*~?\\s*)[#\\/]\\S+?(?=\\s*~?\\s*$|\\s)/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n})(Prism);\n/* \"prismjs/components/prism-json\" */\n\n\nPrism.languages.json = {\n  'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n  'property': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    greedy: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    greedy: true\n  },\n  'number': /-?\\d+\\.?\\d*(e[+-]?\\d+)?/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nPrism.languages.less = Prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n  'operator': /[+\\-*\\/]/\n});\nPrism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      \"punctuation\": /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nPrism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  // Built-in target names\n  'builtin': /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n  // Targets\n  'symbol': {\n    pattern: /^[^:=\\r\\n]+(?=\\s*:(?!=))/m,\n    inside: {\n      'variable': /\\$+(?:[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  'keyword': [// Directives\n  /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/, // Functions\n  {\n    pattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,\n    lookbehind: true\n  }],\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-markdown\" */\n\nPrism.languages.markdown = Prism.languages.extend('markup', {});\nPrism.languages.insertBefore('markdown', 'prolog', {\n  'blockquote': {\n    // > ...\n    pattern: /^>(?:[\\t ]*>)*/m,\n    alias: 'punctuation'\n  },\n  'code': [{\n    // Prefixed by 4 spaces or 1 tab\n    pattern: /^(?: {4}|\\t).+/m,\n    alias: 'keyword'\n  }, {\n    // `code`\n    // ``code``\n    pattern: /``.+?``|`[^`\\n]+`/,\n    alias: 'keyword'\n  }, {\n    // ```optional language\n    // code block\n    // ```\n    pattern: /^```[\\s\\S]*?^```$/m,\n    greedy: true,\n    inside: {\n      'code-block': {\n        pattern: /^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,\n        lookbehind: true\n      },\n      'code-language': {\n        pattern: /^(```).+/,\n        lookbehind: true\n      },\n      'punctuation': /```/\n    }\n  }],\n  'title': [{\n    // title 1\n    // =======\n    // title 2\n    // -------\n    pattern: /\\S.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n    alias: 'important',\n    inside: {\n      punctuation: /==+$|--+$/\n    }\n  }, {\n    // # title 1\n    // ###### title 6\n    pattern: /(^\\s*)#+.+/m,\n    lookbehind: true,\n    alias: 'important',\n    inside: {\n      punctuation: /^#+|#+$/\n    }\n  }],\n  'hr': {\n    // ***\n    // ---\n    // * * *\n    // -----------\n    pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind: true,\n    alias: 'punctuation'\n  },\n  'list': {\n    // * item\n    // + item\n    // - item\n    // 1. item\n    pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind: true,\n    alias: 'punctuation'\n  },\n  'url-reference': {\n    // [id]: http://example.com \"Optional title\"\n    // [id]: http://example.com 'Optional title'\n    // [id]: http://example.com (Optional title)\n    // [id]: <http://example.com> \"Optional title\"\n    pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside: {\n      'variable': {\n        pattern: /^(!?\\[)[^\\]]+/,\n        lookbehind: true\n      },\n      'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      'punctuation': /^[\\[\\]!:]|[<>]/\n    },\n    alias: 'url'\n  },\n  'bold': {\n    // **strong**\n    // __strong__\n    // Allow only one line break\n    pattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'punctuation': /^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  'italic': {\n    // *em*\n    // _em_\n    // Allow only one line break\n    pattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'punctuation': /^[*_]|[*_]$/\n    }\n  },\n  'strike': {\n    // ~~strike through~~\n    // ~strike~\n    // Allow only one line break\n    pattern: /(^|[^\\\\])(~~?)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'punctuation': /^~~?|~~?$/\n    }\n  },\n  'url': {\n    // [example](http://example.com \"Optional title\")\n    // [example] [id]\n    pattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside: {\n      'variable': {\n        pattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind: true\n      },\n      'string': {\n        pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n});\n['bold', 'italic', 'strike'].forEach(function (token) {\n  ['url', 'bold', 'italic', 'strike'].forEach(function (inside) {\n    if (token !== inside) {\n      Prism.languages.markdown[token].inside[inside] = Prism.languages.markdown[inside];\n    }\n  });\n});\nPrism.hooks.add('after-tokenize', function (env) {\n  if (env.language !== 'markdown' && env.language !== 'md') {\n    return;\n  }\n\n  function walkTokens(tokens) {\n    if (!tokens || typeof tokens === 'string') {\n      return;\n    }\n\n    for (var i = 0, l = tokens.length; i < l; i++) {\n      var token = tokens[i];\n\n      if (token.type !== 'code') {\n        walkTokens(token.content);\n        continue;\n      }\n\n      var codeLang = token.content[1];\n      var codeBlock = token.content[3];\n\n      if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n        // this might be a language that Prism does not support\n        var alias = 'language-' + codeLang.content.trim().split(/\\s+/)[0].toLowerCase(); // add alias\n\n        if (!codeBlock.alias) {\n          codeBlock.alias = [alias];\n        } else if (typeof codeBlock.alias === 'string') {\n          codeBlock.alias = [codeBlock.alias, alias];\n        } else {\n          codeBlock.alias.push(alias);\n        }\n      }\n    }\n  }\n\n  walkTokens(env.tokens);\n});\nPrism.hooks.add('wrap', function (env) {\n  if (env.type !== 'code-block') {\n    return;\n  }\n\n  var codeLang = '';\n\n  for (var i = 0, l = env.classes.length; i < l; i++) {\n    var cls = env.classes[i];\n    var match = /language-(.+)/.exec(cls);\n\n    if (match) {\n      codeLang = match[1];\n      break;\n    }\n  }\n\n  var grammar = Prism.languages[codeLang];\n\n  if (!grammar) {\n    return;\n  } // reverse Prism.util.encode\n\n\n  var code = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n  env.content = Prism.highlight(code, grammar, codeLang);\n});\nPrism.languages.md = Prism.languages.markdown;\n/* \"prismjs/components/prism-objectivec\" */\n\nPrism.languages.objectivec = Prism.languages.extend('c', {\n  'keyword': /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'string': /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete Prism.languages.objectivec['class-name'];\n/* \"prismjs/components/prism-ocaml\" */\n\nPrism.languages.ocaml = {\n  'comment': /\\(\\*[\\s\\S]*?\\*\\)/,\n  'string': [{\n    pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n    greedy: true\n  }],\n  'number': /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*\\.?[\\d_]*(?:e[+-]?[\\d_]+)?)/i,\n  'type': {\n    pattern: /\\B['`]\\w*/,\n    alias: 'variable'\n  },\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|object|of|open|prefix|private|rec|then|sig|struct|to|try|type|val|value|virtual|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  // Custom operators are allowed\n  'operator': /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lxor|lsl|lsr|mod|nor|or)\\b/,\n  'punctuation': /[(){}\\[\\]|_.,:;]/\n};\n/* \"prismjs/components/prism-python\" */\n\nPrism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]+?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^\\s*)@\\w+(?:\\.\\w+)*/i,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:True|False|None)\\b/,\n  'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n  'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;\nPrism.languages.py = Prism.languages.python;\n/* \"prismjs/components/prism-reason\" */\n\nPrism.languages.reason = Prism.languages.extend('clike', {\n  'comment': {\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n  'character': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    alias: 'string'\n  },\n  'constructor': {\n    // Negative look-ahead prevents from matching things like String.capitalize\n    pattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    alias: 'variable'\n  },\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete Prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s+)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n      lookbehind: true\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-scss\" */\n\n\nPrism.languages.scss = Prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)*url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()]|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nPrism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i, {\n    pattern: /( +)(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nPrism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nPrism.languages.insertBefore('scss', 'function', {\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n    lookbehind: true\n  }\n});\nPrism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\n/* \"prismjs/components/prism-sql\" */\n\nPrism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var inside = {\n    'url': /url\\(([\"']?).*?\\1\\)/i,\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'number': /\\b\\d+(?:\\.\\d+)?%?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^{|}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'comment': {\n      pattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'atrule-declaration': {\n      pattern: /(^\\s*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,\n      lookbehind: true,\n      inside: {\n        keyword: /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(Prism);\n/* \"prismjs/components/prism-wasm\" */\n\n\nPrism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^_`|~]+/i,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\n/* \"prismjs/components/prism-yaml\" */\n\nPrism.languages.yaml = {\n  'scalar': {\n    pattern: /([\\-:]\\s*(?:![^\\s]+)?[ \\t]*[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)[^\\r\\n]+(?:\\2[^\\r\\n]+)*)/,\n    lookbehind: true,\n    alias: 'string'\n  },\n  'comment': /#.*/,\n  'key': {\n    pattern: /(\\s*(?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:![^\\s]+)?[ \\t]*)[^\\r\\n{[\\]},#\\s]+?(?=\\s*:\\s)/,\n    lookbehind: true,\n    alias: 'atrule'\n  },\n  'directive': {\n    pattern: /(^[ \\t]*)%.+/m,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'datetime': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?)?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?)(?=[ \\t]*(?:$|,|]|}))/m,\n    lookbehind: true,\n    alias: 'number'\n  },\n  'boolean': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:true|false)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'null': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:null|~)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'string': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(\"|')(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2(?=[ \\t]*(?:$|,|]|}|\\s*#))/m,\n    lookbehind: true,\n    greedy: true\n  },\n  'number': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+\\.?\\d*|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true\n  },\n  'tag': /![^\\s]+/,\n  'important': /[&*][\\w]+/,\n  'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n};\nPrism.languages.yml = Prism.languages.yaml;\nexport default Prism;"]},"metadata":{},"sourceType":"module"}