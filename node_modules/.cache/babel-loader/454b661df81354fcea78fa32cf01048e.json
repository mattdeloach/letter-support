{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/components/experience/ExperienceForm.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getDuration } from '../../helpers/utils';\nimport moment from './Experience';\nimport { Button, Col, CustomInput, Form, FormGroup, Row } from 'reactstrap';\nimport ExperienceInput from './ExperienceInput';\n\nconst ExperienceForm = ({\n  experiences,\n  setExperiences\n}) => {\n  // State\n  const [company, setCompany] = useState('');\n  const [position, setPosition] = useState('');\n  const [city, setCity] = useState('');\n  const [description, setDescription] = useState('');\n  const [current, setCurrent] = useState(false);\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [isButtonDisable, setIsButtonDisable] = useState(true);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newExperience = {\n      company,\n      startDate,\n      endDate,\n      description,\n      current,\n      duration: getDuration(startDate, endDate),\n      headline: position,\n      location: city,\n      to: '#!'\n    };\n    setExperiences([newExperience, ...experiences]);\n    setCompany('');\n    setPosition('');\n    setCity('');\n    setDescription('');\n    setCurrent(false);\n    setStartDate('');\n    setEndDate('');\n  };\n\n  useEffect(() => {\n    setIsButtonDisable(!(company && position && city && description && moment.isMoment(startDate) && (current || moment.isMoment(endDate))));\n  }, [company, position, city, description, current, startDate, endDate]);\n  return /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ExperienceInput, {\n    id: \"company\",\n    label: \"Company\",\n    value: company,\n    onChange: ({\n      target\n    }) => setCompany(target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ExperienceInput, {\n    id: \"position\",\n    label: \"Position\",\n    value: position,\n    onChange: ({\n      target\n    }) => setPosition(target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ExperienceInput, {\n    id: \"city\",\n    label: \"City\",\n    value: city,\n    onChange: ({\n      target\n    }) => setCity(target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ExperienceInput, {\n    id: \"experienceDescription\",\n    label: \"Description\",\n    value: description,\n    onChange: ({\n      target\n    }) => setDescription(target.value),\n    type: \"textarea\",\n    rows: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: {\n      size: 7,\n      offset: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CustomInput, {\n    type: \"checkbox\",\n    id: \"current\",\n    label: \"I currently work here\",\n    checked: current,\n    onChange: ({\n      target\n    }) => setCurrent(target.checked),\n    inline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(ExperienceInput, {\n    id: \"experienceFrom\",\n    label: \"From\",\n    value: startDate,\n    onChange: setStartDate,\n    type: \"datetime\",\n    timeFormat: false,\n    closeOnSelect: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }), !current && /*#__PURE__*/React.createElement(ExperienceInput, {\n    id: \"experienceTo\",\n    label: \"To\",\n    value: endDate,\n    onChange: setEndDate,\n    type: \"datetime\",\n    timeFormat: false,\n    closeOnSelect: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: {\n      size: 7,\n      offset: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    disabled: isButtonDisable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, \"Save\")))));\n};\n\nExperienceForm.propTypes = {\n  experiences: PropTypes.array,\n  setExperiences: PropTypes.func.isRequired\n};\nexport default ExperienceForm;","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/components/experience/ExperienceForm.js"],"names":["React","useState","useEffect","PropTypes","getDuration","moment","Button","Col","CustomInput","Form","FormGroup","Row","ExperienceInput","ExperienceForm","experiences","setExperiences","company","setCompany","position","setPosition","city","setCity","description","setDescription","current","setCurrent","startDate","setStartDate","endDate","setEndDate","isButtonDisable","setIsButtonDisable","handleSubmit","e","preventDefault","newExperience","duration","headline","location","to","isMoment","target","value","size","offset","checked","propTypes","array","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { getDuration } from '../../helpers/utils';\r\nimport moment from './Experience';\r\nimport { Button, Col, CustomInput, Form, FormGroup, Row } from 'reactstrap';\r\nimport ExperienceInput from './ExperienceInput';\r\n\r\nconst ExperienceForm = ({ experiences, setExperiences }) => {\r\n  // State\r\n  const [company, setCompany] = useState('');\r\n  const [position, setPosition] = useState('');\r\n  const [city, setCity] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [current, setCurrent] = useState(false);\r\n  const [startDate, setStartDate] = useState('');\r\n  const [endDate, setEndDate] = useState('');\r\n  const [isButtonDisable, setIsButtonDisable] = useState(true);\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const newExperience = {\r\n      company,\r\n      startDate,\r\n      endDate,\r\n      description,\r\n      current,\r\n      duration: getDuration(startDate, endDate),\r\n      headline: position,\r\n      location: city,\r\n      to: '#!'\r\n    };\r\n\r\n    setExperiences([newExperience, ...experiences]);\r\n    setCompany('');\r\n    setPosition('');\r\n    setCity('');\r\n    setDescription('');\r\n    setCurrent(false);\r\n    setStartDate('');\r\n    setEndDate('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsButtonDisable(\r\n      !(\r\n        company &&\r\n        position &&\r\n        city &&\r\n        description &&\r\n        moment.isMoment(startDate) &&\r\n        (current || moment.isMoment(endDate))\r\n      )\r\n    );\r\n  }, [company, position, city, description, current, startDate, endDate]);\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <ExperienceInput\r\n        id=\"company\"\r\n        label=\"Company\"\r\n        value={company}\r\n        onChange={({ target }) => setCompany(target.value)}\r\n      />\r\n\r\n      <ExperienceInput\r\n        id=\"position\"\r\n        label=\"Position\"\r\n        value={position}\r\n        onChange={({ target }) => setPosition(target.value)}\r\n      />\r\n\r\n      <ExperienceInput id=\"city\" label=\"City\" value={city} onChange={({ target }) => setCity(target.value)} />\r\n\r\n      <ExperienceInput\r\n        id=\"experienceDescription\"\r\n        label=\"Description\"\r\n        value={description}\r\n        onChange={({ target }) => setDescription(target.value)}\r\n        type=\"textarea\"\r\n        rows={3}\r\n      />\r\n\r\n      <FormGroup>\r\n        <Row className=\"row\">\r\n          <Col lg={{ size: 7, offset: 3 }}>\r\n            <CustomInput\r\n              type=\"checkbox\"\r\n              id=\"current\"\r\n              label=\"I currently work here\"\r\n              checked={current}\r\n              onChange={({ target }) => setCurrent(target.checked)}\r\n              inline\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </FormGroup>\r\n\r\n      <ExperienceInput\r\n        id=\"experienceFrom\"\r\n        label=\"From\"\r\n        value={startDate}\r\n        onChange={setStartDate}\r\n        type=\"datetime\"\r\n        timeFormat={false}\r\n        closeOnSelect\r\n      />\r\n\r\n      {!current && (\r\n        <ExperienceInput\r\n          id=\"experienceTo\"\r\n          label=\"To\"\r\n          value={endDate}\r\n          onChange={setEndDate}\r\n          type=\"datetime\"\r\n          timeFormat={false}\r\n          closeOnSelect\r\n        />\r\n      )}\r\n\r\n      <FormGroup className=\"form-group\">\r\n        <Row className=\"row\">\r\n          <Col lg={{ size: 7, offset: 3 }}>\r\n            <Button color=\"primary\" disabled={isButtonDisable}>\r\n              Save\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </FormGroup>\r\n    </Form>\r\n  );\r\n};\r\n\r\nExperienceForm.propTypes = {\r\n  experiences: PropTypes.array,\r\n  setExperiences: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ExperienceForm;\r\n"]},"metadata":{},"sourceType":"module"}