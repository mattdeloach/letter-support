{"ast":null,"code":"var _jsxFileName = \"/Users/greypro/Documents/Dev/letter/letter-support/src/components/agent/dashboard/TopProducts.js\";\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport FalconCardHeader from '../../common/FalconCardHeader';\nimport CardDropdown from './CardDropdown';\nimport { Button, Card, CardBody } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport Flex from '../../common/Flex';\nimport echarts from 'echarts/lib/echarts';\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\nimport { getPosition, getGrays } from '../../../helpers/utils';\nimport AppContext from '../../../context/Context';\nimport 'echarts/lib/chart/bar';\nimport 'echarts/lib/component/tooltip';\nimport 'echarts/lib/component/legend';\n\nconst getOption = (data, colors, isDark) => {\n  const grays = getGrays(isDark);\n  return {\n    dataset: {\n      source: data\n    },\n    tooltip: {\n      trigger: 'item',\n      padding: [7, 10],\n      backgroundColor: grays.white,\n      borderColor: grays['300'],\n      borderWidth: 1,\n      textStyle: {\n        color: grays.dark\n      },\n      transitionDuration: 0,\n\n      position(pos, params, dom, rect, size) {\n        return getPosition(pos, params, dom, rect, size);\n      },\n\n      formatter: function (params) {\n        return `<div class=\"font-weight-semi-bold\">${params.seriesName}</div><div class=\"fs--1 text-600\">\n        <strong>${params.name}:</strong> ${params.value[params.componentIndex + 1]}\n      </div>`;\n      }\n    },\n    legend: {\n      data: data[0].slice(1),\n      left: 'left',\n      itemWidth: 10,\n      itemHeight: 10,\n      borderRadius: 0,\n      icon: 'circle',\n      inactiveColor: grays['500'],\n      textStyle: {\n        color: grays['1100']\n      }\n    },\n    xAxis: {\n      type: 'category',\n      axisLabel: {\n        color: grays['400']\n      },\n      axisLine: {\n        lineStyle: {\n          color: grays['300'],\n          type: 'dashed'\n        }\n      },\n      axisTick: false,\n      boundaryGap: true\n    },\n    yAxis: {\n      axisPointer: {\n        type: 'none'\n      },\n      axisTick: 'none',\n      splitLine: {\n        lineStyle: {\n          color: grays['300'],\n          type: 'dashed'\n        }\n      },\n      axisLine: {\n        show: false\n      },\n      axisLabel: {\n        color: grays['400']\n      }\n    },\n    series: data[0].slice(1).map((value, index) => ({\n      type: 'bar',\n      barWidth: '12%',\n      barGap: '30%',\n      label: {\n        normal: {\n          show: false\n        }\n      },\n      z: 10,\n      itemStyle: {\n        normal: {\n          barBorderRadius: [10, 10, 0, 0],\n          color: colors[index]\n        }\n      }\n    })),\n    grid: {\n      right: '0',\n      left: '30px',\n      bottom: '10%',\n      top: '20%'\n    }\n  };\n};\n\nconst TopProducts = ({\n  data,\n  colors,\n  className\n}) => {\n  const {\n    isDark\n  } = useContext(AppContext);\n  return /*#__PURE__*/React.createElement(Card, {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FalconCardHeader, {\n    title: \"Top Products\",\n    titleTag: \"h6\",\n    className: \"py-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"link\",\n    size: \"sm\",\n    tag: Link,\n    className: \"mr-2\",\n    to: \"#!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, \"View Details\"), /*#__PURE__*/React.createElement(CardDropdown, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"h-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ReactEchartsCore, {\n    echarts: echarts,\n    option: getOption(data, colors, isDark),\n    style: {\n      minHeight: '18.75rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  })));\n};\n\nTopProducts.propTypes = {\n  data: PropTypes.array.isRequired,\n  colors: PropTypes.arrayOf(PropTypes.string).isRequired,\n  className: PropTypes.string\n};\nexport default TopProducts;","map":{"version":3,"sources":["/Users/greypro/Documents/Dev/letter/letter-support/src/components/agent/dashboard/TopProducts.js"],"names":["React","useContext","PropTypes","FalconCardHeader","CardDropdown","Button","Card","CardBody","Link","Flex","echarts","ReactEchartsCore","getPosition","getGrays","AppContext","getOption","data","colors","isDark","grays","dataset","source","tooltip","trigger","padding","backgroundColor","white","borderColor","borderWidth","textStyle","color","dark","transitionDuration","position","pos","params","dom","rect","size","formatter","seriesName","name","value","componentIndex","legend","slice","left","itemWidth","itemHeight","borderRadius","icon","inactiveColor","xAxis","type","axisLabel","axisLine","lineStyle","axisTick","boundaryGap","yAxis","axisPointer","splitLine","show","series","map","index","barWidth","barGap","label","normal","z","itemStyle","barBorderRadius","grid","right","bottom","top","TopProducts","className","minHeight","propTypes","array","isRequired","arrayOf","string"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport FalconCardHeader from '../../common/FalconCardHeader';\r\nimport CardDropdown from './CardDropdown';\r\nimport { Button, Card, CardBody } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport Flex from '../../common/Flex';\r\nimport echarts from 'echarts/lib/echarts';\r\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\r\nimport { getPosition, getGrays } from '../../../helpers/utils';\r\nimport AppContext from '../../../context/Context';\r\n\r\nimport 'echarts/lib/chart/bar';\r\nimport 'echarts/lib/component/tooltip';\r\nimport 'echarts/lib/component/legend';\r\n\r\nconst getOption = (data, colors, isDark) => {\r\n  const grays = getGrays(isDark);\r\n  return {\r\n    dataset: { source: data },\r\n    tooltip: {\r\n      trigger: 'item',\r\n      padding: [7, 10],\r\n      backgroundColor: grays.white,\r\n      borderColor: grays['300'],\r\n      borderWidth: 1,\r\n      textStyle: { color: grays.dark },\r\n      transitionDuration: 0,\r\n      position(pos, params, dom, rect, size) {\r\n        return getPosition(pos, params, dom, rect, size);\r\n      },\r\n      formatter: function(params) {\r\n        return `<div class=\"font-weight-semi-bold\">${params.seriesName}</div><div class=\"fs--1 text-600\">\r\n        <strong>${params.name}:</strong> ${params.value[params.componentIndex + 1]}\r\n      </div>`;\r\n      }\r\n    },\r\n    legend: {\r\n      data: data[0].slice(1),\r\n      left: 'left',\r\n      itemWidth: 10,\r\n      itemHeight: 10,\r\n      borderRadius: 0,\r\n      icon: 'circle',\r\n      inactiveColor: grays['500'],\r\n      textStyle: { color: grays['1100'] }\r\n    },\r\n    xAxis: {\r\n      type: 'category',\r\n      axisLabel: { color: grays['400'] },\r\n      axisLine: {\r\n        lineStyle: {\r\n          color: grays['300'],\r\n          type: 'dashed'\r\n        }\r\n      },\r\n      axisTick: false,\r\n      boundaryGap: true\r\n    },\r\n    yAxis: {\r\n      axisPointer: { type: 'none' },\r\n      axisTick: 'none',\r\n      splitLine: {\r\n        lineStyle: {\r\n          color: grays['300'],\r\n          type: 'dashed'\r\n        }\r\n      },\r\n      axisLine: { show: false },\r\n      axisLabel: { color: grays['400'] }\r\n    },\r\n    series: data[0].slice(1).map((value, index) => ({\r\n      type: 'bar',\r\n      barWidth: '12%',\r\n      barGap: '30%',\r\n      label: { normal: { show: false } },\r\n      z: 10,\r\n      itemStyle: {\r\n        normal: {\r\n          barBorderRadius: [10, 10, 0, 0],\r\n          color: colors[index]\r\n        }\r\n      }\r\n    })),\r\n    grid: { right: '0', left: '30px', bottom: '10%', top: '20%' }\r\n  };\r\n};\r\n\r\nconst TopProducts = ({ data, colors, className }) => {\r\n  const { isDark } = useContext(AppContext);\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <FalconCardHeader title=\"Top Products\" titleTag=\"h6\" className=\"py-2\">\r\n        <Flex>\r\n          <Button color=\"link\" size=\"sm\" tag={Link} className=\"mr-2\" to=\"#!\">\r\n            View Details\r\n          </Button>\r\n          <CardDropdown />\r\n        </Flex>\r\n      </FalconCardHeader>\r\n      <CardBody className=\"h-100\">\r\n        <ReactEchartsCore\r\n          echarts={echarts}\r\n          option={getOption(data, colors, isDark)}\r\n          style={{ minHeight: '18.75rem' }}\r\n        />\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nTopProducts.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  colors: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default TopProducts;\r\n"]},"metadata":{},"sourceType":"module"}