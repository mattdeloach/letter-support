{"ast":null,"code":"var _jsxFileName = \"/Users/greypro/Documents/Dev/letter/letter-support/src/components/navbar/NavbarDropdownComponents.js\";\nimport PropTypes from 'prop-types';\nimport React, { Fragment, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Badge, Card, CardBody, Col, DropdownItem, DropdownMenu, DropdownToggle, Row, Dropdown } from 'reactstrap';\nimport { breakpoints, isIterableArray, routesSlicer } from '../../helpers/utils';\nimport { topNavbarBreakpoint } from '../../config';\n\nconst NavbarDropdownComponents = ({\n  title,\n  items,\n  right,\n  handleSetNavbarCollapsed\n}) => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const toggle = () => setDropdownOpen(prevState => !prevState);\n\n  return /*#__PURE__*/React.createElement(Dropdown, {\n    nav: true,\n    inNavbar: true,\n    isOpen: dropdownOpen,\n    toggle: toggle,\n    onMouseOver: () => {\n      let windowWidth = window.innerWidth;\n\n      if (windowWidth >= breakpoints[topNavbarBreakpoint]) {\n        setDropdownOpen(true);\n      }\n    },\n    onMouseLeave: () => {\n      let windowWidth = window.innerWidth;\n\n      if (windowWidth >= breakpoints[topNavbarBreakpoint]) {\n        setDropdownOpen(false);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DropdownToggle, {\n    nav: true,\n    caret: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, title), /*#__PURE__*/React.createElement(DropdownMenu, {\n    right: right,\n    className: \"dropdown-menu-card mt-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, isIterableArray(items) && /*#__PURE__*/React.createElement(Card, {\n    className: \"navbar-card-components shadow-none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    className: \"max-h-dropdown scrollbar px-0 py-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"nav flex-column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 15\n    }\n  }, items.map((groupItem, index) => {\n    const NavItemGroup = routesSlicer({\n      routes: groupItem.children,\n      columns: 4\n    });\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }\n    }, index !== 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nav-link  py-1 text-900 font-weight-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 25\n      }\n    }, items[index].name), /*#__PURE__*/React.createElement(Row, {\n      className: index + 1 === items.length ? 'mb-0' : 'mb-3',\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 23\n      }\n    }, NavItemGroup.map((navItems, i) => {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        key: `${index}-${i}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        xs: 6,\n        xl: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 31\n        }\n      }, navItems.map((navItem, j) => {\n        return /*#__PURE__*/React.createElement(DropdownItem, {\n          tag: Link,\n          to: navItem.to,\n          key: `${index}-${i}-${j}`,\n          onClick: handleSetNavbarCollapsed,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 37\n          }\n        }, navItem.name, navItem.badge && /*#__PURE__*/React.createElement(Badge, {\n          color: navItem.badge.color || 'soft-success',\n          pill: true,\n          className: \"ml-2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 41\n          }\n        }, navItem.badge.text));\n      })));\n    })));\n  }))))));\n};\n\nNavbarDropdownComponents.propTypes = {\n  title: PropTypes.string.isRequired,\n  handleSetNavbarCollapsed: PropTypes.func.isRequired,\n  items: PropTypes.array,\n  right: PropTypes.bool\n};\nNavbarDropdownComponents.defaultProps = {\n  items: [],\n  right: false\n};\nexport default NavbarDropdownComponents;","map":{"version":3,"sources":["/Users/greypro/Documents/Dev/letter/letter-support/src/components/navbar/NavbarDropdownComponents.js"],"names":["PropTypes","React","Fragment","useState","Link","Badge","Card","CardBody","Col","DropdownItem","DropdownMenu","DropdownToggle","Row","Dropdown","breakpoints","isIterableArray","routesSlicer","topNavbarBreakpoint","NavbarDropdownComponents","title","items","right","handleSetNavbarCollapsed","dropdownOpen","setDropdownOpen","toggle","prevState","windowWidth","window","innerWidth","map","groupItem","index","NavItemGroup","routes","children","columns","name","length","navItems","i","navItem","j","to","badge","color","text","propTypes","string","isRequired","func","array","bool","defaultProps"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, { Fragment, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Badge, Card, CardBody, Col, DropdownItem, DropdownMenu, DropdownToggle, Row, Dropdown } from 'reactstrap';\r\nimport { breakpoints, isIterableArray, routesSlicer } from '../../helpers/utils';\r\nimport { topNavbarBreakpoint } from '../../config';\r\n\r\nconst NavbarDropdownComponents = ({ title, items, right, handleSetNavbarCollapsed }) => {\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const toggle = () => setDropdownOpen(prevState => !prevState);\r\n\r\n  return (\r\n    <Dropdown\r\n      nav\r\n      inNavbar\r\n      isOpen={dropdownOpen}\r\n      toggle={toggle}\r\n      onMouseOver={() => {\r\n        let windowWidth = window.innerWidth;\r\n        if (windowWidth >= breakpoints[topNavbarBreakpoint]) {\r\n          setDropdownOpen(true);\r\n        }\r\n      }}\r\n      onMouseLeave={() => {\r\n        let windowWidth = window.innerWidth;\r\n        if (windowWidth >= breakpoints[topNavbarBreakpoint]) {\r\n          setDropdownOpen(false);\r\n        }\r\n      }}\r\n    >\r\n      <DropdownToggle nav caret>\r\n        {title}\r\n      </DropdownToggle>\r\n      <DropdownMenu right={right} className=\"dropdown-menu-card mt-0\">\r\n        {isIterableArray(items) && (\r\n          <Card className=\"navbar-card-components shadow-none\">\r\n            <CardBody className=\"max-h-dropdown scrollbar px-0 py-2\">\r\n              <div className=\"nav flex-column\">\r\n                {items.map((groupItem, index) => {\r\n                  const NavItemGroup = routesSlicer({\r\n                    routes: groupItem.children,\r\n                    columns: 4\r\n                  });\r\n\r\n                  return (\r\n                    <Fragment key={index}>\r\n                      {index !== 0 && (\r\n                        <div className=\"nav-link  py-1 text-900 font-weight-bold\">{items[index].name}</div>\r\n                      )}\r\n                      <Row className={index + 1 === items.length ? 'mb-0' : 'mb-3'} noGutters>\r\n                        {NavItemGroup.map((navItems, i) => {\r\n                          return (\r\n                            <Fragment key={`${index}-${i}`}>\r\n                              <Col xs={6} xl={3}>\r\n                                {navItems.map((navItem, j) => {\r\n                                  return (\r\n                                    <DropdownItem\r\n                                      tag={Link}\r\n                                      to={navItem.to}\r\n                                      key={`${index}-${i}-${j}`}\r\n                                      onClick={handleSetNavbarCollapsed}\r\n                                    >\r\n                                      {navItem.name}\r\n                                      {navItem.badge && (\r\n                                        <Badge color={navItem.badge.color || 'soft-success'} pill className=\"ml-2\">\r\n                                          {navItem.badge.text}\r\n                                        </Badge>\r\n                                      )}\r\n                                    </DropdownItem>\r\n                                  );\r\n                                })}\r\n                              </Col>\r\n                            </Fragment>\r\n                          );\r\n                        })}\r\n                      </Row>\r\n                    </Fragment>\r\n                  );\r\n                })}\r\n              </div>\r\n            </CardBody>\r\n          </Card>\r\n        )}\r\n      </DropdownMenu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nNavbarDropdownComponents.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  handleSetNavbarCollapsed: PropTypes.func.isRequired,\r\n  items: PropTypes.array,\r\n  right: PropTypes.bool\r\n};\r\n\r\nNavbarDropdownComponents.defaultProps = {\r\n  items: [],\r\n  right: false\r\n};\r\n\r\nexport default NavbarDropdownComponents;\r\n"]},"metadata":{},"sourceType":"module"}