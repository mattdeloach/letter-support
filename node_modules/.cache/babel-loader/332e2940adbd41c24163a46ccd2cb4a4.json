{"ast":null,"code":"var _jsxFileName = \"/Users/greypro/Documents/Dev/letter/letter-support/src/components/bootstrap-components/Modals.js\";\nimport React, { Fragment } from 'react';\nimport { Button, Card, CardBody } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nimport PageHeader from '../common/PageHeader';\nconst basicModal = `function basicModalExample () {\n  const [collapseOne, collapseOneOpen] = useState(false);\n  \n  return (\n    <Fragment>\n      <Button color=\"primary\" onClick={() => collapseOneOpen(!collapseOne)}>\n        Launch demo modal\n      </Button>\n      <Modal isOpen={collapseOne} toggle={() => collapseOneOpen(!collapseOne)}>\n        <ModalHeader>Modal title</ModalHeader>\n        <ModalBody>\n         Woohoo, you're reading this text in a modal!\n        </ModalBody>\n        <ModalFooter>\n          <Button onClick={() => collapseOneOpen(!collapseOne)}>\n            Close\n          </Button>\n          <Button color=\"primary\">Save changes</Button>\n        </ModalFooter>\n      </Modal>\n    </Fragment>\n  );\n}`;\nconst properties = `Modal.propTypes = {\n  // boolean to control the state of the popover\n  isOpen:  PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  // if modal should be centered vertically in viewport\n  centered: PropTypes.bool,\n  // corresponds to bootstrap's modal sizes, ie. 'lg' or 'sm'\n  size: PropTypes.string,\n  // callback for toggling isOpen in the controlling component\n  toggle:  PropTypes.func,\n  role: PropTypes.string, // defaults to \"dialog\"\n  // used to reference the ID of the title element in the modal\n  labelledBy: PropTypes.string,\n  keyboard: PropTypes.bool,\n  // control backdrop, see http://v4-alpha.getbootstrap.com/components/modal/#options\n  backdrop: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['static'])\n  ]),\n  // if body of modal should be scrollable when content is long\n  scrollable: PropTypes.bool,\n  // allows for a node/component to exist next to the modal (outside of it). Useful for external close buttons\n  // external: PropTypes.node,\n  // called on componentDidMount\n  onEnter: PropTypes.func,\n  // called on componentWillUnmount\n  onExit: PropTypes.func,\n  // called when done transitioning in\n  onOpened: PropTypes.func,\n  // called when done transitioning out\n  onClosed: PropTypes.func,\n  className: PropTypes.string,\n  wrapClassName: PropTypes.string,\n  modalClassName: PropTypes.string,\n  backdropClassName: PropTypes.string,\n  contentClassName: PropTypes.string,\n  // boolean to control whether the fade transition occurs (default: true)\n  fade: PropTypes.bool,\n  cssModule: PropTypes.object,\n  // zIndex defaults to 1000.\n  zIndex: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n  // backdropTransition - controls backdrop transition\n  // timeout is 150ms by default to match bootstrap\n  // see Fade for more details\n  backdropTransition: PropTypes.shape(Fade.propTypes),\n  // modalTransition - controls modal transition\n  // timeout is 300ms by default to match bootstrap\n  // see Fade for more details\n  modalTransition: PropTypes.shape(Fade.propTypes),\n  innerRef: PropTypes.object,\n  // if modal should be destructed/removed from DOM after closing\n  unmountOnClose: PropTypes.bool // defaults to true\n}`;\n\nconst Modals = () => /*#__PURE__*/React.createElement(Fragment, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(PageHeader, {\n  title: \"Modals\",\n  description: \"Use Bootstrap\\u2019s JavaScript modal plugin to add dialogs to your site for lightboxes, user notifications, or completely custom content.\",\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Button, {\n  tag: \"a\",\n  href: \"https://reactstrap.github.io/components/modals\",\n  target: \"_blank\",\n  color: \"link\",\n  size: \"sm\",\n  className: \"pl-0\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 7\n  }\n}, \"Modals on reactstrap\", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n  icon: \"chevron-right\",\n  className: \"ml-1 fs--2\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Modals\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: basicModal,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Properties\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: properties,\n  hidePreview: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }\n}))));\n\nexport default Modals;","map":{"version":3,"sources":["/Users/greypro/Documents/Dev/letter/letter-support/src/components/bootstrap-components/Modals.js"],"names":["React","Fragment","Button","Card","CardBody","FontAwesomeIcon","FalconCardHeader","FalconEditor","PageHeader","basicModal","properties","Modals"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,QAAuC,YAAvC;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AAEA,MAAMC,UAAU,GAAI;;;;;;;;;;;;;;;;;;;;;;EAApB;AAwBA,MAAMC,UAAU,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAApB;;AAyDA,MAAMC,MAAM,GAAG,mBACb,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,UAAD;AACE,EAAA,KAAK,EAAC,QADR;AAEE,EAAA,WAAW,EAAC,4IAFd;AAGE,EAAA,SAAS,EAAC,MAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAKE,oBAAC,MAAD;AACE,EAAA,GAAG,EAAC,GADN;AAEE,EAAA,IAAI,EAAC,gDAFP;AAGE,EAAA,MAAM,EAAC,QAHT;AAIE,EAAA,KAAK,EAAC,MAJR;AAKE,EAAA,IAAI,EAAC,IALP;AAME,EAAA,SAAS,EAAC,MANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCASE,oBAAC,eAAD;AAAiB,EAAA,IAAI,EAAC,eAAtB;AAAsC,EAAA,SAAS,EAAC,YAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EATF,CALF,CADF,eAkBE,oBAAC,IAAD;AAAM,EAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,gBAAD;AAAkB,EAAA,KAAK,EAAC,QAAxB;AAAiC,EAAA,KAAK,EAAE,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,eAEE,oBAAC,QAAD;AAAU,EAAA,SAAS,EAAC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,YAAD;AAAc,EAAA,IAAI,EAAEF,UAApB;AAAgC,EAAA,QAAQ,EAAC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CAFF,CAlBF,eAwBE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,gBAAD;AAAkB,EAAA,KAAK,EAAC,YAAxB;AAAqC,EAAA,KAAK,EAAE,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,eAEE,oBAAC,QAAD;AAAU,EAAA,SAAS,EAAC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,YAAD;AAAc,EAAA,IAAI,EAAEC,UAApB;AAAgC,EAAA,WAAW,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CAFF,CAxBF,CADF;;AAkCA,eAAeC,MAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport { Button, Card, CardBody } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nimport PageHeader from '../common/PageHeader';\n\nconst basicModal = `function basicModalExample () {\n  const [collapseOne, collapseOneOpen] = useState(false);\n  \n  return (\n    <Fragment>\n      <Button color=\"primary\" onClick={() => collapseOneOpen(!collapseOne)}>\n        Launch demo modal\n      </Button>\n      <Modal isOpen={collapseOne} toggle={() => collapseOneOpen(!collapseOne)}>\n        <ModalHeader>Modal title</ModalHeader>\n        <ModalBody>\n         Woohoo, you're reading this text in a modal!\n        </ModalBody>\n        <ModalFooter>\n          <Button onClick={() => collapseOneOpen(!collapseOne)}>\n            Close\n          </Button>\n          <Button color=\"primary\">Save changes</Button>\n        </ModalFooter>\n      </Modal>\n    </Fragment>\n  );\n}`;\n\nconst properties = `Modal.propTypes = {\n  // boolean to control the state of the popover\n  isOpen:  PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  // if modal should be centered vertically in viewport\n  centered: PropTypes.bool,\n  // corresponds to bootstrap's modal sizes, ie. 'lg' or 'sm'\n  size: PropTypes.string,\n  // callback for toggling isOpen in the controlling component\n  toggle:  PropTypes.func,\n  role: PropTypes.string, // defaults to \"dialog\"\n  // used to reference the ID of the title element in the modal\n  labelledBy: PropTypes.string,\n  keyboard: PropTypes.bool,\n  // control backdrop, see http://v4-alpha.getbootstrap.com/components/modal/#options\n  backdrop: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['static'])\n  ]),\n  // if body of modal should be scrollable when content is long\n  scrollable: PropTypes.bool,\n  // allows for a node/component to exist next to the modal (outside of it). Useful for external close buttons\n  // external: PropTypes.node,\n  // called on componentDidMount\n  onEnter: PropTypes.func,\n  // called on componentWillUnmount\n  onExit: PropTypes.func,\n  // called when done transitioning in\n  onOpened: PropTypes.func,\n  // called when done transitioning out\n  onClosed: PropTypes.func,\n  className: PropTypes.string,\n  wrapClassName: PropTypes.string,\n  modalClassName: PropTypes.string,\n  backdropClassName: PropTypes.string,\n  contentClassName: PropTypes.string,\n  // boolean to control whether the fade transition occurs (default: true)\n  fade: PropTypes.bool,\n  cssModule: PropTypes.object,\n  // zIndex defaults to 1000.\n  zIndex: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n  // backdropTransition - controls backdrop transition\n  // timeout is 150ms by default to match bootstrap\n  // see Fade for more details\n  backdropTransition: PropTypes.shape(Fade.propTypes),\n  // modalTransition - controls modal transition\n  // timeout is 300ms by default to match bootstrap\n  // see Fade for more details\n  modalTransition: PropTypes.shape(Fade.propTypes),\n  innerRef: PropTypes.object,\n  // if modal should be destructed/removed from DOM after closing\n  unmountOnClose: PropTypes.bool // defaults to true\n}`;\n\nconst Modals = () => (\n  <Fragment>\n    <PageHeader\n      title=\"Modals\"\n      description=\"Use Bootstrap’s JavaScript modal plugin to add dialogs to your site for lightboxes, user notifications, or completely custom content.\"\n      className=\"mb-3\"\n    >\n      <Button\n        tag=\"a\"\n        href=\"https://reactstrap.github.io/components/modals\"\n        target=\"_blank\"\n        color=\"link\"\n        size=\"sm\"\n        className=\"pl-0\"\n      >\n        Modals on reactstrap\n        <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n      </Button>\n    </PageHeader>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Modals\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={basicModal} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card>\n      <FalconCardHeader title=\"Properties\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={properties} hidePreview />\n      </CardBody>\n    </Card>\n  </Fragment>\n);\n\nexport default Modals;\n"]},"metadata":{},"sourceType":"module"}