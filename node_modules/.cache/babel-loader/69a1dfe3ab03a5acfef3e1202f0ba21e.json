{"ast":null,"code":"var _jsxFileName = \"/Users/greypro/Documents/Dev/letter/letter-support/src/components/experience/Experience.js\";\nimport React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { isIterableArray } from '../../helpers/utils';\nimport { Card, CardBody, Collapse } from 'reactstrap';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport ExperienceSummary from './ExperienceSummary';\nimport classNames from 'classnames';\nimport Loader from '../common/Loader';\nimport ExperienceForm from './ExperienceForm';\nimport Flex from '../common/Flex';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport useFakeFetch from '../../hooks/useFakeFetch';\n\nconst Experience = ({\n  experiences: rawExperiences,\n  isEditable,\n  isOpen,\n  ...rest\n}) => {\n  // Data\n  const {\n    loading: loadingExperiences,\n    data: experiences,\n    setData: setExperiences\n  } = useFakeFetch(rawExperiences);\n  const [collapse, setCollapse] = useState(isOpen);\n  return /*#__PURE__*/React.createElement(Card, Object.assign({}, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(FalconCardHeader, {\n    title: \"Experience\",\n    light: !isEditable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardBody, {\n    className: classNames('fs--1', {\n      'bg-light': isEditable\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, isEditable && /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Flex, {\n    align: \"center\",\n    className: \"mb-4 text-primary cursor-pointer fs-0\",\n    id: \"togglerAddExperience\",\n    onClick: () => {\n      setCollapse(!collapse);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"circle-dashed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"plus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ml-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 15\n    }\n  }, \"Add new experience\")), /*#__PURE__*/React.createElement(Collapse, {\n    toggler: \"#togglerAddExperience\",\n    isOpen: collapse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ExperienceForm, {\n    experiences: experiences,\n    setExperiences: setExperiences,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"hr\", {\n    className: \"border-dashed border-bottom-0 my-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 15\n    }\n  }))), loadingExperiences ? /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }) : isIterableArray(experiences) && experiences.map((experience, index) => /*#__PURE__*/React.createElement(ExperienceSummary, Object.assign({}, experience, {\n    isEditable: isEditable,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  })))));\n};\n\nExperience.propTypes = {\n  experiences: PropTypes.array,\n  isEditable: PropTypes.bool,\n  isOpen: PropTypes.bool\n};\nExperience.defaultProps = {\n  isEditable: false,\n  isOpen: false\n};\nexport default Experience;","map":{"version":3,"sources":["/Users/greypro/Documents/Dev/letter/letter-support/src/components/experience/Experience.js"],"names":["React","Fragment","useState","PropTypes","isIterableArray","Card","CardBody","Collapse","FalconCardHeader","ExperienceSummary","classNames","Loader","ExperienceForm","Flex","FontAwesomeIcon","useFakeFetch","Experience","experiences","rawExperiences","isEditable","isOpen","rest","loading","loadingExperiences","data","setData","setExperiences","collapse","setCollapse","map","experience","index","propTypes","array","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { isIterableArray } from '../../helpers/utils';\r\nimport { Card, CardBody, Collapse } from 'reactstrap';\r\nimport FalconCardHeader from '../common/FalconCardHeader';\r\nimport ExperienceSummary from './ExperienceSummary';\r\nimport classNames from 'classnames';\r\nimport Loader from '../common/Loader';\r\nimport ExperienceForm from './ExperienceForm';\r\nimport Flex from '../common/Flex';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport useFakeFetch from '../../hooks/useFakeFetch';\r\n\r\nconst Experience = ({ experiences: rawExperiences, isEditable, isOpen, ...rest }) => {\r\n  // Data\r\n  const { loading: loadingExperiences, data: experiences, setData: setExperiences } = useFakeFetch(rawExperiences);\r\n\r\n  const [collapse, setCollapse] = useState(isOpen);\r\n\r\n  return (\r\n    <Card {...rest}>\r\n      <FalconCardHeader title=\"Experience\" light={!isEditable} />\r\n      <CardBody className={classNames('fs--1', { 'bg-light': isEditable })}>\r\n        {isEditable && (\r\n          <Fragment>\r\n            <Flex\r\n              align=\"center\"\r\n              className=\"mb-4 text-primary cursor-pointer fs-0\"\r\n              id=\"togglerAddExperience\"\r\n              onClick={() => {\r\n                setCollapse(!collapse);\r\n              }}\r\n            >\r\n              <span className=\"circle-dashed\">\r\n                <FontAwesomeIcon icon=\"plus\" />\r\n              </span>\r\n              <span className=\"ml-3\">Add new experience</span>\r\n            </Flex>\r\n            <Collapse toggler=\"#togglerAddExperience\" isOpen={collapse}>\r\n              <ExperienceForm experiences={experiences} setExperiences={setExperiences} />\r\n              <hr className=\"border-dashed border-bottom-0 my-4\" />\r\n            </Collapse>\r\n          </Fragment>\r\n        )}\r\n        {loadingExperiences ? (\r\n          <Loader />\r\n        ) : (\r\n          isIterableArray(experiences) &&\r\n          experiences.map((experience, index) => (\r\n            <ExperienceSummary {...experience} isEditable={isEditable} key={index} />\r\n          ))\r\n        )}\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nExperience.propTypes = {\r\n  experiences: PropTypes.array,\r\n  isEditable: PropTypes.bool,\r\n  isOpen: PropTypes.bool\r\n};\r\n\r\nExperience.defaultProps = { isEditable: false, isOpen: false };\r\n\r\nexport default Experience;\r\n"]},"metadata":{},"sourceType":"module"}