{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/components/kanban/KanbanProvider.js\";\nimport React, { useReducer, useState } from 'react';\nimport { KanbanContext } from '../../context/Context';\nimport { arrayReducer } from '../../reducers/arrayReducer';\nimport rawKanbanItems, { rawItems } from '../../data/kanban/kanbanItems';\n\nconst KanbanProvider = ({\n  children\n}) => {\n  const [kanbanColumns, kanbanColumnsDispatch] = useReducer(arrayReducer, rawKanbanItems);\n  const [kanbanTaskCards, kanbanTaskCardsDispatch] = useReducer(arrayReducer, rawItems);\n  const [modal, setModal] = useState(false);\n  const [modalContent, setModalContent] = useState({});\n\n  const getItemStyle = isDragging => ({\n    // change background colour if dragging\n    cursor: isDragging ? 'grabbing' : 'pointer',\n    transform: isDragging ? 'rotate(-3deg)' : '',\n    transition: 'all 0.3s ease-out' // styles we need to apply on draggables\n\n  });\n\n  const UpdateColumnData = (column, items) => {\n    kanbanColumnsDispatch({\n      type: 'EDIT',\n      payload: { ...column,\n        items\n      },\n      id: column.id\n    });\n  };\n\n  const value = {\n    kanbanTaskCards,\n    kanbanTaskCardsDispatch,\n    kanbanColumns,\n    kanbanColumnsDispatch,\n    getItemStyle,\n    UpdateColumnData,\n    modalContent,\n    setModalContent,\n    modal,\n    setModal\n  };\n  return /*#__PURE__*/React.createElement(KanbanContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 10\n    }\n  }, children);\n};\n\nexport default KanbanProvider;","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/components/kanban/KanbanProvider.js"],"names":["React","useReducer","useState","KanbanContext","arrayReducer","rawKanbanItems","rawItems","KanbanProvider","children","kanbanColumns","kanbanColumnsDispatch","kanbanTaskCards","kanbanTaskCardsDispatch","modal","setModal","modalContent","setModalContent","getItemStyle","isDragging","cursor","transform","transition","UpdateColumnData","column","items","type","payload","id","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,YAAT,QAA6B,6BAA7B;AAEA,OAAOC,cAAP,IAAyBC,QAAzB,QAAyC,+BAAzC;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACvC,QAAM,CAACC,aAAD,EAAgBC,qBAAhB,IAAyCT,UAAU,CAACG,YAAD,EAAeC,cAAf,CAAzD;AACA,QAAM,CAACM,eAAD,EAAkBC,uBAAlB,IAA6CX,UAAU,CAACG,YAAD,EAAeE,QAAf,CAA7D;AAEA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,KAAD,CAAlC;AAEA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMe,YAAY,GAAGC,UAAU,KAAK;AAClC;AACAC,IAAAA,MAAM,EAAED,UAAU,GAAG,UAAH,GAAgB,SAFA;AAGlCE,IAAAA,SAAS,EAAEF,UAAU,GAAG,eAAH,GAAqB,EAHR;AAIlCG,IAAAA,UAAU,EAAE,mBAJsB,CAMlC;;AANkC,GAAL,CAA/B;;AASA,QAAMC,gBAAgB,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC1Cd,IAAAA,qBAAqB,CAAC;AACpBe,MAAAA,IAAI,EAAE,MADc;AAEpBC,MAAAA,OAAO,EAAE,EACP,GAAGH,MADI;AAEPC,QAAAA;AAFO,OAFW;AAMpBG,MAAAA,EAAE,EAAEJ,MAAM,CAACI;AANS,KAAD,CAArB;AAQD,GATD;;AAWA,QAAMC,KAAK,GAAG;AACZjB,IAAAA,eADY;AAEZC,IAAAA,uBAFY;AAGZH,IAAAA,aAHY;AAIZC,IAAAA,qBAJY;AAKZO,IAAAA,YALY;AAMZK,IAAAA,gBANY;AAOZP,IAAAA,YAPY;AAQZC,IAAAA,eARY;AASZH,IAAAA,KATY;AAUZC,IAAAA;AAVY,GAAd;AAYA,sBAAO,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEc,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuCpB,QAAvC,CAAP;AACD,CAzCD;;AA2CA,eAAeD,cAAf","sourcesContent":["import React, { useReducer, useState } from 'react';\r\nimport { KanbanContext } from '../../context/Context';\r\nimport { arrayReducer } from '../../reducers/arrayReducer';\r\n\r\nimport rawKanbanItems, { rawItems } from '../../data/kanban/kanbanItems';\r\n\r\nconst KanbanProvider = ({ children }) => {\r\n  const [kanbanColumns, kanbanColumnsDispatch] = useReducer(arrayReducer, rawKanbanItems);\r\n  const [kanbanTaskCards, kanbanTaskCardsDispatch] = useReducer(arrayReducer, rawItems);\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const [modalContent, setModalContent] = useState({});\r\n\r\n  const getItemStyle = isDragging => ({\r\n    // change background colour if dragging\r\n    cursor: isDragging ? 'grabbing' : 'pointer',\r\n    transform: isDragging ? 'rotate(-3deg)' : '',\r\n    transition: 'all 0.3s ease-out'\r\n\r\n    // styles we need to apply on draggables\r\n  });\r\n\r\n  const UpdateColumnData = (column, items) => {\r\n    kanbanColumnsDispatch({\r\n      type: 'EDIT',\r\n      payload: {\r\n        ...column,\r\n        items\r\n      },\r\n      id: column.id\r\n    });\r\n  };\r\n\r\n  const value = {\r\n    kanbanTaskCards,\r\n    kanbanTaskCardsDispatch,\r\n    kanbanColumns,\r\n    kanbanColumnsDispatch,\r\n    getItemStyle,\r\n    UpdateColumnData,\r\n    modalContent,\r\n    setModalContent,\r\n    modal,\r\n    setModal\r\n  };\r\n  return <KanbanContext.Provider value={value}>{children}</KanbanContext.Provider>;\r\n};\r\n\r\nexport default KanbanProvider;\r\n"]},"metadata":{},"sourceType":"module"}