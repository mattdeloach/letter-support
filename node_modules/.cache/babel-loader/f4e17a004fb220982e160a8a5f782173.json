{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/components/auth/wizard/WizardInput.js\";\nimport React, { useContext, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport WizardError from './WizardError';\nimport { AuthWizardContext } from '../../../context/Context';\nimport Datetime from 'react-datetime';\nimport classNames from 'classnames';\n\nconst WizardInput = ({\n  label,\n  id,\n  name,\n  errors,\n  tag: Tag = Input,\n  type = 'text',\n  options = [],\n  placeholder,\n  className,\n  customType,\n  ...rest\n}) => {\n  var _errors$name4, _errors$name5;\n\n  const {\n    user,\n    handleInputChange\n  } = useContext(AuthWizardContext);\n\n  if (customType === 'datetime') {\n    return /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }\n    }, !!label && /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }\n    }, label), /*#__PURE__*/React.createElement(Datetime, Object.assign({\n      id: id,\n      dateFormat: \"DD/MM/YYYY\",\n      timeFormat: false,\n      defaultValue: user[name],\n      onChange: setStartDate => handleInputChange({\n        name: name,\n        value: setStartDate\n      }),\n      inputProps: {\n        name,\n        placeholder\n      }\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    })));\n  }\n\n  if (type === 'checkbox' || type === 'switch' || type === 'radio') {\n    var _errors$name;\n\n    return /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Tag, Object.assign({\n      name: name,\n      id: id,\n      type: type,\n      className: className,\n      label: /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }\n      }, label, /*#__PURE__*/React.createElement(WizardError, {\n        error: (_errors$name = errors[name]) === null || _errors$name === void 0 ? void 0 : _errors$name.message,\n        className: \"fs--1 font-weight-normal d-block\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }\n      }))\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    })));\n  }\n\n  if (type === 'select') {\n    var _errors$name2, _errors$name3;\n\n    return /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, !!label && /*#__PURE__*/React.createElement(Label, {\n      for: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }, label), /*#__PURE__*/React.createElement(Tag, Object.assign({\n      name: name,\n      id: id,\n      defaultValue: user[name],\n      type: type,\n      label: label,\n      className: classNames(className, {\n        'border-danger': (_errors$name2 = errors[name]) === null || _errors$name2 === void 0 ? void 0 : _errors$name2.message\n      })\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    }, placeholder), options.map((option, index) => /*#__PURE__*/React.createElement(\"option\", {\n      value: option,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, option))), /*#__PURE__*/React.createElement(WizardError, {\n      error: (_errors$name3 = errors[name]) === null || _errors$name3 === void 0 ? void 0 : _errors$name3.message,\n      className: \"mt-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, !!label && /*#__PURE__*/React.createElement(Label, {\n    for: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 19\n    }\n  }, label), /*#__PURE__*/React.createElement(Tag, Object.assign({\n    name: name,\n    id: id,\n    defaultValue: user[name],\n    type: type,\n    placeholder: placeholder,\n    className: classNames(className, {\n      'border-danger': (_errors$name4 = errors[name]) === null || _errors$name4 === void 0 ? void 0 : _errors$name4.message\n    })\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(WizardError, {\n    error: (_errors$name5 = errors[name]) === null || _errors$name5 === void 0 ? void 0 : _errors$name5.message,\n    className: \"mt-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }));\n};\n\nWizardInput.propTypes = {\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n};\nWizardInput.defaultProps = {\n  required: false\n};\nexport default WizardInput;","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/components/auth/wizard/WizardInput.js"],"names":["React","useContext","Fragment","PropTypes","FormGroup","Input","Label","WizardError","AuthWizardContext","Datetime","classNames","WizardInput","label","id","name","errors","tag","Tag","type","options","placeholder","className","customType","rest","user","handleInputChange","setStartDate","value","message","map","option","index","propTypes","oneOfType","string","node","defaultProps","required"],"mappings":"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","sourcesContent":["import React, { useContext, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport WizardError from './WizardError';\nimport { AuthWizardContext } from '../../../context/Context';\nimport Datetime from 'react-datetime';\nimport classNames from 'classnames';\n\nconst WizardInput = ({\n  label,\n  id,\n  name,\n  errors,\n  tag: Tag = Input,\n  type = 'text',\n  options = [],\n  placeholder,\n  className,\n  customType,\n  ...rest\n}) => {\n  const { user, handleInputChange } = useContext(AuthWizardContext);\n\n  if (customType === 'datetime') {\n    return (\n      <FormGroup>\n        {!!label && <Label>{label}</Label>}\n        <Datetime\n          id={id}\n          dateFormat=\"DD/MM/YYYY\"\n          timeFormat={false}\n          defaultValue={user[name]}\n          onChange={setStartDate => handleInputChange({ name: name, value: setStartDate })}\n          inputProps={{\n            name,\n            placeholder\n          }}\n          {...rest}\n        />\n      </FormGroup>\n    );\n  }\n\n  if (type === 'checkbox' || type === 'switch' || type === 'radio') {\n    return (\n      <FormGroup>\n        <Tag\n          name={name}\n          id={id}\n          type={type}\n          className={className}\n          label={\n            <Fragment>\n              {label}\n              <WizardError error={errors[name]?.message} className=\"fs--1 font-weight-normal d-block\" />\n            </Fragment>\n          }\n          {...rest}\n        />\n      </FormGroup>\n    );\n  }\n  if (type === 'select') {\n    return (\n      <FormGroup>\n        {!!label && <Label for={id}>{label}</Label>}\n        <Tag\n          name={name}\n          id={id}\n          defaultValue={user[name]}\n          type={type}\n          label={label}\n          className={classNames(className, { 'border-danger': errors[name]?.message })}\n          {...rest}\n        >\n          <option value=\"\">{placeholder}</option>\n          {options.map((option, index) => (\n            <option value={option} key={index}>\n              {option}\n            </option>\n          ))}\n        </Tag>\n        <WizardError error={errors[name]?.message} className=\"mt-1\" />\n      </FormGroup>\n    );\n  }\n  return (\n    <FormGroup>\n      {!!label && <Label for={id}>{label}</Label>}\n      <Tag\n        name={name}\n        id={id}\n        defaultValue={user[name]}\n        type={type}\n        placeholder={placeholder}\n        className={classNames(className, { 'border-danger': errors[name]?.message })}\n        {...rest}\n      />\n      <WizardError error={errors[name]?.message} className=\"mt-1\" />\n    </FormGroup>\n  );\n};\n\nWizardInput.propTypes = { label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]) };\n\nWizardInput.defaultProps = { required: false };\n\nexport default WizardInput;\n"]},"metadata":{},"sourceType":"module"}