{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/components/bootstrap-components/Buttons.js\";\nimport React, { Fragment } from 'react';\nimport { Button, Card, CardHeader, CardBody } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nimport ButtonIcon from '../common/ButtonIcon';\nconst buttonFalconCode = `['primary', 'success', 'info','danger', 'warning'].map((color, index) => (\n  <Button color={'falcon-'+color} key={index} className=\"mr-2\" >\n    {color}\n  </Button>\n))`;\nconst buttonCode = `['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'].map((color, index) => (\n  <Button color={color} size=\"sm\" key={index} className=\"mr-2\">\n    {color}\n  </Button>\n))`;\nconst buttonOutlineCode = `['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'].map((color, index) => (\n  <Button outline color={color} key={index} className=\"mr-2\">\n    {color}\n  </Button>\n))`;\nconst buttonSizeCode = `<Fragment>\n  <Button color=\"secondary\" size=\"sm\" className=\"mr-2\">Small</Button>\n  <Button color=\"secondary\" className=\"mr-2\">Regular</Button>\n  <Button color=\"secondary\" size=\"lg\" className=\"mr-2\">Large</Button>\n</Fragment>`;\nconst IconButtonCode = `<Fragment>\n  <ButtonIcon className=\"mr-2\" color=\"falcon-default\" size=\"sm\" icon=\"plus\" transform=\"shrink-3\">\n    Small\n  </ButtonIcon>\n  <ButtonIcon className=\"mr-2\" color=\"falcon-default\" icon=\"plus\" transform=\"shrink-3\">\n    Regular\n  </ButtonIcon>\n  <ButtonIcon color=\"falcon-default\" size=\"lg\" icon=\"plus\" transform=\"shrink-3\">\n    Large\n  </ButtonIcon>\n  <hr />\n  <ButtonIcon color=\"primary\" className=\"mr-2\"  icon=\"plus\" transform=\"shrink-3\">\n    Regular\n  </ButtonIcon>\n  <ButtonIcon outline color=\"primary\"  icon=\"plus\" transform=\"shrink-3\">\n    Outline\n  </ButtonIcon>\n  <hr />\n  <ButtonIcon color=\"primary\"  icon=\"trash\" iconAlign=\"right\" transform=\"shrink-3\">\n    Delete\n  </ButtonIcon>\n</Fragment>`;\nconst capsuleButtonCode = `<Fragment>\n  <Button className=\"mr-2\" color=\"falcon-default\" className=\"rounded-capsule mr-1\">\n    Example\n  </Button>\n  <ButtonIcon className=\"rounded-capsule mr-1\" color=\"falcon-default\" icon=\"align-left\" transform=\"shrink-3\">\n    Icon Left\n  </ButtonIcon>\n  <ButtonIcon className=\"rounded-capsule mr-1\" color=\"falcon-default\" icon=\"align-right\" iconAlign=\"right\" transform=\"shrink-3\">\n    Icon Right\n  </ButtonIcon>\n  <Button outline color=\"primary\" className=\"rounded-capsule mr-1\">\n    Outline\n  </Button>\n  <hr />\n  <Button color=\"falcon-default\" className=\"rounded-capsule mr-2\" size=\"sm\" >\n    Capsule Small\n  </Button>\n  <Button color=\"falcon-default\" className=\"rounded-capsule mr-2\" >\n    Capsule Regular\n  </Button>\n  <Button color=\"falcon-default\" className=\"rounded-capsule mr-2\" size=\"lg\" >\n    Capsule large\n  </Button>\n</Fragment>`;\nconst basicExampleCode = `<Fragment>\n  <ButtonGroup>\n    <Button>Left</Button>\n    <Button>Middle</Button>\n    <Button>Right</Button>\n  </ButtonGroup>\n</Fragment>`;\nconst buttonToolbarCode = `<Fragment>\n  <ButtonGroup aria-label=\"First group\" className=\"mr-2\">\n    <Button>1</Button>\n    <Button>2</Button>\n    <Button>3</Button>\n    <Button>4</Button>\n  </ButtonGroup>\n  <ButtonGroup aria-label=\"Second group\" className=\"mr-2\">\n    <Button>5</Button>\n    <Button>6</Button>\n    <Button>7</Button>\n  </ButtonGroup>\n  <ButtonGroup aria-label=\"Third group\">\n    <Button>8</Button>\n  </ButtonGroup>\n</Fragment>`;\nconst buttonToolbarWithInputCode = `<Fragment>\n  <ButtonToolbar>\n    <ButtonGroup>\n      <Button>1</Button>\n      <Button>2</Button>\n      <Button>3</Button>\n      <Button className=\"mr-3\">4</Button>\n    </ButtonGroup>\n    <InputGroup>\n      <InputGroupAddon addonType=\"prepend\">@</InputGroupAddon>\n      <Input />\n    </InputGroup>\n   </ButtonToolbar>\n  <ButtonToolbar className=\"justify-content-between mt-3\">\n    <ButtonGroup>\n      <Button>1</Button>\n      <Button>2</Button>\n      <Button>3</Button>\n      <Button className=\"mr-3\">4</Button>\n    </ButtonGroup>\n    <InputGroup>\n      <InputGroupAddon addonType=\"prepend\">@</InputGroupAddon>\n      <Input />\n    </InputGroup>\n  </ButtonToolbar>\n</Fragment>`;\nconst sizingCode = `<Fragment>\n  <ButtonGroup size=\"lg\" className=\"mr-2\">\n    <Button>Left</Button>\n    <Button>Middle</Button>\n    <Button>Right</Button>\n  </ButtonGroup>\n  <ButtonGroup className=\"mr-2\">\n    <Button>Left</Button>\n    <Button>Middle</Button>\n    <Button>Right</Button>\n  </ButtonGroup>\n  <ButtonGroup size=\"sm\">\n    <Button>Left</Button>\n    <Button>Middle</Button>\n    <Button>Right</Button>\n  </ButtonGroup>\n</Fragment>\n`;\nconst buttonGroupVerticalCode = `<ButtonGroup vertical>\n  <Button>Button</Button>\n  <Button>Button</Button>\n  <Button>Button</Button>\n</ButtonGroup>`;\nconst buttonGroupVerticalVariationCode = `function buttonGroupVerticalVariationCode() {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  return (\n    <ButtonGroup vertical>\n      <Button>Button</Button>\n      <Button>Button</Button>\n      <ButtonDropdown isOpen={isOpen} toggle={() => setIsOpen(!isOpen)}>\n        <DropdownToggle caret>Dropdown</DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Dropdown link</DropdownItem>\n          <DropdownItem>Dropdown link</DropdownItem>\n        </DropdownMenu>\n      </ButtonDropdown>\n    </ButtonGroup>\n  );\n};`;\nconst selectRadioButtonCode = `function SelectButton() {\n  const [isSelected, setIsSelected] = useState(\"\");\n  \n  return (\n    <Fragment>\n      <ButtonGroup>\n        <Button color=\"primary\" active={isSelected === 1} onClick={() => setIsSelected(1)}>\n          One\n        </Button>\n        <Button color=\"primary\" active={isSelected === 2} onClick={() => setIsSelected(2)}>\n          Two\n        </Button>\n        <Button color=\"primary\" active={isSelected === 3} onClick={() => setIsSelected(3)}>\n          Three\n        </Button>\n      </ButtonGroup>\n      <p className=\"mt-1\">Selected : {isSelected} </p>\n    </Fragment>\n  );\n};\n`;\nconst multiSelectCheckboxExample = `function multiSelectCheckboxExample() {\n  const [checked, setChecked] = useState([1]);\n  \n  const handleChecked = id => {\n    checked.includes(id)\n      ? setChecked([...checked.filter(i => i !== id)])\n      : setChecked([...checked, id]);\n  };\n  \n  return (\n    <Fragment>\n      <ButtonGroup>\n        <Button\n          color=\"primary\"\n          onClick={() => handleChecked(1)}\n          active={checked.includes(1)}\n        >\n          One\n        </Button>\n        <Button\n          color=\"primary\"\n          onClick={() => handleChecked(2)}\n          active={checked.includes(2)}\n        >\n          Two\n        </Button>\n        <Button\n          color=\"primary\"\n          onClick={() => handleChecked(3)}\n          active={checked.includes(3)}\n        >\n          Three\n        </Button>\n      </ButtonGroup>\n      <p>Selected: {JSON.stringify(checked)}</p>\n    </Fragment>\n  );\n};`;\nconst disabledButtonCode = `<Fragment>\n  <Button color=\"primary\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Primary</Button>\n  <Button color=\"secondary\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Secondary</Button>\n  <Button color=\"warning\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Warning</Button>\n  <Button color=\"danger\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Danger</Button>\n  <Button color=\"success\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Success</Button>\n  <Button color=\"light\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Light</Button>\n  <Button color=\"dark\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Dark</Button>\n  <Button color=\"info\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Info</Button>\n</Fragment>`;\nconst blockLevelButtonCode = `<Fragment>\n  <Button color=\"primary\" size=\"lg\" block>\n    Block level button\n  </Button>\n  <Button color=\"secondary\" size=\"lg\" block>\n    Block level button\n  </Button>\n</Fragment>`;\nconst buttonFalconPropertiesCode = `Button.propTypes = {\n  active: PropTypes.bool,\n  'aria-label': PropTypes.string,\n  block: PropTypes.bool,\n  color: PropTypes.string, // default: 'secondary'\n  disabled: PropTypes.bool,\n  outline: PropTypes.bool,\n\n  // Pass in a Component to override default button element\n  // example: react-router Link\n  // default: 'button'\n  tag: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.shape({ $$typeof: PropTypes.symbol, render: PropTypes.func }),\n    PropTypes.arrayOf(PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n      PropTypes.shape({ $$typeof: PropTypes.symbol, render: PropTypes.func }),\n    ]))\n  ]),\n\n  // ref will only get you a reference to the Button component, use innerRef to get a reference to the DOM element (for things like focus management).\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n\n  onClick: PropTypes.func,\n  size: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n\n  // use close prop for BS4 close icon utility\n  close: PropTypes.bool,\n}`;\nconst buttonFalconDefaultPropertiesCode = `Button.defaultProps = {\n  color: 'secondary',\n  tag: 'button',\n}\n`;\nconst buttonIconPropertiesCode = `ButtonIcon.propTypes = {\n  icon: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n  iconAlign: PropTypes.oneOf(['left', 'right']), // default: 'left'\n  iconClassName: PropTypes.string,\n  transform: PropTypes.string\n};`;\n\nconst Buttons = () => /*#__PURE__*/React.createElement(Fragment, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 307,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(PageHeader, {\n  title: \"Buttons\",\n  description: \"Use Falcon\\u2019s custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.\",\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 308,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Button, {\n  tag: \"a\",\n  href: \"https://reactstrap.github.io/components/buttons\",\n  target: \"_blank\",\n  color: \"link\",\n  size: \"sm\",\n  className: \"pl-0\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 313,\n    columnNumber: 7\n  }\n}, \"Buttons on reactstrap\", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n  icon: \"chevron-right\",\n  className: \"ml-1 fs--2\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 322,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 325,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Falcon Buttons\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 327,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: buttonFalconCode,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 331,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Properties\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 333,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: buttonFalconPropertiesCode,\n  hidePreview: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 334,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(FalconEditor, {\n  code: buttonFalconDefaultPropertiesCode,\n  hidePreview: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 338,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Examples\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 340,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: buttonCode,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 341,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 344,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Outline buttons\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 345,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 346,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: buttonOutlineCode,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 347,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 350,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Button sizes\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 351,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 352,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: buttonSizeCode,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 353,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 356,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Icon Buttons\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 357,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 358,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: IconButtonCode,\n  scope: {\n    FontAwesomeIcon,\n    ButtonIcon\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 362,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Button Icon Properties\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 363,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: buttonIconPropertiesCode,\n  scope: {\n    ButtonIcon\n  },\n  hidePreview: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 365,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 368,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Block level Button\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 369,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 370,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: blockLevelButtonCode,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 371,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 374,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Disabled Button\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 375,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 376,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: disabledButtonCode,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 377,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 380,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Button Capsule\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 381,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 382,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: capsuleButtonCode,\n  scope: {\n    FontAwesomeIcon,\n    ButtonIcon\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 383,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(PageHeader, {\n  title: \"Button Group\",\n  description: \"Group a series of buttons together on a single line with the button group, and super-power them with JavaScript.\",\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 386,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Button, {\n  tag: \"a\",\n  href: \"https://reactstrap.github.io/components/button-group\",\n  target: \"_blank\",\n  color: \"link\",\n  size: \"sm\",\n  className: \"pl-0\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 391,\n    columnNumber: 7\n  }\n}, \"Buttons on reactstrap\", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n  icon: \"chevron-right\",\n  className: \"ml-1 fs--2\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 400,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 403,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(CardHeader, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 404,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"h5\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 405,\n    columnNumber: 9\n  }\n}, \"Basic Example\"), /*#__PURE__*/React.createElement(\"p\", {\n  className: \"mb-0\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 9\n  }\n}, \"Wrap a series of buttons with\", /*#__PURE__*/React.createElement(\"code\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 407,\n    columnNumber: 40\n  }\n}, \".btn\"), \" in\", /*#__PURE__*/React.createElement(\"code\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 407,\n    columnNumber: 60\n  }\n}, \".btn-group\"), \". Add on optional JavaScript radio and checkbox style behavior with\")), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 411,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: basicExampleCode,\n  scope: {\n    ButtonIcon\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 412,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 415,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(CardHeader, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 416,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"h5\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 417,\n    columnNumber: 9\n  }\n}, \"Button Toolbar\"), /*#__PURE__*/React.createElement(\"p\", {\n  className: \"mb-0\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 418,\n    columnNumber: 9\n  }\n}, \"Combine sets of button groups into button toolbars for more complex components. Use utility classes as needed to space out groups, buttons, and more.\")), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 423,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: buttonToolbarCode,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 424,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 427,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(CardHeader, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 428,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"h5\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 429,\n    columnNumber: 9\n  }\n}, \"Button toolbar with input group\"), /*#__PURE__*/React.createElement(\"p\", {\n  className: \"mb-0\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 430,\n    columnNumber: 9\n  }\n}, \"Feel free to mix input groups with button groups in your toolbars. Similar to the example above, you'll likely need some utilities though to space things properly.\")), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 435,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: buttonToolbarWithInputCode,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 436,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 439,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(CardHeader, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 440,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"h5\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 441,\n    columnNumber: 9\n  }\n}, \"Sizing\"), /*#__PURE__*/React.createElement(\"p\", {\n  className: \"mb-0\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 442,\n    columnNumber: 9\n  }\n}, \"Insteam of aplying button sizing classes to every button in a group, just add .btn-gorup-* to each .btn-group, including each one when nesting multiple groups.\")), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 447,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: sizingCode,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 448,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 451,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(CardHeader, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 452,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"h5\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 453,\n    columnNumber: 9\n  }\n}, \"Vertical variation\"), /*#__PURE__*/React.createElement(\"p\", {\n  className: \"mb-0\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 454,\n    columnNumber: 9\n  }\n}, \"Make a set of buttons appear vertically tacked rather than horizontally. Split button dropdowns ae not supported here.\")), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 459,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: buttonGroupVerticalCode,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 460,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 463,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(CardHeader, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 464,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"h5\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 465,\n    columnNumber: 9\n  }\n}, \"Vertical variation with dropdown\")), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 467,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: buttonGroupVerticalVariationCode,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 468,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 471,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Radio Buttons (Stateful Buttons)\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 472,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 473,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: selectRadioButtonCode,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 474,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 477,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \" Checkbox (Stateful Buttons)\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 478,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 479,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: multiSelectCheckboxExample,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 480,\n    columnNumber: 9\n  }\n}))));\n\nexport default Buttons;","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/components/bootstrap-components/Buttons.js"],"names":["React","Fragment","Button","Card","CardHeader","CardBody","FontAwesomeIcon","PageHeader","FalconCardHeader","FalconEditor","ButtonIcon","buttonFalconCode","buttonCode","buttonOutlineCode","buttonSizeCode","IconButtonCode","capsuleButtonCode","basicExampleCode","buttonToolbarCode","buttonToolbarWithInputCode","sizingCode","buttonGroupVerticalCode","buttonGroupVerticalVariationCode","selectRadioButtonCode","multiSelectCheckboxExample","disabledButtonCode","blockLevelButtonCode","buttonFalconPropertiesCode","buttonFalconDefaultPropertiesCode","buttonIconPropertiesCode","Buttons"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { Button, Card, CardHeader, CardBody } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nimport ButtonIcon from '../common/ButtonIcon';\n\nconst buttonFalconCode = `['primary', 'success', 'info','danger', 'warning'].map((color, index) => (\n  <Button color={'falcon-'+color} key={index} className=\"mr-2\" >\n    {color}\n  </Button>\n))`;\n\nconst buttonCode = `['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'].map((color, index) => (\n  <Button color={color} size=\"sm\" key={index} className=\"mr-2\">\n    {color}\n  </Button>\n))`;\n\nconst buttonOutlineCode = `['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'].map((color, index) => (\n  <Button outline color={color} key={index} className=\"mr-2\">\n    {color}\n  </Button>\n))`;\n\nconst buttonSizeCode = `<Fragment>\n  <Button color=\"secondary\" size=\"sm\" className=\"mr-2\">Small</Button>\n  <Button color=\"secondary\" className=\"mr-2\">Regular</Button>\n  <Button color=\"secondary\" size=\"lg\" className=\"mr-2\">Large</Button>\n</Fragment>`;\n\nconst IconButtonCode = `<Fragment>\n  <ButtonIcon className=\"mr-2\" color=\"falcon-default\" size=\"sm\" icon=\"plus\" transform=\"shrink-3\">\n    Small\n  </ButtonIcon>\n  <ButtonIcon className=\"mr-2\" color=\"falcon-default\" icon=\"plus\" transform=\"shrink-3\">\n    Regular\n  </ButtonIcon>\n  <ButtonIcon color=\"falcon-default\" size=\"lg\" icon=\"plus\" transform=\"shrink-3\">\n    Large\n  </ButtonIcon>\n  <hr />\n  <ButtonIcon color=\"primary\" className=\"mr-2\"  icon=\"plus\" transform=\"shrink-3\">\n    Regular\n  </ButtonIcon>\n  <ButtonIcon outline color=\"primary\"  icon=\"plus\" transform=\"shrink-3\">\n    Outline\n  </ButtonIcon>\n  <hr />\n  <ButtonIcon color=\"primary\"  icon=\"trash\" iconAlign=\"right\" transform=\"shrink-3\">\n    Delete\n  </ButtonIcon>\n</Fragment>`;\n\nconst capsuleButtonCode = `<Fragment>\n  <Button className=\"mr-2\" color=\"falcon-default\" className=\"rounded-capsule mr-1\">\n    Example\n  </Button>\n  <ButtonIcon className=\"rounded-capsule mr-1\" color=\"falcon-default\" icon=\"align-left\" transform=\"shrink-3\">\n    Icon Left\n  </ButtonIcon>\n  <ButtonIcon className=\"rounded-capsule mr-1\" color=\"falcon-default\" icon=\"align-right\" iconAlign=\"right\" transform=\"shrink-3\">\n    Icon Right\n  </ButtonIcon>\n  <Button outline color=\"primary\" className=\"rounded-capsule mr-1\">\n    Outline\n  </Button>\n  <hr />\n  <Button color=\"falcon-default\" className=\"rounded-capsule mr-2\" size=\"sm\" >\n    Capsule Small\n  </Button>\n  <Button color=\"falcon-default\" className=\"rounded-capsule mr-2\" >\n    Capsule Regular\n  </Button>\n  <Button color=\"falcon-default\" className=\"rounded-capsule mr-2\" size=\"lg\" >\n    Capsule large\n  </Button>\n</Fragment>`;\n\nconst basicExampleCode = `<Fragment>\n  <ButtonGroup>\n    <Button>Left</Button>\n    <Button>Middle</Button>\n    <Button>Right</Button>\n  </ButtonGroup>\n</Fragment>`;\n\nconst buttonToolbarCode = `<Fragment>\n  <ButtonGroup aria-label=\"First group\" className=\"mr-2\">\n    <Button>1</Button>\n    <Button>2</Button>\n    <Button>3</Button>\n    <Button>4</Button>\n  </ButtonGroup>\n  <ButtonGroup aria-label=\"Second group\" className=\"mr-2\">\n    <Button>5</Button>\n    <Button>6</Button>\n    <Button>7</Button>\n  </ButtonGroup>\n  <ButtonGroup aria-label=\"Third group\">\n    <Button>8</Button>\n  </ButtonGroup>\n</Fragment>`;\n\nconst buttonToolbarWithInputCode = `<Fragment>\n  <ButtonToolbar>\n    <ButtonGroup>\n      <Button>1</Button>\n      <Button>2</Button>\n      <Button>3</Button>\n      <Button className=\"mr-3\">4</Button>\n    </ButtonGroup>\n    <InputGroup>\n      <InputGroupAddon addonType=\"prepend\">@</InputGroupAddon>\n      <Input />\n    </InputGroup>\n   </ButtonToolbar>\n  <ButtonToolbar className=\"justify-content-between mt-3\">\n    <ButtonGroup>\n      <Button>1</Button>\n      <Button>2</Button>\n      <Button>3</Button>\n      <Button className=\"mr-3\">4</Button>\n    </ButtonGroup>\n    <InputGroup>\n      <InputGroupAddon addonType=\"prepend\">@</InputGroupAddon>\n      <Input />\n    </InputGroup>\n  </ButtonToolbar>\n</Fragment>`;\n\nconst sizingCode = `<Fragment>\n  <ButtonGroup size=\"lg\" className=\"mr-2\">\n    <Button>Left</Button>\n    <Button>Middle</Button>\n    <Button>Right</Button>\n  </ButtonGroup>\n  <ButtonGroup className=\"mr-2\">\n    <Button>Left</Button>\n    <Button>Middle</Button>\n    <Button>Right</Button>\n  </ButtonGroup>\n  <ButtonGroup size=\"sm\">\n    <Button>Left</Button>\n    <Button>Middle</Button>\n    <Button>Right</Button>\n  </ButtonGroup>\n</Fragment>\n`;\n\nconst buttonGroupVerticalCode = `<ButtonGroup vertical>\n  <Button>Button</Button>\n  <Button>Button</Button>\n  <Button>Button</Button>\n</ButtonGroup>`;\n\nconst buttonGroupVerticalVariationCode = `function buttonGroupVerticalVariationCode() {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  return (\n    <ButtonGroup vertical>\n      <Button>Button</Button>\n      <Button>Button</Button>\n      <ButtonDropdown isOpen={isOpen} toggle={() => setIsOpen(!isOpen)}>\n        <DropdownToggle caret>Dropdown</DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Dropdown link</DropdownItem>\n          <DropdownItem>Dropdown link</DropdownItem>\n        </DropdownMenu>\n      </ButtonDropdown>\n    </ButtonGroup>\n  );\n};`;\n\nconst selectRadioButtonCode = `function SelectButton() {\n  const [isSelected, setIsSelected] = useState(\"\");\n  \n  return (\n    <Fragment>\n      <ButtonGroup>\n        <Button color=\"primary\" active={isSelected === 1} onClick={() => setIsSelected(1)}>\n          One\n        </Button>\n        <Button color=\"primary\" active={isSelected === 2} onClick={() => setIsSelected(2)}>\n          Two\n        </Button>\n        <Button color=\"primary\" active={isSelected === 3} onClick={() => setIsSelected(3)}>\n          Three\n        </Button>\n      </ButtonGroup>\n      <p className=\"mt-1\">Selected : {isSelected} </p>\n    </Fragment>\n  );\n};\n`;\n\nconst multiSelectCheckboxExample = `function multiSelectCheckboxExample() {\n  const [checked, setChecked] = useState([1]);\n  \n  const handleChecked = id => {\n    checked.includes(id)\n      ? setChecked([...checked.filter(i => i !== id)])\n      : setChecked([...checked, id]);\n  };\n  \n  return (\n    <Fragment>\n      <ButtonGroup>\n        <Button\n          color=\"primary\"\n          onClick={() => handleChecked(1)}\n          active={checked.includes(1)}\n        >\n          One\n        </Button>\n        <Button\n          color=\"primary\"\n          onClick={() => handleChecked(2)}\n          active={checked.includes(2)}\n        >\n          Two\n        </Button>\n        <Button\n          color=\"primary\"\n          onClick={() => handleChecked(3)}\n          active={checked.includes(3)}\n        >\n          Three\n        </Button>\n      </ButtonGroup>\n      <p>Selected: {JSON.stringify(checked)}</p>\n    </Fragment>\n  );\n};`;\n\nconst disabledButtonCode = `<Fragment>\n  <Button color=\"primary\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Primary</Button>\n  <Button color=\"secondary\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Secondary</Button>\n  <Button color=\"warning\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Warning</Button>\n  <Button color=\"danger\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Danger</Button>\n  <Button color=\"success\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Success</Button>\n  <Button color=\"light\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Light</Button>\n  <Button color=\"dark\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Dark</Button>\n  <Button color=\"info\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Info</Button>\n</Fragment>`;\n\nconst blockLevelButtonCode = `<Fragment>\n  <Button color=\"primary\" size=\"lg\" block>\n    Block level button\n  </Button>\n  <Button color=\"secondary\" size=\"lg\" block>\n    Block level button\n  </Button>\n</Fragment>`;\n\nconst buttonFalconPropertiesCode = `Button.propTypes = {\n  active: PropTypes.bool,\n  'aria-label': PropTypes.string,\n  block: PropTypes.bool,\n  color: PropTypes.string, // default: 'secondary'\n  disabled: PropTypes.bool,\n  outline: PropTypes.bool,\n\n  // Pass in a Component to override default button element\n  // example: react-router Link\n  // default: 'button'\n  tag: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.shape({ $$typeof: PropTypes.symbol, render: PropTypes.func }),\n    PropTypes.arrayOf(PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n      PropTypes.shape({ $$typeof: PropTypes.symbol, render: PropTypes.func }),\n    ]))\n  ]),\n\n  // ref will only get you a reference to the Button component, use innerRef to get a reference to the DOM element (for things like focus management).\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n\n  onClick: PropTypes.func,\n  size: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n\n  // use close prop for BS4 close icon utility\n  close: PropTypes.bool,\n}`;\n\nconst buttonFalconDefaultPropertiesCode = `Button.defaultProps = {\n  color: 'secondary',\n  tag: 'button',\n}\n`;\n\nconst buttonIconPropertiesCode = `ButtonIcon.propTypes = {\n  icon: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n  iconAlign: PropTypes.oneOf(['left', 'right']), // default: 'left'\n  iconClassName: PropTypes.string,\n  transform: PropTypes.string\n};`;\n\nconst Buttons = () => (\n  <Fragment>\n    <PageHeader\n      title=\"Buttons\"\n      description=\"Use Falcon’s custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.\"\n      className=\"mb-3\"\n    >\n      <Button\n        tag=\"a\"\n        href=\"https://reactstrap.github.io/components/buttons\"\n        target=\"_blank\"\n        color=\"link\"\n        size=\"sm\"\n        className=\"pl-0\"\n      >\n        Buttons on reactstrap\n        <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n      </Button>\n    </PageHeader>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Falcon Buttons\" light={false} />\n      <CardBody>\n        <FalconEditor code={buttonFalconCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Properties\" light={false} />\n      <CardBody>\n        <FalconEditor code={buttonFalconPropertiesCode} hidePreview />\n        <FalconEditor code={buttonFalconDefaultPropertiesCode} hidePreview />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Examples\" light={false} />\n      <CardBody>\n        <FalconEditor code={buttonCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Outline buttons\" light={false} />\n      <CardBody>\n        <FalconEditor code={buttonOutlineCode} />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Button sizes\" light={false} />\n      <CardBody>\n        <FalconEditor code={buttonSizeCode} />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Icon Buttons\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={IconButtonCode} scope={{ FontAwesomeIcon, ButtonIcon }} />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Button Icon Properties\" light={false} />\n      <CardBody>\n        <FalconEditor code={buttonIconPropertiesCode} scope={{ ButtonIcon }} hidePreview />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Block level Button\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={blockLevelButtonCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Disabled Button\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={disabledButtonCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Button Capsule\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={capsuleButtonCode} scope={{ FontAwesomeIcon, ButtonIcon }} />\n      </CardBody>\n    </Card>\n    <PageHeader\n      title=\"Button Group\"\n      description=\"Group a series of buttons together on a single line with the button group, and super-power them with JavaScript.\"\n      className=\"mb-3\"\n    >\n      <Button\n        tag=\"a\"\n        href=\"https://reactstrap.github.io/components/button-group\"\n        target=\"_blank\"\n        color=\"link\"\n        size=\"sm\"\n        className=\"pl-0\"\n      >\n        Buttons on reactstrap\n        <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n      </Button>\n    </PageHeader>\n    <Card className=\"mb-3\">\n      <CardHeader>\n        <h5>Basic Example</h5>\n        <p className=\"mb-0\">\n          Wrap a series of buttons with<code>.btn</code> in<code>.btn-group</code>. Add on optional JavaScript radio and\n          checkbox style behavior with\n        </p>\n      </CardHeader>\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={basicExampleCode} scope={{ ButtonIcon }} />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <CardHeader>\n        <h5>Button Toolbar</h5>\n        <p className=\"mb-0\">\n          Combine sets of button groups into button toolbars for more complex components. Use utility classes as needed\n          to space out groups, buttons, and more.\n        </p>\n      </CardHeader>\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={buttonToolbarCode} />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <CardHeader>\n        <h5>Button toolbar with input group</h5>\n        <p className=\"mb-0\">\n          Feel free to mix input groups with button groups in your toolbars. Similar to the example above, you'll likely\n          need some utilities though to space things properly.\n        </p>\n      </CardHeader>\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={buttonToolbarWithInputCode} />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <CardHeader>\n        <h5>Sizing</h5>\n        <p className=\"mb-0\">\n          Insteam of aplying button sizing classes to every button in a group, just add .btn-gorup-* to each .btn-group,\n          including each one when nesting multiple groups.\n        </p>\n      </CardHeader>\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={sizingCode} />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <CardHeader>\n        <h5>Vertical variation</h5>\n        <p className=\"mb-0\">\n          Make a set of buttons appear vertically tacked rather than horizontally. Split button dropdowns ae not\n          supported here.\n        </p>\n      </CardHeader>\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={buttonGroupVerticalCode} />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <CardHeader>\n        <h5>Vertical variation with dropdown</h5>\n      </CardHeader>\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={buttonGroupVerticalVariationCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Radio Buttons (Stateful Buttons)\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={selectRadioButtonCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card>\n      <FalconCardHeader title=\" Checkbox (Stateful Buttons)\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={multiSelectCheckboxExample} language=\"jsx\" />\n      </CardBody>\n    </Card>\n  </Fragment>\n);\n\nexport default Buttons;\n"]},"metadata":{},"sourceType":"module"}