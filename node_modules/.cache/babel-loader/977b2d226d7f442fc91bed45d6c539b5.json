{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/components/auth/wizard/BasicUserForm.js\";\nimport React, { Fragment } from 'react';\nimport WizardInput from './WizardInput';\nimport { Col, CustomInput, Row } from 'reactstrap';\n\nconst BasicUserForm = ({\n  register,\n  errors,\n  watch\n}) => {\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(WizardInput, {\n    label: \"Name*\",\n    placeholder: \"Name\",\n    name: \"name\",\n    id: \"name\",\n    innerRef: register({\n      required: 'Name is required',\n      minLength: {\n        value: 2,\n        message: 'Min length 2'\n      }\n    }),\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(WizardInput, {\n    label: \"Email*\",\n    placeholder: \"Email\",\n    id: \"email\",\n    name: \"email\",\n    innerRef: register({\n      required: 'Email is required',\n      pattern: {\n        value: /[A-Za-z0-9._%+-]{3,}@[a-zA-Z]{3,}([.]{1}[a-zA-Z]{2,}|[.]{1}[a-zA-Z]{2,}[.]{1}[a-zA-Z]{2,})/i,\n        message: 'Email must be valid'\n      }\n    }),\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    form: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WizardInput, {\n    type: \"password\",\n    label: \"Password*\",\n    placeholder: \"Password\",\n    id: \"password\",\n    name: \"password\",\n    innerRef: register({\n      required: 'You must specify a password',\n      minLength: {\n        value: 2,\n        message: 'Password must have at least 2 characters'\n      }\n    }),\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WizardInput, {\n    type: \"password\",\n    label: \"Confirm Password*\",\n    placeholder: \"Confirm Password\",\n    id: \"confirmPassword\",\n    name: \"confirmPassword\",\n    innerRef: register({\n      validate: value => value === watch('password') || 'The password do not match'\n    }),\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(WizardInput, {\n    type: \"checkbox\",\n    id: \"agreeToTerms\",\n    tag: CustomInput,\n    label: /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, \"I accept the \", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#!\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 26\n      }\n    }, \" terms\"), \" and \", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#!\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 54\n      }\n    }, \" privacy policy\")),\n    name: \"agreeToTerms\",\n    innerRef: register({\n      required: 'You have to agree with us'\n    }),\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default BasicUserForm;","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/components/auth/wizard/BasicUserForm.js"],"names":["React","Fragment","WizardInput","Col","CustomInput","Row","BasicUserForm","register","errors","watch","required","minLength","value","message","pattern","validate"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport WizardInput from './WizardInput';\nimport { Col, CustomInput, Row } from 'reactstrap';\n\nconst BasicUserForm = ({ register, errors, watch }) => {\n  return (\n    <Fragment>\n      <WizardInput\n        label=\"Name*\"\n        placeholder=\"Name\"\n        name=\"name\"\n        id=\"name\"\n        innerRef={register({\n          required: 'Name is required',\n          minLength: {\n            value: 2,\n            message: 'Min length 2'\n          }\n        })}\n        errors={errors}\n      />\n      <WizardInput\n        label=\"Email*\"\n        placeholder=\"Email\"\n        id=\"email\"\n        name=\"email\"\n        innerRef={register({\n          required: 'Email is required',\n          pattern: {\n            value: /[A-Za-z0-9._%+-]{3,}@[a-zA-Z]{3,}([.]{1}[a-zA-Z]{2,}|[.]{1}[a-zA-Z]{2,}[.]{1}[a-zA-Z]{2,})/i,\n            message: 'Email must be valid'\n          }\n        })}\n        errors={errors}\n      />\n      <Row form>\n        <Col>\n          <WizardInput\n            type=\"password\"\n            label=\"Password*\"\n            placeholder=\"Password\"\n            id=\"password\"\n            name=\"password\"\n            innerRef={register({\n              required: 'You must specify a password',\n              minLength: {\n                value: 2,\n                message: 'Password must have at least 2 characters'\n              }\n            })}\n            errors={errors}\n          />\n        </Col>\n        <Col>\n          <WizardInput\n            type=\"password\"\n            label=\"Confirm Password*\"\n            placeholder=\"Confirm Password\"\n            id=\"confirmPassword\"\n            name=\"confirmPassword\"\n            innerRef={register({\n              validate: value => value === watch('password') || 'The password do not match'\n            })}\n            errors={errors}\n          />\n        </Col>\n      </Row>\n      <WizardInput\n        type=\"checkbox\"\n        id=\"agreeToTerms\"\n        tag={CustomInput}\n        label={\n          <Fragment>\n            I accept the <a href=\"#!\"> terms</a> and <a href=\"#!\"> privacy policy</a>\n          </Fragment>\n        }\n        name=\"agreeToTerms\"\n        innerRef={register({\n          required: 'You have to agree with us'\n        })}\n        errors={errors}\n      />\n    </Fragment>\n  );\n};\n\nexport default BasicUserForm;\n"]},"metadata":{},"sourceType":"module"}