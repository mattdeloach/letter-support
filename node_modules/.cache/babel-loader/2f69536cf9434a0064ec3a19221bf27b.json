{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/components/chat/sidebar/ChatThread.js\";\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Media } from 'reactstrap';\nimport LastMessage from './LastMessage';\nimport Avatar from '../../common/Avatar';\nimport Flex from '../../common/Flex';\nimport ChatSidebarDropdownAction from './ChatSidebarDropdownAction';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { ChatContext } from '../../../context/Context';\nimport classNames from 'classnames';\n\nconst ChatThread = ({\n  thread\n}) => {\n  const {\n    threadsDispatch,\n    messages,\n    activeThreadId,\n    setActiveThreadId,\n    getUser\n  } = useContext(ChatContext);\n  const message = messages.find(({\n    id\n  }) => id === thread.messagesId);\n  const lastMessage = message === null || message === void 0 ? void 0 : message.content[message.content.length - 1];\n  const user = getUser(thread);\n  return /*#__PURE__*/React.createElement(Media, {\n    className: classNames(`chat-contact hover-actions-trigger w-100 `, {\n      'unread-message': !thread.read,\n      'read-message': thread.read,\n      active: thread.id === activeThreadId\n    }),\n    onClick: () => {\n      setActiveThreadId(thread.id);\n      threadsDispatch({\n        type: 'EDIT',\n        id: thread.id,\n        payload: { ...thread,\n          read: true\n        }\n      });\n      document.getElementsByClassName('chat-sidebar')[0].style.left = '-100%';\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    className: user.status,\n    src: user.avatarSrc,\n    size: \"xl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Media, {\n    body: true,\n    className: \"chat-contact-body ml-2 d-md-none d-lg-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Flex, {\n    justify: \"between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-0 chat-contact-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, user.name), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"message-time fs--2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, \" \", !!lastMessage && lastMessage.time.day, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"min-w-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-contact-content pr-3\",\n    dangerouslySetInnerHTML: {\n      __html: LastMessage(lastMessage, thread)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(ChatSidebarDropdownAction, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"position-absolute b-0 r-0 hover-hide\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, !!(lastMessage === null || lastMessage === void 0 ? void 0 : lastMessage.status) && /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: classNames({\n      check: lastMessage.status === 'seen' || lastMessage.status === 'sent',\n      'check-double': lastMessage.status === 'delivered'\n    }),\n    transform: \"shrink-5 down-4\",\n    className: classNames({\n      'text-success': lastMessage.status === 'seen',\n      'text-400': lastMessage.status === 'delivered' || lastMessage.status === 'sent'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 15\n    }\n  })))));\n};\n\nChatThread.propTypes = {\n  thread: PropTypes.object.isRequired\n};\nexport default ChatThread;","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/components/chat/sidebar/ChatThread.js"],"names":["React","useContext","PropTypes","Media","LastMessage","Avatar","Flex","ChatSidebarDropdownAction","FontAwesomeIcon","ChatContext","classNames","ChatThread","thread","threadsDispatch","messages","activeThreadId","setActiveThreadId","getUser","message","find","id","messagesId","lastMessage","content","length","user","read","active","type","payload","document","getElementsByClassName","style","left","status","avatarSrc","name","time","day","__html","check","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Media } from 'reactstrap';\r\nimport LastMessage from './LastMessage';\r\nimport Avatar from '../../common/Avatar';\r\nimport Flex from '../../common/Flex';\r\nimport ChatSidebarDropdownAction from './ChatSidebarDropdownAction';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { ChatContext } from '../../../context/Context';\r\nimport classNames from 'classnames';\r\n\r\nconst ChatThread = ({ thread }) => {\r\n  const { threadsDispatch, messages, activeThreadId, setActiveThreadId, getUser } = useContext(ChatContext);\r\n  const message = messages.find(({ id }) => id === thread.messagesId);\r\n  const lastMessage = message?.content[message.content.length - 1];\r\n  const user = getUser(thread);\r\n\r\n  return (\r\n    <Media\r\n      className={classNames(`chat-contact hover-actions-trigger w-100 `, {\r\n        'unread-message': !thread.read,\r\n        'read-message': thread.read,\r\n        active: thread.id === activeThreadId\r\n      })}\r\n      onClick={() => {\r\n        setActiveThreadId(thread.id);\r\n        threadsDispatch({ type: 'EDIT', id: thread.id, payload: { ...thread, read: true } });\r\n\r\n        document.getElementsByClassName('chat-sidebar')[0].style.left = '-100%';\r\n      }}\r\n    >\r\n      <Avatar className={user.status} src={user.avatarSrc} size=\"xl\" />\r\n      <Media body className=\"chat-contact-body ml-2 d-md-none d-lg-block\">\r\n        <Flex justify=\"between\">\r\n          <h6 className=\"mb-0 chat-contact-title\">{user.name}</h6>\r\n          <span className=\"message-time fs--2\"> {!!lastMessage && lastMessage.time.day} </span>\r\n        </Flex>\r\n        <div className=\"min-w-0\">\r\n          <div\r\n            className=\"chat-contact-content pr-3\"\r\n            dangerouslySetInnerHTML={{\r\n              __html: LastMessage(lastMessage, thread)\r\n            }}\r\n          />\r\n          <ChatSidebarDropdownAction />\r\n          <div className=\"position-absolute b-0 r-0 hover-hide\">\r\n            {!!lastMessage?.status && (\r\n              <FontAwesomeIcon\r\n                icon={classNames({\r\n                  check: lastMessage.status === 'seen' || lastMessage.status === 'sent',\r\n                  'check-double': lastMessage.status === 'delivered'\r\n                })}\r\n                transform=\"shrink-5 down-4\"\r\n                className={classNames({\r\n                  'text-success': lastMessage.status === 'seen',\r\n                  'text-400': lastMessage.status === 'delivered' || lastMessage.status === 'sent'\r\n                })}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Media>\r\n    </Media>\r\n  );\r\n};\r\n\r\nChatThread.propTypes = {\r\n  thread: PropTypes.object.isRequired\r\n};\r\n\r\nexport default ChatThread;\r\n"]},"metadata":{},"sourceType":"module"}