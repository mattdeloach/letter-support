{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/components/map/GoogleMap.js\";\nimport React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport classNames from 'classnames';\nimport googleMapStyles from '../../helpers/googleMapStyles';\n\nconst GoogleMap = ({\n  mapStyle,\n  className,\n  children,\n  ...rest\n}) => {\n  const [activeMarker, setActiveMarker] = useState({});\n  const [showingInfoWindow, setShowingInfoWindow] = useState(false);\n\n  const onMarkerClick = (props, marker) => {\n    setActiveMarker(marker);\n    setShowingInfoWindow(true);\n  };\n\n  const onInfoWindowClose = () => {\n    setActiveMarker(null);\n    setShowingInfoWindow(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames('position-relative', className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Map, Object.assign({\n    styles: googleMapStyles[mapStyle]\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    onClick: onMarkerClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }), children && /*#__PURE__*/React.createElement(InfoWindow, {\n    marker: activeMarker,\n    onClose: onInfoWindowClose,\n    visible: showingInfoWindow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, children))));\n};\n\nGoogleMap.propTypes = {\n  mapStyle: PropTypes.oneOf(['Default', 'Gray', 'Midnight', 'Hopper', 'Beard', 'AssassianCreed', 'SubtleGray', 'Tripitty']),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  ...Map.propTypes\n};\nGoogleMap.defaultProps = {\n  zoom: 17,\n  mapStyle: 'Default'\n}; // TODO: Do you provide the apiKey in production, instruct user to use his own apiKey\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyARdVcREeBK44lIWnv5-iPijKqvlSAVwbw'\n})(GoogleMap);","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/components/map/GoogleMap.js"],"names":["React","Fragment","useState","PropTypes","Map","InfoWindow","Marker","GoogleApiWrapper","classNames","googleMapStyles","GoogleMap","mapStyle","className","children","rest","activeMarker","setActiveMarker","showingInfoWindow","setShowingInfoWindow","onMarkerClick","props","marker","onInfoWindowClose","propTypes","oneOf","string","node","defaultProps","zoom","apiKey"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,GAAT,EAAcC,UAAd,EAA0BC,MAA1B,EAAkCC,gBAAlC,QAA0D,mBAA1D;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,eAAP,MAA4B,+BAA5B;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,SAAZ;AAAuBC,EAAAA,QAAvB;AAAiC,KAAGC;AAApC,CAAD,KAAgD;AAChE,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACe,iBAAD,EAAoBC,oBAApB,IAA4ChB,QAAQ,CAAC,KAAD,CAA1D;;AAEA,QAAMiB,aAAa,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvCL,IAAAA,eAAe,CAACK,MAAD,CAAf;AACAH,IAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD,GAHD;;AAKA,QAAMI,iBAAiB,GAAG,MAAM;AAC9BN,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAE,IAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAEV,UAAU,CAAC,mBAAD,EAAsBI,SAAtB,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAEH,eAAe,CAACE,QAAD;AAA5B,KAA4CG,IAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEK,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGGN,QAAQ,iBACP,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAEE,YAApB;AAAkC,IAAA,OAAO,EAAEO,iBAA3C;AAA8D,IAAA,OAAO,EAAEL,iBAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAWJ,QAAX,CADF,CAJJ,CADF,CADF;AAaD,CA3BD;;AA6BAH,SAAS,CAACa,SAAV,GAAsB;AACpBZ,EAAAA,QAAQ,EAAER,SAAS,CAACqB,KAAV,CAAgB,CACxB,SADwB,EAExB,MAFwB,EAGxB,UAHwB,EAIxB,QAJwB,EAKxB,OALwB,EAMxB,gBANwB,EAOxB,YAPwB,EAQxB,UARwB,CAAhB,CADU;AAWpBZ,EAAAA,SAAS,EAAET,SAAS,CAACsB,MAXD;AAYpBZ,EAAAA,QAAQ,EAAEV,SAAS,CAACuB,IAZA;AAapB,KAAGtB,GAAG,CAACmB;AAba,CAAtB;AAgBAb,SAAS,CAACiB,YAAV,GAAyB;AAAEC,EAAAA,IAAI,EAAE,EAAR;AAAYjB,EAAAA,QAAQ,EAAE;AAAtB,CAAzB,C,CAEA;;AACA,eAAeJ,gBAAgB,CAAC;AAAEsB,EAAAA,MAAM,EAAE;AAAV,CAAD,CAAhB,CAAwEnB,SAAxE,CAAf","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport classNames from 'classnames';\nimport googleMapStyles from '../../helpers/googleMapStyles';\n\nconst GoogleMap = ({ mapStyle, className, children, ...rest }) => {\n  const [activeMarker, setActiveMarker] = useState({});\n  const [showingInfoWindow, setShowingInfoWindow] = useState(false);\n\n  const onMarkerClick = (props, marker) => {\n    setActiveMarker(marker);\n    setShowingInfoWindow(true);\n  };\n\n  const onInfoWindowClose = () => {\n    setActiveMarker(null);\n    setShowingInfoWindow(false);\n  };\n\n  return (\n    <div className={classNames('position-relative', className)}>\n      <Map styles={googleMapStyles[mapStyle]} {...rest}>\n        <Marker onClick={onMarkerClick} />\n\n        {children && (\n          <InfoWindow marker={activeMarker} onClose={onInfoWindowClose} visible={showingInfoWindow}>\n            <Fragment>{children}</Fragment>\n          </InfoWindow>\n        )}\n      </Map>\n    </div>\n  );\n};\n\nGoogleMap.propTypes = {\n  mapStyle: PropTypes.oneOf([\n    'Default',\n    'Gray',\n    'Midnight',\n    'Hopper',\n    'Beard',\n    'AssassianCreed',\n    'SubtleGray',\n    'Tripitty'\n  ]),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  ...Map.propTypes\n};\n\nGoogleMap.defaultProps = { zoom: 17, mapStyle: 'Default' };\n\n// TODO: Do you provide the apiKey in production, instruct user to use his own apiKey\nexport default GoogleApiWrapper({ apiKey: 'AIzaSyARdVcREeBK44lIWnv5-iPijKqvlSAVwbw' })(GoogleMap);\n"]},"metadata":{},"sourceType":"module"}