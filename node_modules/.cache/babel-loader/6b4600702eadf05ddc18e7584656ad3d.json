{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/components/plugins/ReactBeautifulDnD.js\";\nimport React, { Fragment } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport PageHeader from '../common/PageHeader';\nimport { Button, Card, CardBody, CardHeader, Row, Col } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport FalconEditor from '../common/FalconEditor';\nimport { useState } from 'react';\nconst DragAndDropCode = `function DragAndDropExample() {\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd} >\n      <Row>\n        <Col>\n        <h5>List 1</h5>\n        <Droppable droppableId=\"droppable\">\n        {(provided, snapshot) => (\n            <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}>\n                {data.items.map((item, index) => (\n                    <Draggable\n                        key={item.id}\n                        draggableId={item.id}\n                        index={index}>\n                        {(provided, snapshot) => (\n                            <div\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                style={getItemStyle(\n                                    snapshot.isDragging,\n                                    provided.draggableProps.style\n                                )}>\n                                {item.content}\n                            </div>\n                        )}\n                    </Draggable>\n                ))}\n                {provided.placeholder}\n            </div>\n            )}\n         </Droppable>\n        </Col>\n        <Col>\n        <h5>List 2</h5>\n        <Droppable droppableId=\"droppable2\">\n        {(provided, snapshot) => (\n            <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}>\n                {data.selected.map((item, index) => (\n                    <Draggable\n                        key={item.id}\n                        draggableId={item.id}\n                        index={index}>\n                        {(provided, snapshot) => (\n                            <div\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                style={getItemStyle(\n                                    snapshot.isDragging,\n                                    provided.draggableProps.style\n                                )}>\n                                {item.content}\n                            </div>\n                        )}\n                    </Draggable>\n                ))}\n                {provided.placeholder}\n            </div>\n           )}\n          </Droppable>\n        </Col>\n      </Row>\n</DragDropContext>)\n}`;\n\nconst getItems = (count, offset = 0) => Array.from({\n  length: count\n}, (v, k) => k).map(k => ({\n  id: `item-${k + offset}`,\n  content: `item ${k + offset}`\n})); // a little function to help us with reordering the result\n\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n/**\r\n * Moves an item from one list to another list.\r\n */\n\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n  destClone.splice(droppableDestination.index, 0, removed);\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : '#FFF',\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\n  padding: grid,\n  width: 250\n});\n\nconst ReactBootstrapTable2 = () => {\n  const [data, setData] = useState({\n    items: getItems(10),\n    selected: getItems(5, 10)\n  });\n  const id2List = {\n    droppable: 'items',\n    droppable2: 'selected'\n  };\n\n  const getList = id => data[id2List[id]];\n\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result; // dropped outside the list\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const reorderData = reorder(getList(source.droppableId), source.index, destination.index);\n      setData({\n        items: reorderData,\n        selected: data.selected\n      });\n\n      if (source.droppableId === 'droppable2') {\n        setData({ ...data,\n          selected: reorderData\n        });\n      }\n    } else {\n      const result = move(getList(source.droppableId), getList(destination.droppableId), source, destination);\n      setData({\n        items: result.droppable,\n        selected: result.droppable2\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PageHeader, {\n    title: \"React Beautiful DnD\",\n    description: \"Intuitive to use.\\r Compatible for Bootstrap 3 and 4.\\r Better than legacy react-bootstrap-table!!. It has Rich Functionality - Sortable, Row Selection, Cell Editor, Row Expand, Column Filter Pagination etc. Easy to Configurable and customizable table.\",\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    tag: \"a\",\n    href: \"https://github.com/atlassian/react-beautiful-dnd\",\n    target: \"_blank\",\n    color: \"link\",\n    size: \"sm\",\n    className: \"pl-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, \"React Beautiful DnD Documentation\", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"chevron-right\",\n    className: \"ml-1 fs--2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"bg-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 11\n    }\n  }, \"Example\")), /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FalconEditor, {\n    code: DragAndDropCode,\n    scope: {\n      DragDropContext,\n      Droppable,\n      Draggable,\n      data,\n      setData,\n      onDragEnd,\n      getListStyle,\n      getItemStyle\n    },\n    language: \"jsx\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }\n  }))))));\n};\n\nexport default ReactBootstrapTable2;","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/components/plugins/ReactBeautifulDnD.js"],"names":["React","Fragment","DragDropContext","Droppable","Draggable","PageHeader","Button","Card","CardBody","CardHeader","Row","Col","FontAwesomeIcon","FalconEditor","useState","DragAndDropCode","getItems","count","offset","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","removed","splice","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","ReactBootstrapTable2","data","setData","items","selected","id2List","droppable","droppable2","getList","onDragEnd","reorderData"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nimport PageHeader from '../common/PageHeader';\r\nimport { Button, Card, CardBody, CardHeader, Row, Col } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport FalconEditor from '../common/FalconEditor';\r\nimport { useState } from 'react';\r\n\r\nconst DragAndDropCode = `function DragAndDropExample() {\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd} >\r\n      <Row>\r\n        <Col>\r\n        <h5>List 1</h5>\r\n        <Droppable droppableId=\"droppable\">\r\n        {(provided, snapshot) => (\r\n            <div\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}>\r\n                {data.items.map((item, index) => (\r\n                    <Draggable\r\n                        key={item.id}\r\n                        draggableId={item.id}\r\n                        index={index}>\r\n                        {(provided, snapshot) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                {...provided.draggableProps}\r\n                                {...provided.dragHandleProps}\r\n                                style={getItemStyle(\r\n                                    snapshot.isDragging,\r\n                                    provided.draggableProps.style\r\n                                )}>\r\n                                {item.content}\r\n                            </div>\r\n                        )}\r\n                    </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n            </div>\r\n            )}\r\n         </Droppable>\r\n        </Col>\r\n        <Col>\r\n        <h5>List 2</h5>\r\n        <Droppable droppableId=\"droppable2\">\r\n        {(provided, snapshot) => (\r\n            <div\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}>\r\n                {data.selected.map((item, index) => (\r\n                    <Draggable\r\n                        key={item.id}\r\n                        draggableId={item.id}\r\n                        index={index}>\r\n                        {(provided, snapshot) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                {...provided.draggableProps}\r\n                                {...provided.dragHandleProps}\r\n                                style={getItemStyle(\r\n                                    snapshot.isDragging,\r\n                                    provided.draggableProps.style\r\n                                )}>\r\n                                {item.content}\r\n                            </div>\r\n                        )}\r\n                    </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n            </div>\r\n           )}\r\n          </Droppable>\r\n        </Col>\r\n      </Row>\r\n</DragDropContext>)\r\n}`;\r\n\r\nconst getItems = (count, offset = 0) =>\r\n  Array.from({ length: count }, (v, k) => k).map(k => ({\r\n    id: `item-${k + offset}`,\r\n    content: `item ${k + offset}`\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: 'none',\r\n  padding: grid * 2,\r\n  margin: `0 0 ${grid}px 0`,\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? 'lightgreen' : '#FFF',\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  padding: grid,\r\n  width: 250\r\n});\r\n\r\nconst ReactBootstrapTable2 = () => {\r\n  const [data, setData] = useState({ items: getItems(10), selected: getItems(5, 10) });\r\n\r\n  const id2List = {\r\n    droppable: 'items',\r\n    droppable2: 'selected'\r\n  };\r\n\r\n  const getList = id => data[id2List[id]];\r\n\r\n  const onDragEnd = result => {\r\n    const { source, destination } = result;\r\n\r\n    // dropped outside the list\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      const reorderData = reorder(getList(source.droppableId), source.index, destination.index);\r\n\r\n      setData({ items: reorderData, selected: data.selected });\r\n\r\n      if (source.droppableId === 'droppable2') {\r\n        setData({ ...data, selected: reorderData });\r\n      }\r\n    } else {\r\n      const result = move(getList(source.droppableId), getList(destination.droppableId), source, destination);\r\n\r\n      setData({\r\n        items: result.droppable,\r\n        selected: result.droppable2\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <PageHeader\r\n        title=\"React Beautiful DnD\"\r\n        description=\"Intuitive to use.\r\n        Compatible for Bootstrap 3 and 4.\r\n        Better than legacy react-bootstrap-table!!. It has Rich Functionality - Sortable, Row Selection, Cell Editor, Row Expand, Column Filter Pagination etc. Easy to Configurable and customizable table.\"\r\n        className=\"mb-3\"\r\n      >\r\n        <Button\r\n          tag=\"a\"\r\n          href=\"https://github.com/atlassian/react-beautiful-dnd\"\r\n          target=\"_blank\"\r\n          color=\"link\"\r\n          size=\"sm\"\r\n          className=\"pl-0\"\r\n        >\r\n          React Beautiful DnD Documentation\r\n          <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\r\n        </Button>\r\n      </PageHeader>\r\n      <Card>\r\n        <CardHeader className=\"bg-light\">\r\n          <h4 className=\"mb-0\">Example</h4>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Row>\r\n            <Col>\r\n              <FalconEditor\r\n                code={DragAndDropCode}\r\n                scope={{ DragDropContext, Droppable, Draggable, data, setData, onDragEnd, getListStyle, getItemStyle }}\r\n                language=\"jsx\"\r\n              />\r\n              {/* <PurchasesTable /> */}\r\n            </Col>\r\n          </Row>\r\n        </CardBody>\r\n      </Card>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ReactBootstrapTable2;\r\n"]},"metadata":{},"sourceType":"module"}