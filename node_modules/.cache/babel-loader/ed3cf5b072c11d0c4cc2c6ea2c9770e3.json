{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/components/plugins/Leaflet.js\";\nimport React, { Fragment } from 'react';\nimport PageHeader from '../common/PageHeader';\nimport { Button, Card, CardBody, CardHeader } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport 'leaflet/dist/leaflet.css';\nimport { Map } from 'react-leaflet';\nimport MarkerCluster from '../dashboard/MarkerCluster';\nimport 'leaflet.tilelayer.colorfilter';\nimport L from 'leaflet';\nimport { useContext } from 'react';\nimport AppContext from '../../context/Context';\nimport FalconEditor from '../common/FalconEditor';\nimport { useRef } from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nconst leafletCode = `function LeafletMap  () {\n  const { isDark } = useContext(AppContext);\n  \n  const markers = [\n    {\n      lat: 53.958332,\n      long: -1.080278,\n      name: 'Diana Meyer',\n      street: 'Slude Strand 27',\n      location: '1130 Kobenhavn'\n    },\n    {\n      lat: 52.958332,\n      long: -1.080278,\n      name: 'Diana Meyer',\n      street: 'Slude Strand 27',\n      location: '1130 Kobenhavn'\n    },\n    {\n      lat: 51.958332,\n      long: -1.080278,\n      name: 'Diana Meyer',\n      street: 'Slude Strand 27',\n      location: '1130 Kobenhavn'\n    },]\n  const filter = isDark\n    ? ['invert:98%', 'grayscale:69%', 'bright:89%', 'contrast:111%', 'hue:205deg', 'saturate:1000%']\n    : ['bright:101%', 'contrast:101%', 'hue:23deg', 'saturate:225%'];\n\n\n  if(mapWidth){\n    useEffect(() => {\n      L.tileLayer\n        .colorFilter('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\n          attribution: null,\n          transparent: true,\n          filter: filter\n        })\n        .addTo(map.current.leafletElement);\n    }, [filter]);\n    return (\n      <Map\n        center={[10.737, 0]}\n        zoom={1}\n        minZoom={1}\n        maxZoom={18}\n        zoomSnap={0.5}\n        className=\"h-100 w-100\"\n        style={{ width:mapWidth, minHeight: 300 }}\n        ref={map}\n      >\n        <MarkerCluster markers={markers} />\n      </Map>\n    );\n  }\n  return null;\n};`;\n\nconst Leaflet = () => {\n  const {\n    isDark\n  } = useContext(AppContext);\n  let map = useRef(null);\n  const [mapWidth, setMapWidth] = useState();\n  const egMap = useRef();\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setMapWidth(egMap.current.offsetWidth);\n    }, 500);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [isDark, mapWidth]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PageHeader, {\n    title: \"React Leaflet\",\n    description: \"We uses <code> react-Leaflet </code> that provides an abstraction of <strong>Leaflet</strong> as <strong>React components</strong>. For the beautiful animated marker Clustering functionality for leaflet map we use <a href='https://www.npmjs.com/package/leaflet.markercluster' target='_blank' >Leaflet.markercluster</a> and we apply CSS color filter on map tiles by <a href='https://github.com/xtk93x/Leaflet.TileLayer.ColorFilter' target='_blank' >Leaflet.TileLayer.ColorFilter</a> .  It has all the mapping features most developers ever need \",\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    tag: \"a\",\n    href: \"https://react-leaflet.js.org/\",\n    target: \"_blank\",\n    color: \"link\",\n    size: \"sm\",\n    className: \"pl-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, \"React Leaflet Documentation\", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"chevron-right\",\n    className: \"ml-1 fs--2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Card, {\n    innerRef: egMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"bg-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, \"Example\")), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"p-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FalconEditor, {\n    code: leafletCode,\n    scope: {\n      AppContext,\n      MarkerCluster,\n      Map,\n      map,\n      mapWidth,\n      L\n    },\n    language: \"jsx\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default Leaflet;","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/components/plugins/Leaflet.js"],"names":["React","Fragment","PageHeader","Button","Card","CardBody","CardHeader","FontAwesomeIcon","Map","MarkerCluster","L","useContext","AppContext","FalconEditor","useRef","useEffect","useState","leafletCode","Leaflet","isDark","map","mapWidth","setMapWidth","egMap","timer","setTimeout","current","offsetWidth","clearTimeout"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport PageHeader from '../common/PageHeader';\r\nimport { Button, Card, CardBody, CardHeader } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { Map } from 'react-leaflet';\r\nimport MarkerCluster from '../dashboard/MarkerCluster';\r\nimport 'leaflet.tilelayer.colorfilter';\r\nimport L from 'leaflet';\r\nimport { useContext } from 'react';\r\nimport AppContext from '../../context/Context';\r\nimport FalconEditor from '../common/FalconEditor';\r\nimport { useRef } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\n\r\nconst leafletCode = `function LeafletMap  () {\r\n  const { isDark } = useContext(AppContext);\r\n  \r\n  const markers = [\r\n    {\r\n      lat: 53.958332,\r\n      long: -1.080278,\r\n      name: 'Diana Meyer',\r\n      street: 'Slude Strand 27',\r\n      location: '1130 Kobenhavn'\r\n    },\r\n    {\r\n      lat: 52.958332,\r\n      long: -1.080278,\r\n      name: 'Diana Meyer',\r\n      street: 'Slude Strand 27',\r\n      location: '1130 Kobenhavn'\r\n    },\r\n    {\r\n      lat: 51.958332,\r\n      long: -1.080278,\r\n      name: 'Diana Meyer',\r\n      street: 'Slude Strand 27',\r\n      location: '1130 Kobenhavn'\r\n    },]\r\n  const filter = isDark\r\n    ? ['invert:98%', 'grayscale:69%', 'bright:89%', 'contrast:111%', 'hue:205deg', 'saturate:1000%']\r\n    : ['bright:101%', 'contrast:101%', 'hue:23deg', 'saturate:225%'];\r\n\r\n\r\n  if(mapWidth){\r\n    useEffect(() => {\r\n      L.tileLayer\r\n        .colorFilter('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n          attribution: null,\r\n          transparent: true,\r\n          filter: filter\r\n        })\r\n        .addTo(map.current.leafletElement);\r\n    }, [filter]);\r\n    return (\r\n      <Map\r\n        center={[10.737, 0]}\r\n        zoom={1}\r\n        minZoom={1}\r\n        maxZoom={18}\r\n        zoomSnap={0.5}\r\n        className=\"h-100 w-100\"\r\n        style={{ width:mapWidth, minHeight: 300 }}\r\n        ref={map}\r\n      >\r\n        <MarkerCluster markers={markers} />\r\n      </Map>\r\n    );\r\n  }\r\n  return null;\r\n};`;\r\nconst Leaflet = () => {\r\n  const { isDark } = useContext(AppContext);\r\n  let map = useRef(null);\r\n  const [mapWidth, setMapWidth] = useState();\r\n\r\n  const egMap = useRef();\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setMapWidth(egMap.current.offsetWidth);\r\n    }, 500);\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [isDark, mapWidth]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <PageHeader\r\n        title=\"React Leaflet\"\r\n        description=\"We uses <code> react-Leaflet </code> that provides an abstraction of <strong>Leaflet</strong> as <strong>React components</strong>. For the beautiful animated marker Clustering functionality for leaflet map we use <a href='https://www.npmjs.com/package/leaflet.markercluster' target='_blank' >Leaflet.markercluster</a> and we apply CSS color filter on map tiles by <a href='https://github.com/xtk93x/Leaflet.TileLayer.ColorFilter' target='_blank' >Leaflet.TileLayer.ColorFilter</a> .  It has all the mapping features most developers ever need \"\r\n        className=\"mb-3\"\r\n      >\r\n        <Button tag=\"a\" href=\"https://react-leaflet.js.org/\" target=\"_blank\" color=\"link\" size=\"sm\" className=\"pl-0\">\r\n          React Leaflet Documentation\r\n          <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\r\n        </Button>\r\n      </PageHeader>\r\n      <Card innerRef={egMap}>\r\n        <CardHeader className=\"bg-light\">\r\n          <h4 className=\"mb-0\">Example</h4>\r\n        </CardHeader>\r\n\r\n        <CardBody className=\"p-0\">\r\n          <FalconEditor\r\n            code={leafletCode}\r\n            scope={{ AppContext, MarkerCluster, Map, map, mapWidth, L }}\r\n            language=\"jsx\"\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Leaflet;\r\n"]},"metadata":{},"sourceType":"module"}