{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/components/email/inbox/InboxBody.js\";\nimport React, { Fragment, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Loader from '../../common/Loader';\nimport { isIterableArray } from '../../../helpers/utils';\nimport EmailRow from './InboxRow';\nimport { Alert, CardBody } from 'reactstrap';\nimport classNames from 'classnames';\nimport { EmailContext } from '../../../context/Context';\nimport useFakeFetch from '../../../hooks/useFakeFetch';\nimport rawEmails from '../../../data/email/emails';\n\nconst InboxTitle = ({\n  className,\n  children,\n  ...rest\n}) => /*#__PURE__*/React.createElement(\"h5\", Object.assign({\n  className: classNames('fs-0 px-3 pt-3 pb-2 mb-0 border-bottom border-200', className)\n}, rest, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 3\n  }\n}), children);\n\nInboxTitle.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string\n};\n\nconst InboxBody = ({\n  isSelectedItem,\n  toggleSelectedItem,\n  currentItems\n}) => {\n  // Context\n  const {\n    emails,\n    setEmails\n  } = useContext(EmailContext); // State\n\n  const {\n    loading,\n    data\n  } = useFakeFetch(rawEmails);\n  const unreadEmails = emails.filter(email => !email.read && currentItems.includes(email.id));\n  const otherEmails = emails.filter(email => email.read && currentItems.includes(email.id));\n  useEffect(() => {\n    setEmails(data);\n  }, [data, setEmails]);\n  return /*#__PURE__*/React.createElement(CardBody, {\n    className: \"fs--1 border-top border-200 p-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, loading ? /*#__PURE__*/React.createElement(Loader, {\n    type: \"border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }) : isIterableArray(emails) ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, isIterableArray(unreadEmails) && /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InboxTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 15\n    }\n  }, \"Unread\"), unreadEmails.map(email => /*#__PURE__*/React.createElement(EmailRow, Object.assign({}, email, {\n    key: email.id,\n    toggleSelectedItem: toggleSelectedItem,\n    isSelectedItem: isSelectedItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  })))), isIterableArray(otherEmails) && /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InboxTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, \"Everything else\"), otherEmails.map(email => /*#__PURE__*/React.createElement(EmailRow, Object.assign({}, email, {\n    key: email.id,\n    toggleSelectedItem: toggleSelectedItem,\n    isSelectedItem: isSelectedItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }))))) : /*#__PURE__*/React.createElement(Alert, {\n    color: \"info\",\n    className: \"mb-0 rounded-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"alert-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"Inbox empty!\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, \"Emails will be shown here automatically.\")));\n};\n\nInboxBody.propTypes = {\n  isSelectedItem: PropTypes.func.isRequired,\n  toggleSelectedItem: PropTypes.func.isRequired,\n  currentItems: PropTypes.array.isRequired\n};\nexport default InboxBody;","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/components/email/inbox/InboxBody.js"],"names":["React","Fragment","useContext","useEffect","PropTypes","Loader","isIterableArray","EmailRow","Alert","CardBody","classNames","EmailContext","useFakeFetch","rawEmails","InboxTitle","className","children","rest","propTypes","node","isRequired","string","InboxBody","isSelectedItem","toggleSelectedItem","currentItems","emails","setEmails","loading","data","unreadEmails","filter","email","read","includes","id","otherEmails","map","func","array"],"mappings":"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","sourcesContent":["import React, { Fragment, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Loader from '../../common/Loader';\nimport { isIterableArray } from '../../../helpers/utils';\nimport EmailRow from './InboxRow';\nimport { Alert, CardBody } from 'reactstrap';\nimport classNames from 'classnames';\nimport { EmailContext } from '../../../context/Context';\nimport useFakeFetch from '../../../hooks/useFakeFetch';\nimport rawEmails from '../../../data/email/emails';\n\nconst InboxTitle = ({ className, children, ...rest }) => (\n  <h5 className={classNames('fs-0 px-3 pt-3 pb-2 mb-0 border-bottom border-200', className)} {...rest}>\n    {children}\n  </h5>\n);\n\nInboxTitle.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string\n};\n\nconst InboxBody = ({ isSelectedItem, toggleSelectedItem, currentItems }) => {\n  // Context\n  const { emails, setEmails } = useContext(EmailContext);\n\n  // State\n  const { loading, data } = useFakeFetch(rawEmails);\n  const unreadEmails = emails.filter(email => !email.read && currentItems.includes(email.id));\n  const otherEmails = emails.filter(email => email.read && currentItems.includes(email.id));\n\n  useEffect(() => {\n    setEmails(data);\n  }, [data, setEmails]);\n\n  return (\n    <CardBody className=\"fs--1 border-top border-200 p-0\">\n      {loading ? (\n        <Loader type=\"border\" />\n      ) : isIterableArray(emails) ? (\n        <Fragment>\n          {isIterableArray(unreadEmails) && (\n            <Fragment>\n              <InboxTitle>Unread</InboxTitle>\n              {unreadEmails.map(email => (\n                <EmailRow\n                  {...email}\n                  key={email.id}\n                  toggleSelectedItem={toggleSelectedItem}\n                  isSelectedItem={isSelectedItem}\n                />\n              ))}\n            </Fragment>\n          )}\n\n          {isIterableArray(otherEmails) && (\n            <Fragment>\n              <InboxTitle>Everything else</InboxTitle>\n              {otherEmails.map(email => (\n                <EmailRow\n                  {...email}\n                  key={email.id}\n                  toggleSelectedItem={toggleSelectedItem}\n                  isSelectedItem={isSelectedItem}\n                />\n              ))}\n            </Fragment>\n          )}\n        </Fragment>\n      ) : (\n        <Alert color=\"info\" className=\"mb-0 rounded-0\">\n          <h5 className=\"alert-heading\">Inbox empty!</h5>\n          <hr />\n          <p className=\"mb-0\">Emails will be shown here automatically.</p>\n        </Alert>\n      )}\n    </CardBody>\n  );\n};\n\nInboxBody.propTypes = {\n  isSelectedItem: PropTypes.func.isRequired,\n  toggleSelectedItem: PropTypes.func.isRequired,\n  currentItems: PropTypes.array.isRequired\n};\n\nexport default InboxBody;\n"]},"metadata":{},"sourceType":"module"}