{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/components/bootstrap-components/Tooltips.js\";\nimport React, { Fragment } from 'react';\nimport { Button, Card, CardBody } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nconst tooltipsExampleCode = `function tooltipsExampleCode() {\n  const [isOpenLeft, setIsOpenLeft] = useState(false);\n  const [isOpenRight, setIsOpenRight] = useState(false);\n  const [isOpenTop, setIsOpenTop] = useState(false);\n  const [isOpenBottom, setIsOpenBottom] = useState(false);\n\n  return (\n    <Fragment>\n      <Button size=\"sm\" color=\"secondary\" className=\"m-1\" id=\"pop3\">\n         Tooltip on top\n      </Button>\n      <Tooltip\n        placement=\"top\"\n        isOpen={isOpenTop}\n        target=\"pop3\"\n        toggle={() => setIsOpenTop(!isOpenTop)}>\n         Tooltip on top\n      </Tooltip>\n\n      <Button size=\"sm\" color=\"secondary\" className=\"m-1\" id=\"pop4\">\n        Tooltip on bottom\n      </Button>\n      <Tooltip\n        placement=\"bottom\"\n        isOpen={isOpenBottom}\n        target=\"pop4\"\n        toggle={() => setIsOpenBottom(!isOpenBottom)}\n        container='.content'\n      >\n        Tooltip on bottom\n      </Tooltip>\n\n      <Button size=\"sm\" color=\"secondary\" className=\"m-1\" id=\"pop1\">\n         Tooltip on left\n      </Button>\n      <Tooltip\n        placement=\"left\"\n        isOpen={isOpenLeft}\n        target=\"pop1\"\n        toggle={() => setIsOpenLeft(!isOpenLeft)}\n      >\n         Tooltip on left\n      </Tooltip>\n\n      <Button size=\"sm\" color=\"secondary\" className=\"m-1\" id=\"pop2\">\n       Tooltip on right\n      </Button>\n      <Tooltip\n        placement=\"right\"\n        isOpen={isOpenRight}\n        target=\"pop2\"\n        toggle={() => setIsOpenRight(!isOpenRight)}\n      >\n        Tooltip on right\n      </Tooltip>\n    </Fragment>\n  );\n}`;\nconst propertyCode = `Tooltip.propTypes = {\n  // space separated list of triggers (e.g. \"click hover focus\")\n  trigger: PropTypes.string,\n  // boundaries for popper, can be scrollParent, window, viewport, or any DOM element\n  boundariesElement: PropTypes.oneOfType([PropTypes.string, DOMElement]),\n  // boolean to control the state of the tooltip\n  isOpen: PropTypes.bool,\n  hideArrow: PropTypes.bool,\n  // callback for toggling isOpen in the controlling component. It will receive an object with info about the event that triggered it\n  toggle: PropTypes.func,\n  // target element or element ID, popover is attached to this element\n  target:  PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n    DOMElement, // instanceof Element (https://developer.mozilla.org/en-US/docs/Web/API/Element)\n  ]).isRequired,\n  // Where to inject the popper DOM node, default to body\n  container: PropTypes.oneOfType([PropTypes.string, PropTypes.func, DOMElement]),\n  // optionally override show/hide delays - default { show: 0, hide: 250 }\n  delay: PropTypes.oneOfType([\n    PropTypes.shape({ show: PropTypes.number, hide: PropTypes.number }),\n    PropTypes.number\n  ]),\n  className: PropTypes.string,\n  // Apply class to the inner-tooltip\n  innerClassName: PropTypes.string,\n  // Apply class to the arrow-tooltip ('arrow' by default)\n  arrowClassName: PropTypes.string,\n  // optionally hide tooltip when hovering over tooltip content - default true\n  autohide: PropTypes.bool,\n  // convenience attachments for popover\n  placement: PropTypes.oneOf([\n    'auto',\n    'auto-start',\n    'auto-end',\n    'top',\n    'top-start',\n    'top-end',\n    'right',\n    'right-start',\n    'right-end',\n    'bottom',\n    'bottom-start',\n    'bottom-end',\n    'left',\n    'left-start',\n    'left-end',\n  ]),\n  // Custom modifiers that are passed to Popper.js, see https://popper.js.org/popper-documentation.html#modifiers\n  modifiers: PropTypes.object,\n  offset: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number\n  ]),\n  // Custom ref handler that will be assigned to the \"ref\" of the <div> wrapping the tooltip elements\n  innerRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.object\n  ]),\n\n  // Whether to show/hide the popover with a fade effect\n  // (default: true)\n  fade: PropTypes.bool,\n\n  // Whether to flip the direction of the popover if too close to\n  // the container edge\n  // (default: true)\n  flip: PropTypes.bool,\n}`;\n\nconst Tooltips = () => {\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PageHeader, {\n    title: \"Tooltips\",\n    description: \"Documentation and examples for adding Falcon tooltips with CSS and JavaScript using CSS3 for animations and data-attributes for local title storage.\",\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    tag: \"a\",\n    href: \"https://reactstrap.github.io/components/tooltips\",\n    target: \"_blank\",\n    color: \"link\",\n    size: \"sm\",\n    className: \"pl-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, \"Tooltips on reactstrap\", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"chevron-right\",\n    className: \"ml-1 fs--2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Card, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FalconCardHeader, {\n    title: \"Example\",\n    light: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"bg-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FalconEditor, {\n    code: tooltipsExampleCode,\n    language: \"jsx\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FalconCardHeader, {\n    title: \"Property\",\n    light: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"bg-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    className: \"bg-dark d-block p-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"pre\", {\n    className: \"text-300\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }, propertyCode)))));\n};\n\nexport default Tooltips;","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/components/bootstrap-components/Tooltips.js"],"names":["React","Fragment","Button","Card","CardBody","FontAwesomeIcon","PageHeader","FalconCardHeader","FalconEditor","tooltipsExampleCode","propertyCode","Tooltips"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,QAAuC,YAAvC;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AAEA,MAAMC,mBAAmB,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAA7B;AA2DA,MAAMC,YAAY,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAtB;;AAuEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AACE,IAAA,KAAK,EAAC,UADR;AAEE,IAAA,WAAW,EAAC,sJAFd;AAGE,IAAA,SAAS,EAAC,MAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,MAAD;AACE,IAAA,GAAG,EAAC,GADN;AAEE,IAAA,IAAI,EAAC,kDAFP;AAGE,IAAA,MAAM,EAAC,QAHT;AAIE,IAAA,KAAK,EAAC,MAJR;AAKE,IAAA,IAAI,EAAC,IALP;AAME,IAAA,SAAS,EAAC,MANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CASE,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAC,eAAtB;AAAsC,IAAA,SAAS,EAAC,YAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CALF,CADF,eAkBE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAC,SAAxB;AAAkC,IAAA,KAAK,EAAE,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAEF,mBAApB;AAAyC,IAAA,QAAQ,EAAC,KAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CAlBF,eAwBE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAC,UAAxB;AAAmC,IAAA,KAAK,EAAE,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAC,qBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BC,YAA3B,CADF,CADF,CAFF,CAxBF,CADF;AAmCD,CApCD;;AAsCA,eAAeC,QAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport { Button, Card, CardBody } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\n\nconst tooltipsExampleCode = `function tooltipsExampleCode() {\n  const [isOpenLeft, setIsOpenLeft] = useState(false);\n  const [isOpenRight, setIsOpenRight] = useState(false);\n  const [isOpenTop, setIsOpenTop] = useState(false);\n  const [isOpenBottom, setIsOpenBottom] = useState(false);\n\n  return (\n    <Fragment>\n      <Button size=\"sm\" color=\"secondary\" className=\"m-1\" id=\"pop3\">\n         Tooltip on top\n      </Button>\n      <Tooltip\n        placement=\"top\"\n        isOpen={isOpenTop}\n        target=\"pop3\"\n        toggle={() => setIsOpenTop(!isOpenTop)}>\n         Tooltip on top\n      </Tooltip>\n\n      <Button size=\"sm\" color=\"secondary\" className=\"m-1\" id=\"pop4\">\n        Tooltip on bottom\n      </Button>\n      <Tooltip\n        placement=\"bottom\"\n        isOpen={isOpenBottom}\n        target=\"pop4\"\n        toggle={() => setIsOpenBottom(!isOpenBottom)}\n        container='.content'\n      >\n        Tooltip on bottom\n      </Tooltip>\n\n      <Button size=\"sm\" color=\"secondary\" className=\"m-1\" id=\"pop1\">\n         Tooltip on left\n      </Button>\n      <Tooltip\n        placement=\"left\"\n        isOpen={isOpenLeft}\n        target=\"pop1\"\n        toggle={() => setIsOpenLeft(!isOpenLeft)}\n      >\n         Tooltip on left\n      </Tooltip>\n\n      <Button size=\"sm\" color=\"secondary\" className=\"m-1\" id=\"pop2\">\n       Tooltip on right\n      </Button>\n      <Tooltip\n        placement=\"right\"\n        isOpen={isOpenRight}\n        target=\"pop2\"\n        toggle={() => setIsOpenRight(!isOpenRight)}\n      >\n        Tooltip on right\n      </Tooltip>\n    </Fragment>\n  );\n}`;\n\nconst propertyCode = `Tooltip.propTypes = {\n  // space separated list of triggers (e.g. \"click hover focus\")\n  trigger: PropTypes.string,\n  // boundaries for popper, can be scrollParent, window, viewport, or any DOM element\n  boundariesElement: PropTypes.oneOfType([PropTypes.string, DOMElement]),\n  // boolean to control the state of the tooltip\n  isOpen: PropTypes.bool,\n  hideArrow: PropTypes.bool,\n  // callback for toggling isOpen in the controlling component. It will receive an object with info about the event that triggered it\n  toggle: PropTypes.func,\n  // target element or element ID, popover is attached to this element\n  target:  PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n    DOMElement, // instanceof Element (https://developer.mozilla.org/en-US/docs/Web/API/Element)\n  ]).isRequired,\n  // Where to inject the popper DOM node, default to body\n  container: PropTypes.oneOfType([PropTypes.string, PropTypes.func, DOMElement]),\n  // optionally override show/hide delays - default { show: 0, hide: 250 }\n  delay: PropTypes.oneOfType([\n    PropTypes.shape({ show: PropTypes.number, hide: PropTypes.number }),\n    PropTypes.number\n  ]),\n  className: PropTypes.string,\n  // Apply class to the inner-tooltip\n  innerClassName: PropTypes.string,\n  // Apply class to the arrow-tooltip ('arrow' by default)\n  arrowClassName: PropTypes.string,\n  // optionally hide tooltip when hovering over tooltip content - default true\n  autohide: PropTypes.bool,\n  // convenience attachments for popover\n  placement: PropTypes.oneOf([\n    'auto',\n    'auto-start',\n    'auto-end',\n    'top',\n    'top-start',\n    'top-end',\n    'right',\n    'right-start',\n    'right-end',\n    'bottom',\n    'bottom-start',\n    'bottom-end',\n    'left',\n    'left-start',\n    'left-end',\n  ]),\n  // Custom modifiers that are passed to Popper.js, see https://popper.js.org/popper-documentation.html#modifiers\n  modifiers: PropTypes.object,\n  offset: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number\n  ]),\n  // Custom ref handler that will be assigned to the \"ref\" of the <div> wrapping the tooltip elements\n  innerRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.object\n  ]),\n\n  // Whether to show/hide the popover with a fade effect\n  // (default: true)\n  fade: PropTypes.bool,\n\n  // Whether to flip the direction of the popover if too close to\n  // the container edge\n  // (default: true)\n  flip: PropTypes.bool,\n}`;\n\nconst Tooltips = () => {\n  return (\n    <Fragment>\n      <PageHeader\n        title=\"Tooltips\"\n        description=\"Documentation and examples for adding Falcon tooltips with CSS and JavaScript using CSS3 for animations and data-attributes for local title storage.\"\n        className=\"mb-3\"\n      >\n        <Button\n          tag=\"a\"\n          href=\"https://reactstrap.github.io/components/tooltips\"\n          target=\"_blank\"\n          color=\"link\"\n          size=\"sm\"\n          className=\"pl-0\"\n        >\n          Tooltips on reactstrap\n          <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n        </Button>\n      </PageHeader>\n      <Card className=\"mb-3\">\n        <FalconCardHeader title=\"Example\" light={false} />\n        <CardBody className=\"bg-light\">\n          <FalconEditor code={tooltipsExampleCode} language=\"jsx\" />\n        </CardBody>\n      </Card>\n      <Card>\n        <FalconCardHeader title=\"Property\" light={false} />\n        <CardBody className=\"bg-light\">\n          <code className=\"bg-dark d-block p-2\">\n            <pre className=\"text-300\">{propertyCode}</pre>\n          </code>\n        </CardBody>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default Tooltips;\n"]},"metadata":{},"sourceType":"module"}