{"ast":null,"code":"var _jsxFileName = \"/Users/greypro/Documents/Dev/letter/letter-support/src/components/education/Education.js\";\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { isIterableArray } from '../../helpers/utils';\nimport { Card, CardBody, UncontrolledCollapse } from 'reactstrap';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport EducationSummary from './EducationSummary';\nimport Loader from '../common/Loader';\nimport EducationForm from './EducationForm';\nimport Flex from '../common/Flex';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport useFakeFetch from '../../hooks/useFakeFetch';\n\nconst Education = ({\n  educations: rawEducations,\n  isEditable,\n  ...rest\n}) => {\n  // Data\n  const {\n    loading: loadingEducations,\n    data: educations,\n    setData: setEducations\n  } = useFakeFetch(rawEducations);\n  return /*#__PURE__*/React.createElement(Card, Object.assign({}, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(FalconCardHeader, {\n    title: \"Education\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"fs--1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, isEditable && /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Flex, {\n    align: \"center\",\n    className: \"mb-4 text-primary cursor-pointer fs-0\",\n    id: \"togglerAddEducation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"circle-dashed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"plus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ml-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 15\n    }\n  }, \"Add new education\")), /*#__PURE__*/React.createElement(UncontrolledCollapse, {\n    toggler: \"#togglerAddEducation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(EducationForm, {\n    educations: educations,\n    setEducations: setEducations,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"hr\", {\n    className: \"border-dashed border-bottom-0 my-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 15\n    }\n  }))), loadingEducations ? /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }) : isIterableArray(educations) && educations.map((education, index) => /*#__PURE__*/React.createElement(EducationSummary, Object.assign({}, education, {\n    isEditable: isEditable,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 48\n    }\n  })))));\n};\n\nEducation.propTypes = {\n  educations: PropTypes.array,\n  isEditable: PropTypes.bool\n};\nEducation.defaultProps = {\n  isEditable: false\n};\nexport default Education;","map":{"version":3,"sources":["/Users/greypro/Documents/Dev/letter/letter-support/src/components/education/Education.js"],"names":["React","Fragment","PropTypes","isIterableArray","Card","CardBody","UncontrolledCollapse","FalconCardHeader","EducationSummary","Loader","EducationForm","Flex","FontAwesomeIcon","useFakeFetch","Education","educations","rawEducations","isEditable","rest","loading","loadingEducations","data","setData","setEducations","map","education","index","propTypes","array","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { isIterableArray } from '../../helpers/utils';\nimport { Card, CardBody, UncontrolledCollapse } from 'reactstrap';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport EducationSummary from './EducationSummary';\nimport Loader from '../common/Loader';\nimport EducationForm from './EducationForm';\nimport Flex from '../common/Flex';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport useFakeFetch from '../../hooks/useFakeFetch';\n\nconst Education = ({ educations: rawEducations, isEditable, ...rest }) => {\n  // Data\n  const { loading: loadingEducations, data: educations, setData: setEducations } = useFakeFetch(rawEducations);\n\n  return (\n    <Card {...rest}>\n      <FalconCardHeader title=\"Education\" />\n      <CardBody className=\"fs--1\">\n        {isEditable && (\n          <Fragment>\n            <Flex align=\"center\" className=\"mb-4 text-primary cursor-pointer fs-0\" id=\"togglerAddEducation\">\n              <span className=\"circle-dashed\">\n                <FontAwesomeIcon icon=\"plus\" />\n              </span>\n              <span className=\"ml-3\">Add new education</span>\n            </Flex>\n            <UncontrolledCollapse toggler=\"#togglerAddEducation\">\n              <EducationForm educations={educations} setEducations={setEducations} />\n              <hr className=\"border-dashed border-bottom-0 my-4\" />\n            </UncontrolledCollapse>\n          </Fragment>\n        )}\n        {loadingEducations ? (\n          <Loader />\n        ) : (\n          isIterableArray(educations) &&\n          educations.map((education, index) => <EducationSummary {...education} isEditable={isEditable} key={index} />)\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nEducation.propTypes = {\n  educations: PropTypes.array,\n  isEditable: PropTypes.bool\n};\n\nEducation.defaultProps = { isEditable: false };\n\nexport default Education;\n"]},"metadata":{},"sourceType":"module"}