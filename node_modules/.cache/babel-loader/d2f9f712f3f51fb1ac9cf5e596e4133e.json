{"ast":null,"code":"var _jsxFileName = \"/Users/greypro/Documents/Dev/letter/letter-support/src/components/bootstrap-components/Forms.js\";\nimport React, { Fragment } from 'react';\nimport { Button, Card, CardBody, Col, Row } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nimport PageHeader from '../common/PageHeader';\nimport Flex from '../common/Flex';\nconst basicFormCode = `<Form>\n  <FormGroup>\n    <Label for=\"exampleName\">Name</Label>\n    <Input type=\"text\" name=\"name\" id=\"exampleName\" placeholder=\"Name\" />\n  </FormGroup>\n  <FormGroup>\n    <Label for=\"readonly\">Read Only</Label>\n    <Input type=\"text\" name=\"readonly\" id=\"readonly\" placeholder=\"Readonly input here...\" disabled />\n  </FormGroup>\n  <FormGroup>\n    <Label for=\"exampleEmail\">Read only plain text</Label>\n    <Input plaintext value=\"email@example.com\" onChange={() => {}} />\n  </FormGroup>\n  <FormGroup>\n    <Label for=\"exampleEmail\">Email</Label>\n    <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"Email\" />\n  </FormGroup>\n  <FormGroup>\n    <Label for=\"examplePassword\">Password</Label>\n    <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"Password\" />\n  </FormGroup>\n  <FormGroup className=\"form-check\">\n    <Input type=\"checkbox\" name=\"check\" id=\"exampleCheck\" />\n    <Label for=\"exampleCheck\" check>\n      Checkbox\n    </Label>\n  </FormGroup>\n  <FormGroup className=\"form-check\">\n    <Input type=\"checkbox\" name=\"check\" id=\"exampleCheck1\" disabled />\n    <Label for=\"exampleCheck1\" check>\n      Disabled checkbox\n    </Label>\n  </FormGroup>\n  <FormGroup className=\"form-check\">\n  <Input type=\"radio\" name=\"radio1\" defaultChecked />\n    <Label check>\n      Default Radio\n    </Label>\n  </FormGroup>\n  <FormGroup className=\"form-check\">\n   <Input type=\"radio\" name=\"radio1\" disabled /> \n    <Label check>\n     Disabled Radio\n    </Label>\n  </FormGroup>\n    <FormGroup>\n      <Label for=\"exampleFile\">Example file input</Label>\n      <Input type=\"file\" name=\"file\" id=\"exampleFile\" />\n     </FormGroup>\n  <FormGroup>\n    <Label for=\"exampleSelect\">Example Select</Label>\n    <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </Input>\n  </FormGroup>\n  <FormGroup>\n    <Label for=\"exampleSelectMulti\">Example Multiple Select</Label>\n    <Input type=\"select\" name=\"selectMulti\" id=\"exampleSelectMulti\" multiple>\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </Input>\n  </FormGroup>\n  <FormGroup>\n    <Label for=\"exampleText\">Example textarea</Label>\n    <Input type=\"textarea\" name=\"text\" id=\"exampleText\" />\n  </FormGroup>\n  <Button color=\"primary\">Save</Button>\n</Form>`;\nconst inputGroupCode = `function InputGroupExample () {\n  const [isOpenOne, setIsOpenOne] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  \n  return (\n    <div>\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">@</InputGroupAddon>\n        <Input placeholder=\"username\" />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <Input placeholder=\"Recipient's username\" />\n        <InputGroupAddon addonType=\"append\">\n          <InputGroupText>@example.com</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n      <br />\n      <Label for=\"yourVanityURl\">Your vanity URL</Label>\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">https:example.com/users/</InputGroupAddon>\n        <Input />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">$</InputGroupAddon>\n        <Input />\n        <InputGroupAddon addonType=\"append\">.00</InputGroupAddon>\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">With textarea</InputGroupAddon>\n        <Input type=\"textarea\" />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">\n          <InputGroupText>\n            <Input addon type=\"checkbox\" aria-label=\"Checkbox for following text input\" />\n          </InputGroupText>\n        </InputGroupAddon>\n        <Input />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">\n          <InputGroupText>\n            <Input addon type=\"radio\" aria-label=\"Checkbox for following text input\" />\n          </InputGroupText>\n        </InputGroupAddon>\n        <Input />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">First and last name</InputGroupAddon>\n        <Input />\n        <Input />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">\n          <InputGroupText>$</InputGroupText>\n          <InputGroupText>0.00</InputGroupText>\n        </InputGroupAddon>\n        <Input />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <Input />\n        <InputGroupAddon addonType=\"append\">\n          <InputGroupText>$</InputGroupText>\n          <InputGroupText>0.00</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupButtonDropdown \n          addonType=\"append\"\n          isOpen={isOpenOne} \n          toggle={() => setIsOpenOne(!isOpenOne)}\n        >\n          <DropdownToggle color=\"primary\" caret>\n            Dropdown\n          </DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem header>Header</DropdownItem>\n            <DropdownItem disabled>Action</DropdownItem>\n            <DropdownItem>Something else here</DropdownItem>\n            <DropdownItem divider />\n            <DropdownItem>Separated link</DropdownItem>\n          </DropdownMenu>\n        </InputGroupButtonDropdown>\n        <Input />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <Input />\n        <InputGroupButtonDropdown \n          addonType=\"append\" \n          isOpen={isOpenTwo} \n          toggle={() => setIsOpenTwo(!isOpenTwo)}\n        >\n          <DropdownToggle color=\"primary\" caret>\n            Dropdown\n          </DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem header>Header</DropdownItem>\n            <DropdownItem disabled>Action</DropdownItem>\n            <DropdownItem>Something else here</DropdownItem>\n            <DropdownItem divider />\n            <DropdownItem>Separated link</DropdownItem>\n          </DropdownMenu>\n        </InputGroupButtonDropdown>\n      </InputGroup>\n    </div>\n  )\n}`;\nconst customCheckboxCode = `<Fragment>\n  <CustomInput\n    type=\"checkbox\"\n    id=\"customCheck1\"\n    label=\"Check this custom checkbox\"\n    className=\"mb-0\"\n    />\n  <CustomInput \n    type=\"checkbox\" \n    id=\"customCheck2\" \n    label=\"Check another custom checkbox\" \n  />\n</Fragment>\n`;\nconst customRadioCode = `<Fragment>\n  <CustomInput\n    type=\"radio\"\n    id=\"customRadio1\"\n    name=\"customRadio\"\n    label=\"Toggle this custom radio\"\n    className=\"mb-0\"\n  />\n  <CustomInput\n    type=\"radio\"\n    id=\"customRadio2\"\n    name=\"customRadio\"\n    label=\"Or toggle this other custom radio\"\n  />\n</Fragment>`;\nconst InlineRadioCode = `<FormGroup>\n  <Label for=\"selectOption\">\n    Select one option\n  </Label>\n  <div>\n    <CustomInput \n      type=\"radio\" \n      name=\"exampleCustomInlineRadio\" \n      id=\"exampleCustomInlineRadio\" \n      label=\"Toggle\" \n      inline \n    />\n    <CustomInput \n      type=\"radio\" \n      name=\"exampleCustomInlineRadio\" \n      id=\"exampleCustomInlineRadio2\" \n      label=\"and another one\" \n      inline \n    />\n  </div>\n</FormGroup>`;\nconst disabledInputFieldsCode = `<Fragment>\n  <CustomInput\n    type=\"checkbox\"\n    id=\"customCheckboxDisabled2\"\n    label=\"Check this custom checkbox\"\n    disabled\n  />\n  <CustomInput\n    type=\"radio\"\n    id=\"customRadioDisabled2\"\n    name=\"radioDisabled\"\n    label=\"Toggle this custom radio\"\n    disabled\n  />\n</Fragment>`;\nconst customSwitchCode = `<CustomInput\n    type=\"switch\"\n    id=\"customSwitch\"\n    name=\"customSwitch\"\n    label=\"Toggle this custom radio\"\n  />`;\nconst customSwitchDisabledCode = `<CustomInput\n    type=\"switch\"\n    id=\"customSwitchDisabled2\"\n    name=\"customSwitch\"\n    label=\"Toggle this custom radio\"\n    disabled\n  />`;\nconst customSelectCode = `<Fragment>\n  <FormGroup>\n    <CustomInput \n      type=\"select\" \n      bsSize=\"lg\" \n      defaultValue=\"1\" \n      id=\"exampleCustomSelect1\" \n      name=\"customSelect\"\n    >\n      <option value=\"1\">One</option>\n      <option value=\"2\">Two</option>\n      <option value=\"3\">Three</option>\n    </CustomInput>\n    </FormGroup>\n    <FormGroup>\n      <CustomInput \n        type=\"select\" \n        id=\"exampleCustomSelect2\" \n        defaultValue=\"1\" \n        name=\"customSelect\"\n      >\n        <option value=\"1\">One</option>\n        <option value=\"2\">Two</option>\n        <option value=\"3\">Three</option>\n      </CustomInput>\n    </FormGroup>\n    <FormGroup>\n      <CustomInput \n        type=\"select\" \n        bsSize=\"sm\" \n        id=\"exampleCustomSelect3\" \n        defaultValue=\"1\" \n        name=\"customSelect\"\n      >\n        <option value=\"1\">One</option>\n        <option value=\"2\">Two</option>\n        <option value=\"3\">Three</option>\n      </CustomInput>\n  </FormGroup>\n</Fragment>`;\nconst multipleSelectCode = `<Fragment>\n<FormGroup>\n  <CustomInput \n    type=\"select\"\n    id=\"exampleCustomMultipleSelect\" \n    defaultValue={[1,2]} \n    name=\"customSelect\" \n    multiple\n  >\n    <option value=\"1\">One</option>\n    <option value=\"2\">Two</option>\n    <option value=\"3\">Three</option>\n    <option value=\"4\">Four</option>\n    <option value=\"5\">Five</option>\n  </CustomInput>\n</FormGroup>\n</Fragment>`;\nconst fileBrowserCode = `<FormGroup>\n  <Label for=\"exampleCustomFileBrowser\">\n    File Browser\n  </Label>\n  <CustomInput \n    type=\"file\" \n    id=\"exampleCustomFileBrowser\" \n    name=\"customFile\" \n  />\n</FormGroup>`;\nconst propertiesInput = `Input.propTypes = {\n  children: PropTypes.node,\n  // type can be things like text, password, (typical input types) as well as select and textarea, providing children as you normally would to those.\n  type: PropTypes.string,\n  size: PropTypes.string,\n  bsSize: PropTypes.string,\n  valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\n  invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  // ref will only get you a reference to the Input component, use innerRef to get a reference to the DOM input (for things like focus management).\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  plaintext: PropTypes.bool,\n  addon: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n};`;\nconst propertiesCustomInput = `CustomInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  type: PropTypes.string.isRequired, // radio, checkbox, select, range.\n  label: PropTypes.string, // used for checkbox and radios\n  inline: PropTypes.bool,\n  valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\n  invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\n  bsSize: PropTypes.string,\n  cssModule: PropTypes.object,\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.array, PropTypes.func]), // for type=\"select\"\n  // innerRef would be referenced to select node or input DOM node, depends on type property\n  innerRef: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string,\n    PropTypes.func,\n  ])\n};`;\nconst propertiesForm = `Form.propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), // default: 'form'\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n};`;\nconst propertiesFormFeedback = `FormFeedback.propTypes = {\n  children: PropTypes.node,\n  // Pass in a Component to override default element\n  tag: PropTypes.string, // default: 'div'\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  valid: PropTypes.bool, // default: undefined\n  tooltip: PropTypes.bool\n};`;\nconst propertiesFormGroup = `FormGroup.propTypes = {\n  children: PropTypes.node,\n  // Applied the row class when true, does nothing when false\n  row: PropTypes.bool,\n  // Applied the form-check class when true, form-group when false\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  // Applied the disabled class when the check and disabled props are true, does nothing when false\n  disabled: PropTypes.bool,\n  // Pass in a Component to override default element\n  tag: PropTypes.string, // default: 'div'\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n};`;\nconst propertiesFormText = `FormText.propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), // default: 'small'\n  color: PropTypes.string, // default: 'muted'\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n};`;\nconst propertiesInputGroup = `InputGroup.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  size: PropTypes.string,\n  className: PropTypes.string\n};`;\nconst propertiesInputGroupAddon = `InputGroupAddOn.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  addonType: PropTypes.oneOf(['prepend', 'append']).isRequired,\n  className: PropTypes.string\n};`;\nconst propertiesInputGroupButton = `InputGroupButton.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  addonType: PropTypes.oneOf(['prepend', 'append']).isRequired,\n  children: PropTypes.node,\n  groupClassName: PropTypes.string, // only used in shorthand\n  groupAttributes: PropTypes.object, // only used in shorthand\n  className: PropTypes.string\n};`;\n\nconst Forms = () => /*#__PURE__*/React.createElement(Fragment, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 452,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(PageHeader, {\n  title: \"Forms\",\n  description: \"Examples and usage guidelines for form control styles, layout options, and custom components for creating a wide variety of forms.\",\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 453,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Button, {\n  tag: \"a\",\n  href: \"https://reactstrap.github.io/components/form\",\n  target: \"_blank\",\n  color: \"link\",\n  size: \"sm\",\n  className: \"pl-0\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 458,\n    columnNumber: 7\n  }\n}, \"Forms on reactstrap\", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n  icon: \"chevron-right\",\n  className: \"ml-1 fs--2\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 467,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 470,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Basic Form\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 471,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 472,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: basicFormCode,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 473,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 476,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Properties\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 477,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 478,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: propertiesInput,\n  hidePreview: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 479,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(FalconEditor, {\n  code: propertiesCustomInput,\n  hidePreview: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 480,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(FalconEditor, {\n  code: propertiesForm,\n  hidePreview: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 481,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(FalconEditor, {\n  code: propertiesFormFeedback,\n  hidePreview: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 482,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(FalconEditor, {\n  code: propertiesFormGroup,\n  hidePreview: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 483,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(FalconEditor, {\n  code: propertiesFormGroup,\n  hidePreview: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 484,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(FalconEditor, {\n  code: propertiesFormText,\n  hidePreview: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 485,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 488,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Input Group Properties\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 489,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 490,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"code\", {\n  className: \"bg-dark d-block p-2\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 491,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"pre\", {\n  className: \"text-300\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 492,\n    columnNumber: 11\n  }\n}, propertiesInputGroup)), /*#__PURE__*/React.createElement(\"code\", {\n  className: \"bg-dark d-block p-2\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 494,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"pre\", {\n  className: \"text-300\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 495,\n    columnNumber: 11\n  }\n}, propertiesInputGroupAddon)), /*#__PURE__*/React.createElement(\"code\", {\n  className: \"bg-dark d-block p-2\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 497,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"pre\", {\n  className: \"text-300\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 498,\n    columnNumber: 11\n  }\n}, propertiesInputGroupButton)))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 502,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Input Group\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 503,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 504,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: inputGroupCode,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 505,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(PageHeader, {\n  title: \"Custom Forms\",\n  description: \"For even more customization and cross-browser consistency, use Bootstrap's completely custom form elements to replace the browser defaults.\",\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 508,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Button, {\n  tag: \"a\",\n  href: \"https://reactstrap.github.io/components/form#Custom-Inputs\",\n  target: \"_blank\",\n  color: \"link\",\n  size: \"sm\",\n  className: \"pl-0\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 513,\n    columnNumber: 7\n  }\n}, \"Custom Forms on reactstrap\", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n  icon: \"chevron-right\",\n  className: \"ml-1 fs--2\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 522,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Row, {\n  noGutters: true,\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 525,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Col, {\n  lg: 6,\n  className: \"pr-lg-2 mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 526,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(Card, {\n  className: \"h-100 mb-2\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 527,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Checkboxes\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 528,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 529,\n    columnNumber: 11\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: customCheckboxCode,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 530,\n    columnNumber: 13\n  }\n})))), /*#__PURE__*/React.createElement(Col, {\n  lg: 6,\n  className: \"pl-lg-2 mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 534,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(Card, {\n  className: \"h-100\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 535,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Radios\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 536,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 537,\n    columnNumber: 11\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: customRadioCode,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 538,\n    columnNumber: 13\n  }\n})))), /*#__PURE__*/React.createElement(Col, {\n  lg: 6,\n  className: \"pr-lg-2 mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 542,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(Card, {\n  className: \"h-100\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 543,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Inline Radios\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 544,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 545,\n    columnNumber: 11\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: InlineRadioCode,\n  scope: {\n    Flex\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 546,\n    columnNumber: 13\n  }\n})))), /*#__PURE__*/React.createElement(Col, {\n  lg: 6,\n  className: \"pl-lg-2 mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 550,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(Card, {\n  className: \"h-100\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 551,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Disabled\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 552,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 553,\n    columnNumber: 11\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: disabledInputFieldsCode,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 554,\n    columnNumber: 13\n  }\n})))), /*#__PURE__*/React.createElement(Col, {\n  lg: 6,\n  className: \"pr-lg-2 mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 558,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(Card, {\n  className: \"h-100\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 559,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Switches\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 560,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 561,\n    columnNumber: 11\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: customSwitchCode,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 562,\n    columnNumber: 13\n  }\n})))), /*#__PURE__*/React.createElement(Col, {\n  lg: 6,\n  className: \"pl-lg-2 mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 566,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(Card, {\n  className: \"h-100\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 567,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Disabled Switches\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 568,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 569,\n    columnNumber: 11\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: customSwitchDisabledCode,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 570,\n    columnNumber: 13\n  }\n})))), /*#__PURE__*/React.createElement(Col, {\n  lg: 6,\n  className: \"pr-lg-2\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 574,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(Card, {\n  className: \"h-100\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 575,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Custom Select\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 576,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 577,\n    columnNumber: 11\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: customSelectCode,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 578,\n    columnNumber: 13\n  }\n})))), /*#__PURE__*/React.createElement(Col, {\n  lg: 6,\n  className: \"pl-lg-2\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 582,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 583,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Multiple Select\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 584,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 585,\n    columnNumber: 11\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: multipleSelectCode,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 586,\n    columnNumber: 13\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 589,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"File Browser\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 590,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 591,\n    columnNumber: 11\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: fileBrowserCode,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 592,\n    columnNumber: 13\n  }\n}))))));\n\nexport default Forms;","map":{"version":3,"sources":["/Users/greypro/Documents/Dev/letter/letter-support/src/components/bootstrap-components/Forms.js"],"names":["React","Fragment","Button","Card","CardBody","Col","Row","FontAwesomeIcon","FalconCardHeader","FalconEditor","PageHeader","Flex","basicFormCode","inputGroupCode","customCheckboxCode","customRadioCode","InlineRadioCode","disabledInputFieldsCode","customSwitchCode","customSwitchDisabledCode","customSelectCode","multipleSelectCode","fileBrowserCode","propertiesInput","propertiesCustomInput","propertiesForm","propertiesFormFeedback","propertiesFormGroup","propertiesFormText","propertiesInputGroup","propertiesInputGroupAddon","propertiesInputGroupButton","Forms"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { Button, Card, CardBody, Col, Row } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nimport PageHeader from '../common/PageHeader';\nimport Flex from '../common/Flex';\n\nconst basicFormCode = `<Form>\n  <FormGroup>\n    <Label for=\"exampleName\">Name</Label>\n    <Input type=\"text\" name=\"name\" id=\"exampleName\" placeholder=\"Name\" />\n  </FormGroup>\n  <FormGroup>\n    <Label for=\"readonly\">Read Only</Label>\n    <Input type=\"text\" name=\"readonly\" id=\"readonly\" placeholder=\"Readonly input here...\" disabled />\n  </FormGroup>\n  <FormGroup>\n    <Label for=\"exampleEmail\">Read only plain text</Label>\n    <Input plaintext value=\"email@example.com\" onChange={() => {}} />\n  </FormGroup>\n  <FormGroup>\n    <Label for=\"exampleEmail\">Email</Label>\n    <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"Email\" />\n  </FormGroup>\n  <FormGroup>\n    <Label for=\"examplePassword\">Password</Label>\n    <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"Password\" />\n  </FormGroup>\n  <FormGroup className=\"form-check\">\n    <Input type=\"checkbox\" name=\"check\" id=\"exampleCheck\" />\n    <Label for=\"exampleCheck\" check>\n      Checkbox\n    </Label>\n  </FormGroup>\n  <FormGroup className=\"form-check\">\n    <Input type=\"checkbox\" name=\"check\" id=\"exampleCheck1\" disabled />\n    <Label for=\"exampleCheck1\" check>\n      Disabled checkbox\n    </Label>\n  </FormGroup>\n  <FormGroup className=\"form-check\">\n  <Input type=\"radio\" name=\"radio1\" defaultChecked />\n    <Label check>\n      Default Radio\n    </Label>\n  </FormGroup>\n  <FormGroup className=\"form-check\">\n   <Input type=\"radio\" name=\"radio1\" disabled /> \n    <Label check>\n     Disabled Radio\n    </Label>\n  </FormGroup>\n    <FormGroup>\n      <Label for=\"exampleFile\">Example file input</Label>\n      <Input type=\"file\" name=\"file\" id=\"exampleFile\" />\n     </FormGroup>\n  <FormGroup>\n    <Label for=\"exampleSelect\">Example Select</Label>\n    <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </Input>\n  </FormGroup>\n  <FormGroup>\n    <Label for=\"exampleSelectMulti\">Example Multiple Select</Label>\n    <Input type=\"select\" name=\"selectMulti\" id=\"exampleSelectMulti\" multiple>\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </Input>\n  </FormGroup>\n  <FormGroup>\n    <Label for=\"exampleText\">Example textarea</Label>\n    <Input type=\"textarea\" name=\"text\" id=\"exampleText\" />\n  </FormGroup>\n  <Button color=\"primary\">Save</Button>\n</Form>`;\n\nconst inputGroupCode = `function InputGroupExample () {\n  const [isOpenOne, setIsOpenOne] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  \n  return (\n    <div>\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">@</InputGroupAddon>\n        <Input placeholder=\"username\" />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <Input placeholder=\"Recipient's username\" />\n        <InputGroupAddon addonType=\"append\">\n          <InputGroupText>@example.com</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n      <br />\n      <Label for=\"yourVanityURl\">Your vanity URL</Label>\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">https:example.com/users/</InputGroupAddon>\n        <Input />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">$</InputGroupAddon>\n        <Input />\n        <InputGroupAddon addonType=\"append\">.00</InputGroupAddon>\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">With textarea</InputGroupAddon>\n        <Input type=\"textarea\" />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">\n          <InputGroupText>\n            <Input addon type=\"checkbox\" aria-label=\"Checkbox for following text input\" />\n          </InputGroupText>\n        </InputGroupAddon>\n        <Input />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">\n          <InputGroupText>\n            <Input addon type=\"radio\" aria-label=\"Checkbox for following text input\" />\n          </InputGroupText>\n        </InputGroupAddon>\n        <Input />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">First and last name</InputGroupAddon>\n        <Input />\n        <Input />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">\n          <InputGroupText>$</InputGroupText>\n          <InputGroupText>0.00</InputGroupText>\n        </InputGroupAddon>\n        <Input />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <Input />\n        <InputGroupAddon addonType=\"append\">\n          <InputGroupText>$</InputGroupText>\n          <InputGroupText>0.00</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupButtonDropdown \n          addonType=\"append\"\n          isOpen={isOpenOne} \n          toggle={() => setIsOpenOne(!isOpenOne)}\n        >\n          <DropdownToggle color=\"primary\" caret>\n            Dropdown\n          </DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem header>Header</DropdownItem>\n            <DropdownItem disabled>Action</DropdownItem>\n            <DropdownItem>Something else here</DropdownItem>\n            <DropdownItem divider />\n            <DropdownItem>Separated link</DropdownItem>\n          </DropdownMenu>\n        </InputGroupButtonDropdown>\n        <Input />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <Input />\n        <InputGroupButtonDropdown \n          addonType=\"append\" \n          isOpen={isOpenTwo} \n          toggle={() => setIsOpenTwo(!isOpenTwo)}\n        >\n          <DropdownToggle color=\"primary\" caret>\n            Dropdown\n          </DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem header>Header</DropdownItem>\n            <DropdownItem disabled>Action</DropdownItem>\n            <DropdownItem>Something else here</DropdownItem>\n            <DropdownItem divider />\n            <DropdownItem>Separated link</DropdownItem>\n          </DropdownMenu>\n        </InputGroupButtonDropdown>\n      </InputGroup>\n    </div>\n  )\n}`;\n\nconst customCheckboxCode = `<Fragment>\n  <CustomInput\n    type=\"checkbox\"\n    id=\"customCheck1\"\n    label=\"Check this custom checkbox\"\n    className=\"mb-0\"\n    />\n  <CustomInput \n    type=\"checkbox\" \n    id=\"customCheck2\" \n    label=\"Check another custom checkbox\" \n  />\n</Fragment>\n`;\nconst customRadioCode = `<Fragment>\n  <CustomInput\n    type=\"radio\"\n    id=\"customRadio1\"\n    name=\"customRadio\"\n    label=\"Toggle this custom radio\"\n    className=\"mb-0\"\n  />\n  <CustomInput\n    type=\"radio\"\n    id=\"customRadio2\"\n    name=\"customRadio\"\n    label=\"Or toggle this other custom radio\"\n  />\n</Fragment>`;\n\nconst InlineRadioCode = `<FormGroup>\n  <Label for=\"selectOption\">\n    Select one option\n  </Label>\n  <div>\n    <CustomInput \n      type=\"radio\" \n      name=\"exampleCustomInlineRadio\" \n      id=\"exampleCustomInlineRadio\" \n      label=\"Toggle\" \n      inline \n    />\n    <CustomInput \n      type=\"radio\" \n      name=\"exampleCustomInlineRadio\" \n      id=\"exampleCustomInlineRadio2\" \n      label=\"and another one\" \n      inline \n    />\n  </div>\n</FormGroup>`;\n\nconst disabledInputFieldsCode = `<Fragment>\n  <CustomInput\n    type=\"checkbox\"\n    id=\"customCheckboxDisabled2\"\n    label=\"Check this custom checkbox\"\n    disabled\n  />\n  <CustomInput\n    type=\"radio\"\n    id=\"customRadioDisabled2\"\n    name=\"radioDisabled\"\n    label=\"Toggle this custom radio\"\n    disabled\n  />\n</Fragment>`;\n\nconst customSwitchCode = `<CustomInput\n    type=\"switch\"\n    id=\"customSwitch\"\n    name=\"customSwitch\"\n    label=\"Toggle this custom radio\"\n  />`;\nconst customSwitchDisabledCode = `<CustomInput\n    type=\"switch\"\n    id=\"customSwitchDisabled2\"\n    name=\"customSwitch\"\n    label=\"Toggle this custom radio\"\n    disabled\n  />`;\nconst customSelectCode = `<Fragment>\n  <FormGroup>\n    <CustomInput \n      type=\"select\" \n      bsSize=\"lg\" \n      defaultValue=\"1\" \n      id=\"exampleCustomSelect1\" \n      name=\"customSelect\"\n    >\n      <option value=\"1\">One</option>\n      <option value=\"2\">Two</option>\n      <option value=\"3\">Three</option>\n    </CustomInput>\n    </FormGroup>\n    <FormGroup>\n      <CustomInput \n        type=\"select\" \n        id=\"exampleCustomSelect2\" \n        defaultValue=\"1\" \n        name=\"customSelect\"\n      >\n        <option value=\"1\">One</option>\n        <option value=\"2\">Two</option>\n        <option value=\"3\">Three</option>\n      </CustomInput>\n    </FormGroup>\n    <FormGroup>\n      <CustomInput \n        type=\"select\" \n        bsSize=\"sm\" \n        id=\"exampleCustomSelect3\" \n        defaultValue=\"1\" \n        name=\"customSelect\"\n      >\n        <option value=\"1\">One</option>\n        <option value=\"2\">Two</option>\n        <option value=\"3\">Three</option>\n      </CustomInput>\n  </FormGroup>\n</Fragment>`;\n\nconst multipleSelectCode = `<Fragment>\n<FormGroup>\n  <CustomInput \n    type=\"select\"\n    id=\"exampleCustomMultipleSelect\" \n    defaultValue={[1,2]} \n    name=\"customSelect\" \n    multiple\n  >\n    <option value=\"1\">One</option>\n    <option value=\"2\">Two</option>\n    <option value=\"3\">Three</option>\n    <option value=\"4\">Four</option>\n    <option value=\"5\">Five</option>\n  </CustomInput>\n</FormGroup>\n</Fragment>`;\n\nconst fileBrowserCode = `<FormGroup>\n  <Label for=\"exampleCustomFileBrowser\">\n    File Browser\n  </Label>\n  <CustomInput \n    type=\"file\" \n    id=\"exampleCustomFileBrowser\" \n    name=\"customFile\" \n  />\n</FormGroup>`;\n\nconst propertiesInput = `Input.propTypes = {\n  children: PropTypes.node,\n  // type can be things like text, password, (typical input types) as well as select and textarea, providing children as you normally would to those.\n  type: PropTypes.string,\n  size: PropTypes.string,\n  bsSize: PropTypes.string,\n  valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\n  invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  // ref will only get you a reference to the Input component, use innerRef to get a reference to the DOM input (for things like focus management).\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  plaintext: PropTypes.bool,\n  addon: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n};`;\nconst propertiesCustomInput = `CustomInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  type: PropTypes.string.isRequired, // radio, checkbox, select, range.\n  label: PropTypes.string, // used for checkbox and radios\n  inline: PropTypes.bool,\n  valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\n  invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\n  bsSize: PropTypes.string,\n  cssModule: PropTypes.object,\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.array, PropTypes.func]), // for type=\"select\"\n  // innerRef would be referenced to select node or input DOM node, depends on type property\n  innerRef: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string,\n    PropTypes.func,\n  ])\n};`;\nconst propertiesForm = `Form.propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), // default: 'form'\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n};`;\nconst propertiesFormFeedback = `FormFeedback.propTypes = {\n  children: PropTypes.node,\n  // Pass in a Component to override default element\n  tag: PropTypes.string, // default: 'div'\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  valid: PropTypes.bool, // default: undefined\n  tooltip: PropTypes.bool\n};`;\nconst propertiesFormGroup = `FormGroup.propTypes = {\n  children: PropTypes.node,\n  // Applied the row class when true, does nothing when false\n  row: PropTypes.bool,\n  // Applied the form-check class when true, form-group when false\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  // Applied the disabled class when the check and disabled props are true, does nothing when false\n  disabled: PropTypes.bool,\n  // Pass in a Component to override default element\n  tag: PropTypes.string, // default: 'div'\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n};`;\nconst propertiesFormText = `FormText.propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), // default: 'small'\n  color: PropTypes.string, // default: 'muted'\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n};`;\n\nconst propertiesInputGroup = `InputGroup.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  size: PropTypes.string,\n  className: PropTypes.string\n};`;\n\nconst propertiesInputGroupAddon = `InputGroupAddOn.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  addonType: PropTypes.oneOf(['prepend', 'append']).isRequired,\n  className: PropTypes.string\n};`;\n\nconst propertiesInputGroupButton = `InputGroupButton.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  addonType: PropTypes.oneOf(['prepend', 'append']).isRequired,\n  children: PropTypes.node,\n  groupClassName: PropTypes.string, // only used in shorthand\n  groupAttributes: PropTypes.object, // only used in shorthand\n  className: PropTypes.string\n};`;\n\nconst Forms = () => (\n  <Fragment>\n    <PageHeader\n      title=\"Forms\"\n      description=\"Examples and usage guidelines for form control styles, layout options, and custom components for creating a wide variety of forms.\"\n      className=\"mb-3\"\n    >\n      <Button\n        tag=\"a\"\n        href=\"https://reactstrap.github.io/components/form\"\n        target=\"_blank\"\n        color=\"link\"\n        size=\"sm\"\n        className=\"pl-0\"\n      >\n        Forms on reactstrap\n        <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n      </Button>\n    </PageHeader>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Basic Form\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={basicFormCode} />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Properties\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={propertiesInput} hidePreview />\n        <FalconEditor code={propertiesCustomInput} hidePreview />\n        <FalconEditor code={propertiesForm} hidePreview />\n        <FalconEditor code={propertiesFormFeedback} hidePreview />\n        <FalconEditor code={propertiesFormGroup} hidePreview />\n        <FalconEditor code={propertiesFormGroup} hidePreview />\n        <FalconEditor code={propertiesFormText} hidePreview />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Input Group Properties\" light={false} />\n      <CardBody className=\"bg-light\">\n        <code className=\"bg-dark d-block p-2\">\n          <pre className=\"text-300\">{propertiesInputGroup}</pre>\n        </code>\n        <code className=\"bg-dark d-block p-2\">\n          <pre className=\"text-300\">{propertiesInputGroupAddon}</pre>\n        </code>\n        <code className=\"bg-dark d-block p-2\">\n          <pre className=\"text-300\">{propertiesInputGroupButton}</pre>\n        </code>\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Input Group\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={inputGroupCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <PageHeader\n      title=\"Custom Forms\"\n      description=\"For even more customization and cross-browser consistency, use Bootstrap's completely custom form elements to replace the browser defaults.\"\n      className=\"mb-3\"\n    >\n      <Button\n        tag=\"a\"\n        href=\"https://reactstrap.github.io/components/form#Custom-Inputs\"\n        target=\"_blank\"\n        color=\"link\"\n        size=\"sm\"\n        className=\"pl-0\"\n      >\n        Custom Forms on reactstrap\n        <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n      </Button>\n    </PageHeader>\n    <Row noGutters className=\"mb-3\">\n      <Col lg={6} className=\"pr-lg-2 mb-3\">\n        <Card className=\"h-100 mb-2\">\n          <FalconCardHeader title=\"Checkboxes\" light={false} />\n          <CardBody className=\"bg-light\">\n            <FalconEditor code={customCheckboxCode} language=\"jsx\" />\n          </CardBody>\n        </Card>\n      </Col>\n      <Col lg={6} className=\"pl-lg-2 mb-3\">\n        <Card className=\"h-100\">\n          <FalconCardHeader title=\"Radios\" light={false} />\n          <CardBody className=\"bg-light\">\n            <FalconEditor code={customRadioCode} language=\"jsx\" />\n          </CardBody>\n        </Card>\n      </Col>\n      <Col lg={6} className=\"pr-lg-2 mb-3\">\n        <Card className=\"h-100\">\n          <FalconCardHeader title=\"Inline Radios\" light={false} />\n          <CardBody className=\"bg-light\">\n            <FalconEditor code={InlineRadioCode} scope={{ Flex }} />\n          </CardBody>\n        </Card>\n      </Col>\n      <Col lg={6} className=\"pl-lg-2 mb-3\">\n        <Card className=\"h-100\">\n          <FalconCardHeader title=\"Disabled\" light={false} />\n          <CardBody className=\"bg-light\">\n            <FalconEditor code={disabledInputFieldsCode} language=\"jsx\" />\n          </CardBody>\n        </Card>\n      </Col>\n      <Col lg={6} className=\"pr-lg-2 mb-3\">\n        <Card className=\"h-100\">\n          <FalconCardHeader title=\"Switches\" light={false} />\n          <CardBody className=\"bg-light\">\n            <FalconEditor code={customSwitchCode} />\n          </CardBody>\n        </Card>\n      </Col>\n      <Col lg={6} className=\"pl-lg-2 mb-3\">\n        <Card className=\"h-100\">\n          <FalconCardHeader title=\"Disabled Switches\" light={false} />\n          <CardBody className=\"bg-light\">\n            <FalconEditor code={customSwitchDisabledCode} language=\"jsx\" />\n          </CardBody>\n        </Card>\n      </Col>\n      <Col lg={6} className=\"pr-lg-2\">\n        <Card className=\"h-100\">\n          <FalconCardHeader title=\"Custom Select\" light={false} />\n          <CardBody className=\"bg-light\">\n            <FalconEditor code={customSelectCode} language=\"jsx\" />\n          </CardBody>\n        </Card>\n      </Col>\n      <Col lg={6} className=\"pl-lg-2\">\n        <Card className=\"mb-3\">\n          <FalconCardHeader title=\"Multiple Select\" light={false} />\n          <CardBody className=\"bg-light\">\n            <FalconEditor code={multipleSelectCode} language=\"jsx\" />\n          </CardBody>\n        </Card>\n        <Card className=\"\">\n          <FalconCardHeader title=\"File Browser\" light={false} />\n          <CardBody className=\"bg-light\">\n            <FalconEditor code={fileBrowserCode} language=\"jsx\" />\n          </CardBody>\n        </Card>\n      </Col>\n    </Row>\n  </Fragment>\n);\n\nexport default Forms;\n"]},"metadata":{},"sourceType":"module"}