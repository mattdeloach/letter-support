{"ast":null,"code":"var _jsxFileName = \"/Users/greypro/Documents/Dev/letter/letter-support/src/Main.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport AppContext from './context/Context';\nimport { settings } from './config';\nimport toggleStylesheet from './helpers/toggleStylesheet';\nimport { getItemFromStore, setItemToStore, themeColors } from './helpers/utils';\n\nconst Main = props => {\n  const [isFluid, setIsFluid] = useState(getItemFromStore('isFluid', settings.isFluid));\n  const [isRTL, setIsRTL] = useState(getItemFromStore('isRTL', settings.isRTL));\n  const [isDark, setIsDark] = useState(getItemFromStore('isDark', settings.isDark));\n  const [isTopNav, setIsTopNav] = useState(getItemFromStore('isTopNav', settings.isTopNav));\n  const [isCombo, setIsCombo] = useState(getItemFromStore('isCombo', settings.isCombo));\n  const [isVertical, setIsVertical] = useState(getItemFromStore('isVertical', settings.isVertical));\n  const [isNavbarVerticalCollapsed, setIsNavbarVerticalCollapsed] = useState(getItemFromStore('isNavbarVerticalCollapsed', settings.isNavbarVerticalCollapsed));\n  const [currency, setCurrency] = useState(settings.currency);\n  const [showBurgerMenu, setShowBurgerMenu] = useState(settings.showBurgerMenu);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isOpenSidePanel, setIsOpenSidePanel] = useState(false);\n  const [navbarCollapsed, setNavbarCollapsed] = useState(false);\n  const [navbarStyle, setNavbarStyle] = useState(getItemFromStore('navbarStyle', settings.navbarStyle));\n\n  const toggleModal = () => setIsOpenSidePanel(prevIsOpenSidePanel => !prevIsOpenSidePanel);\n\n  const value = {\n    isRTL,\n    isDark,\n    isCombo,\n    isFluid,\n    setIsRTL,\n    isTopNav,\n    currency,\n    setIsDark,\n    setIsCombo,\n    setIsFluid,\n    isVertical,\n    toggleModal,\n    setIsTopNav,\n    navbarStyle,\n    setCurrency,\n    setIsVertical,\n    showBurgerMenu,\n    setNavbarStyle,\n    isOpenSidePanel,\n    navbarCollapsed,\n    setShowBurgerMenu,\n    setIsOpenSidePanel,\n    setNavbarCollapsed,\n    isNavbarVerticalCollapsed,\n    setIsNavbarVerticalCollapsed\n  };\n\n  const setStylesheetMode = mode => {\n    setIsLoaded(false);\n    setItemToStore(mode, value[mode]);\n    toggleStylesheet({\n      isRTL,\n      isDark\n    }, () => setIsLoaded(true));\n  };\n\n  useEffect(() => {\n    setStylesheetMode('isFluid'); // eslint-disable-next-line\n  }, [isFluid]);\n  useEffect(() => {\n    setStylesheetMode('isRTL'); // eslint-disable-next-line\n  }, [isRTL]);\n  useEffect(() => {\n    setStylesheetMode('isDark'); // eslint-disable-next-line\n  }, [isDark]);\n  useEffect(() => {\n    setItemToStore('isNavbarVerticalCollapsed', isNavbarVerticalCollapsed); // eslint-disable-next-line\n  }, [isNavbarVerticalCollapsed]);\n  useEffect(() => {\n    setItemToStore('isTopNav', isTopNav); // eslint-disable-next-line\n  }, [isTopNav]);\n  useEffect(() => {\n    setItemToStore('isCombo', isCombo); // eslint-disable-next-line\n  }, [isCombo]);\n  useEffect(() => {\n    setItemToStore('isVertical', isVertical); // eslint-disable-next-line\n  }, [isVertical]);\n  useEffect(() => {\n    setItemToStore('navbarStyle', navbarStyle); // eslint-disable-next-line\n  }, [navbarStyle]);\n\n  if (!isLoaded) {\n    toggleStylesheet({\n      isRTL,\n      isDark\n    }, () => setIsLoaded(true));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: 'fixed',\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        backgroundColor: isDark ? themeColors.dark : themeColors.light\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 10\n    }\n  }, props.children);\n};\n\nMain.propTypes = {\n  children: PropTypes.node\n};\nexport default Main;","map":{"version":3,"sources":["/Users/greypro/Documents/Dev/letter/letter-support/src/Main.js"],"names":["React","useState","useEffect","PropTypes","AppContext","settings","toggleStylesheet","getItemFromStore","setItemToStore","themeColors","Main","props","isFluid","setIsFluid","isRTL","setIsRTL","isDark","setIsDark","isTopNav","setIsTopNav","isCombo","setIsCombo","isVertical","setIsVertical","isNavbarVerticalCollapsed","setIsNavbarVerticalCollapsed","currency","setCurrency","showBurgerMenu","setShowBurgerMenu","isLoaded","setIsLoaded","isOpenSidePanel","setIsOpenSidePanel","navbarCollapsed","setNavbarCollapsed","navbarStyle","setNavbarStyle","toggleModal","prevIsOpenSidePanel","value","setStylesheetMode","mode","position","top","right","bottom","left","backgroundColor","dark","light","children","propTypes","node"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppContext from './context/Context';\r\nimport { settings } from './config';\r\nimport toggleStylesheet from './helpers/toggleStylesheet';\r\nimport { getItemFromStore, setItemToStore, themeColors } from './helpers/utils';\r\n\r\nconst Main = props => {\r\n  const [isFluid, setIsFluid] = useState(getItemFromStore('isFluid', settings.isFluid));\r\n  const [isRTL, setIsRTL] = useState(getItemFromStore('isRTL', settings.isRTL));\r\n  const [isDark, setIsDark] = useState(getItemFromStore('isDark', settings.isDark));\r\n  const [isTopNav, setIsTopNav] = useState(getItemFromStore('isTopNav', settings.isTopNav));\r\n  const [isCombo, setIsCombo] = useState(getItemFromStore('isCombo', settings.isCombo));\r\n  const [isVertical, setIsVertical] = useState(getItemFromStore('isVertical', settings.isVertical));\r\n  const [isNavbarVerticalCollapsed, setIsNavbarVerticalCollapsed] = useState(\r\n    getItemFromStore('isNavbarVerticalCollapsed', settings.isNavbarVerticalCollapsed)\r\n  );\r\n  const [currency, setCurrency] = useState(settings.currency);\r\n  const [showBurgerMenu, setShowBurgerMenu] = useState(settings.showBurgerMenu);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [isOpenSidePanel, setIsOpenSidePanel] = useState(false);\r\n  const [navbarCollapsed, setNavbarCollapsed] = useState(false);\r\n\r\n  const [navbarStyle, setNavbarStyle] = useState(getItemFromStore('navbarStyle', settings.navbarStyle));\r\n\r\n  const toggleModal = () => setIsOpenSidePanel(prevIsOpenSidePanel => !prevIsOpenSidePanel);\r\n  const value = {\r\n    isRTL,\r\n    isDark,\r\n    isCombo,\r\n    isFluid,\r\n    setIsRTL,\r\n    isTopNav,\r\n    currency,\r\n    setIsDark,\r\n    setIsCombo,\r\n    setIsFluid,\r\n    isVertical,\r\n    toggleModal,\r\n    setIsTopNav,\r\n    navbarStyle,\r\n    setCurrency,\r\n    setIsVertical,\r\n    showBurgerMenu,\r\n    setNavbarStyle,\r\n    isOpenSidePanel,\r\n    navbarCollapsed,\r\n    setShowBurgerMenu,\r\n    setIsOpenSidePanel,\r\n    setNavbarCollapsed,\r\n    isNavbarVerticalCollapsed,\r\n    setIsNavbarVerticalCollapsed\r\n  };\r\n\r\n  const setStylesheetMode = mode => {\r\n    setIsLoaded(false);\r\n    setItemToStore(mode, value[mode]);\r\n    toggleStylesheet({ isRTL, isDark }, () => setIsLoaded(true));\r\n  };\r\n\r\n  useEffect(() => {\r\n    setStylesheetMode('isFluid');\r\n    // eslint-disable-next-line\r\n  }, [isFluid]);\r\n\r\n  useEffect(() => {\r\n    setStylesheetMode('isRTL');\r\n    // eslint-disable-next-line\r\n  }, [isRTL]);\r\n\r\n  useEffect(() => {\r\n    setStylesheetMode('isDark');\r\n    // eslint-disable-next-line\r\n  }, [isDark]);\r\n\r\n  useEffect(() => {\r\n    setItemToStore('isNavbarVerticalCollapsed', isNavbarVerticalCollapsed);\r\n    // eslint-disable-next-line\r\n  }, [isNavbarVerticalCollapsed]);\r\n\r\n  useEffect(() => {\r\n    setItemToStore('isTopNav', isTopNav);\r\n    // eslint-disable-next-line\r\n  }, [isTopNav]);\r\n\r\n  useEffect(() => {\r\n    setItemToStore('isCombo', isCombo);\r\n    // eslint-disable-next-line\r\n  }, [isCombo]);\r\n  useEffect(() => {\r\n    setItemToStore('isVertical', isVertical);\r\n    // eslint-disable-next-line\r\n  }, [isVertical]);\r\n\r\n  useEffect(() => {\r\n    setItemToStore('navbarStyle', navbarStyle);\r\n    // eslint-disable-next-line\r\n  }, [navbarStyle]);\r\n\r\n  if (!isLoaded) {\r\n    toggleStylesheet({ isRTL, isDark }, () => setIsLoaded(true));\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          position: 'fixed',\r\n          top: 0,\r\n          right: 0,\r\n          bottom: 0,\r\n          left: 0,\r\n          backgroundColor: isDark ? themeColors.dark : themeColors.light\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return <AppContext.Provider value={value}>{props.children}</AppContext.Provider>;\r\n};\r\n\r\nMain.propTypes = { children: PropTypes.node };\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}