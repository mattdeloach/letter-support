{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/components/bootstrap-components/Popovers.js\";\nimport React, { Fragment } from 'react';\nimport { Button, Card, CardBody } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nconst popoversExampleCode = `function popoversExample() {\n  const [isOpenLeft, setIsOpenLeft] = useState(false);\n  const [isOpenRight, setIsOpenRight] = useState(false);\n  const [isOpenTop, setIsOpenTop] = useState(false);\n  const [isOpenBottom, setIsOpenBottom] = useState(false);\n  \n  return(\n    <Fragment>\n      <Button id=\"Popover3\" className=\"mr-2\" type=\"button\">\n        Popover on top\n      </Button>\n      <Popover \n        placement=\"top\" \n        isOpen={isOpenTop} \n        target=\"Popover3\" \n        toggle={() => setIsOpenTop(!isOpenTop)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n\n      <Button id=\"Popover4\" className=\"mr-2\" type=\"button\">\n        Popover on Bottom\n      </Button>\n      <Popover\n        placement=\"bottom\"\n        isOpen={isOpenBottom}\n        target=\"Popover4\"\n        toggle={() => setIsOpenBottom(!isOpenBottom)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n      \n      <Button id=\"Popover1\" className=\"mr-2\" type=\"button\">\n        Popover on left\n      </Button>\n      \n      <Popover \n        placement=\"left\" \n        isOpen={isOpenLeft} \n        target=\"Popover1\" \n        toggle={() => setIsOpenLeft(!isOpenLeft)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n\n      <Button id=\"Popover2\" type=\"button\">\n        Popover on right\n      </Button>\n      <Popover \n        placement=\"right\" \n        isOpen={isOpenRight} \n        target=\"Popover2\" \n        toggle={() => setIsOpenRight(!isOpenRight)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n     </Fragment>\n  );\n}`;\nconst propertiesCode = `Popover.propTypes = {\n  // space separated list of triggers (e.g. \"click hover focus\")\n  trigger: PropTypes.string,\n  // boolean to control the state of the popover\n  isOpen:  PropTypes.bool,\n  // callback for toggling isOpen in the controlling component\n  toggle:  PropTypes.func,\n  // boundaries for popper, can be scrollParent, window, viewport, or any DOM element\n  boundariesElement: PropTypes.oneOfType([PropTypes.string, DOMElement]),\n  target:  PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n    DOMElement, // instanceof Element (https://developer.mozilla.org/en-US/docs/Web/API/Element)\n  ]).isRequired,\n  // Where to inject the popper DOM node, default to body\n  container: PropTypes.oneOfType([PropTypes.string, PropTypes.func, DOMElement]),\n  className: PropTypes.string,\n  // Apply class to the inner-popover\n  innerClassName: PropTypes.string,\n  disabled: PropTypes.bool,\n  hideArrow: PropTypes.bool,\n  placementPrefix: PropTypes.string,\n  delay: PropTypes.oneOfType([\n    PropTypes.shape({ show: PropTypes.number, hide: PropTypes.number }),\n    PropTypes.number,\n  ]),\n  placement: PropTypes.oneOf([\n    'auto',\n    'auto-start',\n    'auto-end',\n    'top',\n    'top-start',\n    'top-end',\n    'right',\n    'right-start',\n    'right-end',\n    'bottom',\n    'bottom-start',\n    'bottom-end',\n    'left',\n    'left-start',\n    'left-end',\n  ]),\n  // Custom modifiers that are passed to Popper.js, see https://popper.js.org/popper-documentation.html#modifiers\n  modifiers: PropTypes.object,\n  offset: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number\n  ]),\n\n  // Whether to show/hide the popover with a fade effect\n  // (default: true)\n  fade: PropTypes.bool,\n\n  // Whether to flip the direction of the popover if too close to\n  // the container edge\n  // (default: true)\n  flip: PropTypes.bool,\n}`;\n\nconst Popovers = () => {\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PageHeader, {\n    title: \"Popovers\",\n    description: \"Documentation and examples for showing pagination to indicate a series of related content exists across multiple pages.\",\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    tag: \"a\",\n    href: \"https://reactstrap.github.io/components/buttons\",\n    target: \"_blank\",\n    color: \"link\",\n    size: \"sm\",\n    className: \"pl-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, \"Popovers on reactstrap\", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"chevron-right\",\n    className: \"ml-1 fs--2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Card, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FalconCardHeader, {\n    title: \"Examples\",\n    light: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"bg-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FalconEditor, {\n    code: popoversExampleCode,\n    language: \"jsx\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FalconCardHeader, {\n    title: \"Properties\",\n    light: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"bg-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    className: \"bg-dark d-block p-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"pre\", {\n    className: \"text-300\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, propertiesCode)))));\n};\n\nexport default Popovers;","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/components/bootstrap-components/Popovers.js"],"names":["React","Fragment","Button","Card","CardBody","FontAwesomeIcon","PageHeader","FalconCardHeader","FalconEditor","popoversExampleCode","propertiesCode","Popovers"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,QAAuC,YAAvC;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AAEA,MAAMC,mBAAmB,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAA7B;AAgEA,MAAMC,cAAc,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAxB;;AA4DA,MAAMC,QAAQ,GAAG,MAAM;AACrB,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AACE,IAAA,KAAK,EAAC,UADR;AAEE,IAAA,WAAW,EAAC,yHAFd;AAGE,IAAA,SAAS,EAAC,MAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,MAAD;AACE,IAAA,GAAG,EAAC,GADN;AAEE,IAAA,IAAI,EAAC,iDAFP;AAGE,IAAA,MAAM,EAAC,QAHT;AAIE,IAAA,KAAK,EAAC,MAJR;AAKE,IAAA,IAAI,EAAC,IALP;AAME,IAAA,SAAS,EAAC,MANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CASE,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAC,eAAtB;AAAsC,IAAA,SAAS,EAAC,YAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CALF,CADF,eAkBE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAC,UAAxB;AAAmC,IAAA,KAAK,EAAE,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAEF,mBAApB;AAAyC,IAAA,QAAQ,EAAC,KAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CAlBF,eAwBE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAC,YAAxB;AAAqC,IAAA,KAAK,EAAE,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAC,qBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BC,cAA3B,CADF,CADF,CAFF,CAxBF,CADF;AAmCD,CApCD;;AAsCA,eAAeC,QAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport { Button, Card, CardBody } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\n\nconst popoversExampleCode = `function popoversExample() {\n  const [isOpenLeft, setIsOpenLeft] = useState(false);\n  const [isOpenRight, setIsOpenRight] = useState(false);\n  const [isOpenTop, setIsOpenTop] = useState(false);\n  const [isOpenBottom, setIsOpenBottom] = useState(false);\n  \n  return(\n    <Fragment>\n      <Button id=\"Popover3\" className=\"mr-2\" type=\"button\">\n        Popover on top\n      </Button>\n      <Popover \n        placement=\"top\" \n        isOpen={isOpenTop} \n        target=\"Popover3\" \n        toggle={() => setIsOpenTop(!isOpenTop)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n\n      <Button id=\"Popover4\" className=\"mr-2\" type=\"button\">\n        Popover on Bottom\n      </Button>\n      <Popover\n        placement=\"bottom\"\n        isOpen={isOpenBottom}\n        target=\"Popover4\"\n        toggle={() => setIsOpenBottom(!isOpenBottom)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n      \n      <Button id=\"Popover1\" className=\"mr-2\" type=\"button\">\n        Popover on left\n      </Button>\n      \n      <Popover \n        placement=\"left\" \n        isOpen={isOpenLeft} \n        target=\"Popover1\" \n        toggle={() => setIsOpenLeft(!isOpenLeft)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n\n      <Button id=\"Popover2\" type=\"button\">\n        Popover on right\n      </Button>\n      <Popover \n        placement=\"right\" \n        isOpen={isOpenRight} \n        target=\"Popover2\" \n        toggle={() => setIsOpenRight(!isOpenRight)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n     </Fragment>\n  );\n}`;\n\nconst propertiesCode = `Popover.propTypes = {\n  // space separated list of triggers (e.g. \"click hover focus\")\n  trigger: PropTypes.string,\n  // boolean to control the state of the popover\n  isOpen:  PropTypes.bool,\n  // callback for toggling isOpen in the controlling component\n  toggle:  PropTypes.func,\n  // boundaries for popper, can be scrollParent, window, viewport, or any DOM element\n  boundariesElement: PropTypes.oneOfType([PropTypes.string, DOMElement]),\n  target:  PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n    DOMElement, // instanceof Element (https://developer.mozilla.org/en-US/docs/Web/API/Element)\n  ]).isRequired,\n  // Where to inject the popper DOM node, default to body\n  container: PropTypes.oneOfType([PropTypes.string, PropTypes.func, DOMElement]),\n  className: PropTypes.string,\n  // Apply class to the inner-popover\n  innerClassName: PropTypes.string,\n  disabled: PropTypes.bool,\n  hideArrow: PropTypes.bool,\n  placementPrefix: PropTypes.string,\n  delay: PropTypes.oneOfType([\n    PropTypes.shape({ show: PropTypes.number, hide: PropTypes.number }),\n    PropTypes.number,\n  ]),\n  placement: PropTypes.oneOf([\n    'auto',\n    'auto-start',\n    'auto-end',\n    'top',\n    'top-start',\n    'top-end',\n    'right',\n    'right-start',\n    'right-end',\n    'bottom',\n    'bottom-start',\n    'bottom-end',\n    'left',\n    'left-start',\n    'left-end',\n  ]),\n  // Custom modifiers that are passed to Popper.js, see https://popper.js.org/popper-documentation.html#modifiers\n  modifiers: PropTypes.object,\n  offset: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number\n  ]),\n\n  // Whether to show/hide the popover with a fade effect\n  // (default: true)\n  fade: PropTypes.bool,\n\n  // Whether to flip the direction of the popover if too close to\n  // the container edge\n  // (default: true)\n  flip: PropTypes.bool,\n}`;\n\nconst Popovers = () => {\n  return (\n    <Fragment>\n      <PageHeader\n        title=\"Popovers\"\n        description=\"Documentation and examples for showing pagination to indicate a series of related content exists across multiple pages.\"\n        className=\"mb-3\"\n      >\n        <Button\n          tag=\"a\"\n          href=\"https://reactstrap.github.io/components/buttons\"\n          target=\"_blank\"\n          color=\"link\"\n          size=\"sm\"\n          className=\"pl-0\"\n        >\n          Popovers on reactstrap\n          <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n        </Button>\n      </PageHeader>\n      <Card className=\"mb-3\">\n        <FalconCardHeader title=\"Examples\" light={false} />\n        <CardBody className=\"bg-light\">\n          <FalconEditor code={popoversExampleCode} language=\"jsx\" />\n        </CardBody>\n      </Card>\n      <Card>\n        <FalconCardHeader title=\"Properties\" light={false} />\n        <CardBody className=\"bg-light\">\n          <code className=\"bg-dark d-block p-2\">\n            <pre className=\"text-300\">{propertiesCode}</pre>\n          </code>\n        </CardBody>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default Popovers;\n"]},"metadata":{},"sourceType":"module"}