{"ast":null,"code":"import { useEffect, useState } from 'react';\n\nconst useBulkSelect = items => {\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [isAllSelected, setIsAllSelected] = useState(false);\n  const [isIndeterminate, setIsIndeterminate] = useState(false);\n\n  const toggleSelectedItem = id => {\n    const isAlreadySelected = selectedItems.find(item => item === id);\n\n    if (isAlreadySelected) {\n      setSelectedItems(selectedItems.filter(item => item !== id));\n    } else {\n      setSelectedItems([...selectedItems, id]);\n    }\n  };\n\n  const toggleIsAllSelected = () => {\n    if (isAllSelected || isIndeterminate) {\n      setSelectedItems([]);\n    } else {\n      setSelectedItems(items);\n    }\n  };\n\n  const isSelectedItem = id => {\n    return !!selectedItems.find(item => item === id);\n  };\n\n  useEffect(() => {\n    setIsAllSelected(selectedItems.length === items.length);\n    setIsIndeterminate(!!selectedItems.length && selectedItems.length < items.length);\n  }, [selectedItems, items]);\n  return {\n    selectedItems,\n    isAllSelected,\n    isIndeterminate,\n    toggleSelectedItem,\n    toggleIsAllSelected,\n    isSelectedItem\n  };\n};\n\nexport default useBulkSelect;","map":{"version":3,"sources":["/Users/greypro/Documents/Dev/letter/letter-support/src/hooks/useBulkSelect.js"],"names":["useEffect","useState","useBulkSelect","items","selectedItems","setSelectedItems","isAllSelected","setIsAllSelected","isIndeterminate","setIsIndeterminate","toggleSelectedItem","id","isAlreadySelected","find","item","filter","toggleIsAllSelected","isSelectedItem","length"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAC7B,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,KAAD,CAAtD;;AAEA,QAAMS,kBAAkB,GAAGC,EAAE,IAAI;AAC/B,UAAMC,iBAAiB,GAAGR,aAAa,CAACS,IAAd,CAAmBC,IAAI,IAAIA,IAAI,KAAKH,EAApC,CAA1B;;AACA,QAAIC,iBAAJ,EAAuB;AACrBP,MAAAA,gBAAgB,CAACD,aAAa,CAACW,MAAd,CAAqBD,IAAI,IAAIA,IAAI,KAAKH,EAAtC,CAAD,CAAhB;AACD,KAFD,MAEO;AACLN,MAAAA,gBAAgB,CAAC,CAAC,GAAGD,aAAJ,EAAmBO,EAAnB,CAAD,CAAhB;AACD;AACF,GAPD;;AASA,QAAMK,mBAAmB,GAAG,MAAM;AAChC,QAAIV,aAAa,IAAIE,eAArB,EAAsC;AACpCH,MAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD,KAFD,MAEO;AACLA,MAAAA,gBAAgB,CAACF,KAAD,CAAhB;AACD;AACF,GAND;;AAQA,QAAMc,cAAc,GAAGN,EAAE,IAAI;AAC3B,WAAO,CAAC,CAACP,aAAa,CAACS,IAAd,CAAmBC,IAAI,IAAIA,IAAI,KAAKH,EAApC,CAAT;AACD,GAFD;;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,gBAAgB,CAACH,aAAa,CAACc,MAAd,KAAyBf,KAAK,CAACe,MAAhC,CAAhB;AACAT,IAAAA,kBAAkB,CAAC,CAAC,CAACL,aAAa,CAACc,MAAhB,IAA0Bd,aAAa,CAACc,MAAd,GAAuBf,KAAK,CAACe,MAAxD,CAAlB;AACD,GAHQ,EAGN,CAACd,aAAD,EAAgBD,KAAhB,CAHM,CAAT;AAKA,SAAO;AAAEC,IAAAA,aAAF;AAAiBE,IAAAA,aAAjB;AAAgCE,IAAAA,eAAhC;AAAiDE,IAAAA,kBAAjD;AAAqEM,IAAAA,mBAArE;AAA0FC,IAAAA;AAA1F,GAAP;AACD,CAhCD;;AAkCA,eAAef,aAAf","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst useBulkSelect = items => {\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [isAllSelected, setIsAllSelected] = useState(false);\n  const [isIndeterminate, setIsIndeterminate] = useState(false);\n\n  const toggleSelectedItem = id => {\n    const isAlreadySelected = selectedItems.find(item => item === id);\n    if (isAlreadySelected) {\n      setSelectedItems(selectedItems.filter(item => item !== id));\n    } else {\n      setSelectedItems([...selectedItems, id]);\n    }\n  };\n\n  const toggleIsAllSelected = () => {\n    if (isAllSelected || isIndeterminate) {\n      setSelectedItems([]);\n    } else {\n      setSelectedItems(items);\n    }\n  };\n\n  const isSelectedItem = id => {\n    return !!selectedItems.find(item => item === id);\n  };\n\n  useEffect(() => {\n    setIsAllSelected(selectedItems.length === items.length);\n    setIsIndeterminate(!!selectedItems.length && selectedItems.length < items.length);\n  }, [selectedItems, items]);\n\n  return { selectedItems, isAllSelected, isIndeterminate, toggleSelectedItem, toggleIsAllSelected, isSelectedItem };\n};\n\nexport default useBulkSelect;\n"]},"metadata":{},"sourceType":"module"}