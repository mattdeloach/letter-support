{"ast":null,"code":"var _jsxFileName = \"/Users/greypro/Documents/Dev/letter/letter-support/src/components/kanban/KanbanColumn.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport KanbanColumnHeder from './KanbanColumnHeader';\nimport { KanbanContext } from '../../context/Context';\nimport { Droppable } from 'react-beautiful-dnd';\nimport AddAnotherCard from './AddAnotherCard';\nimport users from '../../data/dashboard/users';\nimport ButtonIcon from '../common/ButtonIcon';\nimport TaskCard from './TaskCard';\n\nconst KanbanColumn = ({\n  kanbanColumnItem,\n  index\n}) => {\n  const {\n    kanbanTaskCards\n  } = useContext(KanbanContext);\n  const [showForm, setShowForm] = useState(false);\n  useEffect(() => {\n    const kanbanContainer = document.getElementById(`container-${index}`);\n    kanbanContainer.scrollTop = kanbanContainer.scrollHeight;\n  }, [showForm, index]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames('kanban-column', {\n      'form-added': showForm\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(KanbanColumnHeder, {\n    kanbanColumnItem: kanbanColumnItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: kanbanColumnItem.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    className: \"kanban-items-container scrollbar\",\n    id: `container-${index}`,\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }), kanbanColumnItem.items.map((taskCardItemId, taskCardIndex) => {\n    const taskCard = kanbanTaskCards.find(({\n      id\n    }) => id === taskCardItemId);\n    const taskCardImage = taskCard.attachments && taskCard.attachments.find(({\n      type\n    }) => type === 'image');\n    const members = taskCard.members && taskCard.members.map(member => {\n      return users.find(user => member === user.id);\n    });\n    return /*#__PURE__*/React.createElement(TaskCard, {\n      members: members,\n      taskCardImage: taskCardImage,\n      taskCard: taskCard,\n      key: taskCardItemId,\n      taskCardIndex: taskCardIndex,\n      taskCardItemId: taskCardItemId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 19\n      }\n    });\n  }), showForm && /*#__PURE__*/React.createElement(AddAnotherCard, {\n    kanbanColumnItem: kanbanColumnItem,\n    setShowForm: setShowForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 28\n    }\n  }), provided.placeholder), !showForm && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kanban-column-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ButtonIcon, {\n    className: \"btn-add-card text-600 text-decoration-none\",\n    color: \"link\",\n    block: true,\n    icon: \"plus\",\n    iconClassName: \"mr-1\",\n    size: \"sm\",\n    onClick: () => {\n      setShowForm(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, \"Add another card\")))));\n};\n\nKanbanColumn.propTypes = {\n  kanbanColumnItem: PropTypes.object.isRequired\n};\nexport default KanbanColumn;","map":{"version":3,"sources":["/Users/greypro/Documents/Dev/letter/letter-support/src/components/kanban/KanbanColumn.js"],"names":["React","useContext","useState","useEffect","PropTypes","classNames","KanbanColumnHeder","KanbanContext","Droppable","AddAnotherCard","users","ButtonIcon","TaskCard","KanbanColumn","kanbanColumnItem","index","kanbanTaskCards","showForm","setShowForm","kanbanContainer","document","getElementById","scrollTop","scrollHeight","id","provided","snapshot","innerRef","droppableProps","items","map","taskCardItemId","taskCardIndex","taskCard","find","taskCardImage","attachments","type","members","member","user","placeholder","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport KanbanColumnHeder from './KanbanColumnHeader';\r\nimport { KanbanContext } from '../../context/Context';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\n\r\nimport AddAnotherCard from './AddAnotherCard';\r\nimport users from '../../data/dashboard/users';\r\nimport ButtonIcon from '../common/ButtonIcon';\r\nimport TaskCard from './TaskCard';\r\n\r\nconst KanbanColumn = ({ kanbanColumnItem, index }) => {\r\n  const { kanbanTaskCards } = useContext(KanbanContext);\r\n  const [showForm, setShowForm] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const kanbanContainer = document.getElementById(`container-${index}`);\r\n    kanbanContainer.scrollTop = kanbanContainer.scrollHeight;\r\n  }, [showForm, index]);\r\n\r\n  return (\r\n    <div className={classNames('kanban-column', { 'form-added': showForm })}>\r\n      <KanbanColumnHeder kanbanColumnItem={kanbanColumnItem} />\r\n      <Droppable droppableId={kanbanColumnItem.id}>\r\n        {(provided, snapshot) => (\r\n          <>\r\n            <div\r\n              className=\"kanban-items-container scrollbar\"\r\n              id={`container-${index}`}\r\n              ref={provided.innerRef}\r\n              {...provided.droppableProps}\r\n            >\r\n              {kanbanColumnItem.items.map((taskCardItemId, taskCardIndex) => {\r\n                const taskCard = kanbanTaskCards.find(({ id }) => id === taskCardItemId);\r\n\r\n                const taskCardImage = taskCard.attachments && taskCard.attachments.find(({ type }) => type === 'image');\r\n\r\n                const members =\r\n                  taskCard.members &&\r\n                  taskCard.members.map(member => {\r\n                    return users.find(user => member === user.id);\r\n                  });\r\n\r\n                return (\r\n                  <TaskCard\r\n                    members={members}\r\n                    taskCardImage={taskCardImage}\r\n                    taskCard={taskCard}\r\n                    key={taskCardItemId}\r\n                    taskCardIndex={taskCardIndex}\r\n                    taskCardItemId={taskCardItemId}\r\n                  />\r\n                );\r\n              })}\r\n              {showForm && <AddAnotherCard kanbanColumnItem={kanbanColumnItem} setShowForm={setShowForm} />}\r\n              {provided.placeholder}\r\n            </div>\r\n            {!showForm && (\r\n              <div className=\"kanban-column-footer\">\r\n                <ButtonIcon\r\n                  className=\"btn-add-card text-600 text-decoration-none\"\r\n                  color=\"link\"\r\n                  block\r\n                  icon=\"plus\"\r\n                  iconClassName=\"mr-1\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    setShowForm(true);\r\n                  }}\r\n                >\r\n                  Add another card\r\n                </ButtonIcon>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\nKanbanColumn.propTypes = {\r\n  kanbanColumnItem: PropTypes.object.isRequired\r\n};\r\nexport default KanbanColumn;\r\n"]},"metadata":{},"sourceType":"module"}