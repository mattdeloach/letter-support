{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/components/bootstrap-components/Dropdowns.js\";\nimport React, { Fragment } from 'react';\nimport { Button, Card, CardBody } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nimport Flex from '../common/Flex';\nconst dropdownCode = `function dropdownExample() {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  return (\n    <Dropdown isOpen={isOpen} toggle={() => setIsOpen(!isOpen)}>\n      <DropdownToggle caret className=\"btn btn-falcon-default\">\n        Dropdown button\n      </DropdownToggle>\n      <DropdownMenu>\n        <DropdownItem header>Header</DropdownItem>\n        <DropdownItem>Some Action</DropdownItem>\n        <DropdownItem disabled>Action (disabled)</DropdownItem>\n        <DropdownItem divider />\n        <DropdownItem>Foo Action</DropdownItem>\n        <DropdownItem>Bar Action</DropdownItem>\n        <DropdownItem>Quo Action</DropdownItem>\n      </DropdownMenu>\n    </Dropdown>\n  );\n}`;\nconst dropdownAlignmentExample = `function dropdownAlignmentExample() {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  \n  return (\n    <Dropdown isOpen={dropdownOpen} toggle={() => setDropdownOpen(!dropdownOpen)}>\n      <DropdownToggle className=\"btn btn-falcon-default\" caret>\n         This dropdown's menu is aligned\n      </DropdownToggle>\n      <DropdownMenu right>\n        <DropdownItem header>Header</DropdownItem>\n        <DropdownItem disabled>Action</DropdownItem>\n        <DropdownItem>Another Action</DropdownItem>\n        <DropdownItem divider/>\n        <DropdownItem>Another Action</DropdownItem>\n      </DropdownMenu>\n    </Dropdown>\n  );\n}`;\nconst dropdownSizingCode = `function dropdownSizingExample() {\n  const [isOpenOne, setIsOpenOne] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isOpenThree, setIsOpenThree] = useState(false);\n  \n  return (\n    <Fragment>\n      <Dropdown group isOpen={isOpenOne} toggle={() => setIsOpenOne(!isOpenOne)}>\n        <DropdownToggle caret size=\"lg\" className=\"btn btn-falcon-default mb-2\">\n          Dropdown\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem>Some Action</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n      <Dropdown isOpen={isOpenTwo} toggle={() => setIsOpenTwo(!isOpenTwo)}>\n        <DropdownToggle caret className=\"btn btn-falcon-default mb-2\">\n          Dropdown\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem>Some Action</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n      <Dropdown isOpen={isOpenThree} toggle={() => setIsOpenThree(!isOpenThree)}>\n        <DropdownToggle caret size=\"sm\" className=\"btn btn-falcon-default\">\n          Dropdown\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem>Some Action</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n    </Fragment>\n  );\n}`;\nconst dropdownDirectionCode = `function dropdownDirectionExample() {\n  const [isOpenUp, setIsOpenUp] = useState(false);\n  const [isOpenLeft, setIsOpenLeft] = useState(false);\n  const [isOpenRight, setIsOpenRight] = useState(false);\n  \n  return (\n    <Flex justify=\"between\">\n      <Dropdown direction=\"right\" isOpen={isOpenRight} toggle={() => setIsOpenRight(!isOpenRight)}>\n        <DropdownToggle caret className=\"btn btn-falcon-default\">\n          Dropright\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem>Some Action</DropdownItem>\n        </DropdownMenu>\n       </Dropdown>\n      <Dropdown direction=\"up\" isOpen={isOpenUp} toggle={() => setIsOpenUp(!isOpenUp)}>\n        <DropdownToggle caret className=\"btn btn-falcon-default mr-2\">\n          Dropup\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem>Some Action</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n        <Dropdown direction=\"left\" isOpen={isOpenLeft} toggle={() => setIsOpenLeft(!isOpenLeft)}>\n        <DropdownToggle caret className=\"btn btn-falcon-default mr-2\">\n          Dropleft\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem>Some Action</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n    </Flex>\n  );\n}`;\nconst dropdownUncontrolledCode = `<UncontrolledDropdown>\n  <DropdownToggle caret>\n    Dropdown\n  </DropdownToggle>\n  <DropdownMenu>\n    <DropdownItem header>Header</DropdownItem>\n    <DropdownItem disabled>Action</DropdownItem>\n    <DropdownItem>Another Action</DropdownItem>\n    <DropdownItem divider />\n    <DropdownItem>Another Action</DropdownItem>\n  </DropdownMenu>\n</UncontrolledDropdown>`;\nconst dropdownProperties = `Dropdown.propTypes = {\n  disabled: PropTypes.bool,\n  direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\n  group: PropTypes.bool,\n  isOpen: PropTypes.bool,\n  // For Dropdown usage inside a Nav\n  nav: PropTypes.bool,\n  active: PropTypes.bool,\n  // For Dropdown usage inside a Navbar (disables popper)\n  inNavbar: PropTypes.bool,\n  tag: PropTypes.string, //default: 'div' unless nav=true, then 'li'\n  toggle: PropTypes.func,\n  setActiveFromChild: PropTypes.bool\n};`;\nconst dropdownToggleProperties = `DropdownToggle.propTypes = {\n  caret: PropTypes.bool,\n  color: PropTypes.string,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  'data-toggle': PropTypes.string,\n  'aria-haspopup': PropTypes.bool,\n  // For DropdownToggle usage inside a Nav\n  nav: PropTypes.bool,\n  // Defaults to Button component\n  tag: PropTypes.any\n};`;\nconst dropdownMenuProperties = `DropdownMenu.propTypes = {\n  tag: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  right: PropTypes.bool,\n  flip: PropTypes.bool, //default: true,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  // Custom modifiers that are passed to DropdownMenu.js, see https://popper.js.org/popper-documentation.html#modifiers\n  modifiers: PropTypes.object,\n  persist: PropTypes.bool, //presist the popper, even when closed. See #779 for reasoning\n  // passed to popper, see https://popper.js.org/popper-documentation.html#Popper.Defaults.positionFixed\n  positionFixed: PropTypes.bool\n};`;\nconst dropdownItemProperties = `DropdownItem.propTypes = {\n  children: PropTypes.node,\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  divider: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  header: PropTypes.bool,\n  onClick: PropTypes.func,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  toggle: PropTypes.bool //default: true\n};`;\n\nconst Dropdowns = () => /*#__PURE__*/React.createElement(Fragment, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(PageHeader, {\n  title: \"Dropdown\",\n  description: \"Toggle contextual overlays for displaying lists of links and more with the Falcon dropdown plugin.\",\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Button, {\n  tag: \"a\",\n  href: \"https://reactstrap.github.io/components/dropdowns\",\n  target: \"_blank\",\n  color: \"link\",\n  size: \"sm\",\n  className: \"pl-0\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 7\n  }\n}, \"Dropdowns on reactstrap\", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n  icon: \"chevron-right\",\n  className: \"ml-1 fs--2\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Example\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: dropdownCode,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(CardBody, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: dropdownProperties,\n  hidePreview: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(FalconEditor, {\n  code: dropdownToggleProperties,\n  hidePreview: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(FalconEditor, {\n  code: dropdownMenuProperties,\n  hidePreview: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(FalconEditor, {\n  code: dropdownItemProperties,\n  hidePreview: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Uncontrolled Dropdown\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: dropdownUncontrolledCode,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Alignment\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: dropdownAlignmentExample,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  className: \"mb-3\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Sizing\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: dropdownSizingCode,\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 9\n  }\n}))), /*#__PURE__*/React.createElement(Card, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FalconCardHeader, {\n  title: \"Direction\",\n  light: false,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(CardBody, {\n  className: \"bg-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(FalconEditor, {\n  code: dropdownDirectionCode,\n  scope: {\n    Flex\n  },\n  language: \"jsx\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 9\n  }\n}))));\n\nexport default Dropdowns;","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/components/bootstrap-components/Dropdowns.js"],"names":["React","Fragment","Button","Card","CardBody","FontAwesomeIcon","PageHeader","FalconCardHeader","FalconEditor","Flex","dropdownCode","dropdownAlignmentExample","dropdownSizingCode","dropdownDirectionCode","dropdownUncontrolledCode","dropdownProperties","dropdownToggleProperties","dropdownMenuProperties","dropdownItemProperties","Dropdowns"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { Button, Card, CardBody } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nimport Flex from '../common/Flex';\n\nconst dropdownCode = `function dropdownExample() {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  return (\n    <Dropdown isOpen={isOpen} toggle={() => setIsOpen(!isOpen)}>\n      <DropdownToggle caret className=\"btn btn-falcon-default\">\n        Dropdown button\n      </DropdownToggle>\n      <DropdownMenu>\n        <DropdownItem header>Header</DropdownItem>\n        <DropdownItem>Some Action</DropdownItem>\n        <DropdownItem disabled>Action (disabled)</DropdownItem>\n        <DropdownItem divider />\n        <DropdownItem>Foo Action</DropdownItem>\n        <DropdownItem>Bar Action</DropdownItem>\n        <DropdownItem>Quo Action</DropdownItem>\n      </DropdownMenu>\n    </Dropdown>\n  );\n}`;\n\nconst dropdownAlignmentExample = `function dropdownAlignmentExample() {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  \n  return (\n    <Dropdown isOpen={dropdownOpen} toggle={() => setDropdownOpen(!dropdownOpen)}>\n      <DropdownToggle className=\"btn btn-falcon-default\" caret>\n         This dropdown's menu is aligned\n      </DropdownToggle>\n      <DropdownMenu right>\n        <DropdownItem header>Header</DropdownItem>\n        <DropdownItem disabled>Action</DropdownItem>\n        <DropdownItem>Another Action</DropdownItem>\n        <DropdownItem divider/>\n        <DropdownItem>Another Action</DropdownItem>\n      </DropdownMenu>\n    </Dropdown>\n  );\n}`;\n\nconst dropdownSizingCode = `function dropdownSizingExample() {\n  const [isOpenOne, setIsOpenOne] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isOpenThree, setIsOpenThree] = useState(false);\n  \n  return (\n    <Fragment>\n      <Dropdown group isOpen={isOpenOne} toggle={() => setIsOpenOne(!isOpenOne)}>\n        <DropdownToggle caret size=\"lg\" className=\"btn btn-falcon-default mb-2\">\n          Dropdown\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem>Some Action</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n      <Dropdown isOpen={isOpenTwo} toggle={() => setIsOpenTwo(!isOpenTwo)}>\n        <DropdownToggle caret className=\"btn btn-falcon-default mb-2\">\n          Dropdown\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem>Some Action</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n      <Dropdown isOpen={isOpenThree} toggle={() => setIsOpenThree(!isOpenThree)}>\n        <DropdownToggle caret size=\"sm\" className=\"btn btn-falcon-default\">\n          Dropdown\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem>Some Action</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n    </Fragment>\n  );\n}`;\n\nconst dropdownDirectionCode = `function dropdownDirectionExample() {\n  const [isOpenUp, setIsOpenUp] = useState(false);\n  const [isOpenLeft, setIsOpenLeft] = useState(false);\n  const [isOpenRight, setIsOpenRight] = useState(false);\n  \n  return (\n    <Flex justify=\"between\">\n      <Dropdown direction=\"right\" isOpen={isOpenRight} toggle={() => setIsOpenRight(!isOpenRight)}>\n        <DropdownToggle caret className=\"btn btn-falcon-default\">\n          Dropright\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem>Some Action</DropdownItem>\n        </DropdownMenu>\n       </Dropdown>\n      <Dropdown direction=\"up\" isOpen={isOpenUp} toggle={() => setIsOpenUp(!isOpenUp)}>\n        <DropdownToggle caret className=\"btn btn-falcon-default mr-2\">\n          Dropup\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem>Some Action</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n        <Dropdown direction=\"left\" isOpen={isOpenLeft} toggle={() => setIsOpenLeft(!isOpenLeft)}>\n        <DropdownToggle caret className=\"btn btn-falcon-default mr-2\">\n          Dropleft\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem>Some Action</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n    </Flex>\n  );\n}`;\n\nconst dropdownUncontrolledCode = `<UncontrolledDropdown>\n  <DropdownToggle caret>\n    Dropdown\n  </DropdownToggle>\n  <DropdownMenu>\n    <DropdownItem header>Header</DropdownItem>\n    <DropdownItem disabled>Action</DropdownItem>\n    <DropdownItem>Another Action</DropdownItem>\n    <DropdownItem divider />\n    <DropdownItem>Another Action</DropdownItem>\n  </DropdownMenu>\n</UncontrolledDropdown>`;\n\nconst dropdownProperties = `Dropdown.propTypes = {\n  disabled: PropTypes.bool,\n  direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\n  group: PropTypes.bool,\n  isOpen: PropTypes.bool,\n  // For Dropdown usage inside a Nav\n  nav: PropTypes.bool,\n  active: PropTypes.bool,\n  // For Dropdown usage inside a Navbar (disables popper)\n  inNavbar: PropTypes.bool,\n  tag: PropTypes.string, //default: 'div' unless nav=true, then 'li'\n  toggle: PropTypes.func,\n  setActiveFromChild: PropTypes.bool\n};`;\n\nconst dropdownToggleProperties = `DropdownToggle.propTypes = {\n  caret: PropTypes.bool,\n  color: PropTypes.string,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  'data-toggle': PropTypes.string,\n  'aria-haspopup': PropTypes.bool,\n  // For DropdownToggle usage inside a Nav\n  nav: PropTypes.bool,\n  // Defaults to Button component\n  tag: PropTypes.any\n};`;\nconst dropdownMenuProperties = `DropdownMenu.propTypes = {\n  tag: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  right: PropTypes.bool,\n  flip: PropTypes.bool, //default: true,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  // Custom modifiers that are passed to DropdownMenu.js, see https://popper.js.org/popper-documentation.html#modifiers\n  modifiers: PropTypes.object,\n  persist: PropTypes.bool, //presist the popper, even when closed. See #779 for reasoning\n  // passed to popper, see https://popper.js.org/popper-documentation.html#Popper.Defaults.positionFixed\n  positionFixed: PropTypes.bool\n};`;\n\nconst dropdownItemProperties = `DropdownItem.propTypes = {\n  children: PropTypes.node,\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  divider: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  header: PropTypes.bool,\n  onClick: PropTypes.func,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  toggle: PropTypes.bool //default: true\n};`;\n\nconst Dropdowns = () => (\n  <Fragment>\n    <PageHeader\n      title=\"Dropdown\"\n      description=\"Toggle contextual overlays for displaying lists of links and more with the Falcon dropdown plugin.\"\n      className=\"mb-3\"\n    >\n      <Button\n        tag=\"a\"\n        href=\"https://reactstrap.github.io/components/dropdowns\"\n        target=\"_blank\"\n        color=\"link\"\n        size=\"sm\"\n        className=\"pl-0\"\n      >\n        Dropdowns on reactstrap\n        <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n      </Button>\n    </PageHeader>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Example\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={dropdownCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <CardBody>\n        <FalconEditor code={dropdownProperties} hidePreview />\n        <FalconEditor code={dropdownToggleProperties} hidePreview />\n        <FalconEditor code={dropdownMenuProperties} hidePreview />\n        <FalconEditor code={dropdownItemProperties} hidePreview />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Uncontrolled Dropdown\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={dropdownUncontrolledCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Alignment\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={dropdownAlignmentExample} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Sizing\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={dropdownSizingCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card>\n      <FalconCardHeader title=\"Direction\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={dropdownDirectionCode} scope={{ Flex }} language=\"jsx\" />\n      </CardBody>\n    </Card>\n  </Fragment>\n);\n\nexport default Dropdowns;\n"]},"metadata":{},"sourceType":"module"}