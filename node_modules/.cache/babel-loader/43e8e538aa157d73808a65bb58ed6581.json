{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Dev/letter/letter-support/src/components/dashboard-alt/StorageStatus.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, Row } from 'reactstrap';\nimport Flex from '../common/Flex';\nimport { isIterableArray } from '../../helpers/utils';\nimport StorageStatusProgressBar from './StorageStatusProgressBar';\nimport StorageStatusDot from './StorageStatusDot';\nimport FalconProgress from '../common/FalconProgress';\n\nconst StorageStatus = ({\n  data,\n  className\n}) => {\n  const totalStorage = data.map(d => d.size).reduce((total, currentValue) => total + currentValue, 0);\n  const freeStorage = data.find(d => d.name === 'Free').size;\n  return /*#__PURE__*/React.createElement(Card, {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    tag: Flex,\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-3 text-800\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }\n  }, \"Using Storage \", /*#__PURE__*/React.createElement(\"strong\", {\n    className: \"text-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 27\n    }\n  }, totalStorage - freeStorage, \" MB \"), \"of\", ' ', Math.round(totalStorage / 1024), \" GB\"), /*#__PURE__*/React.createElement(FalconProgress, {\n    multi: true,\n    className: \"rounded-soft mb-3\",\n    style: {\n      height: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  }, isIterableArray(data) && data.map((d, index) => {\n    return /*#__PURE__*/React.createElement(StorageStatusProgressBar, Object.assign({}, d, {\n      percentage: d.size * 100 / totalStorage,\n      isLast: data.length - 1 === index,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 19\n      }\n    }));\n  })), /*#__PURE__*/React.createElement(Row, {\n    className: \"fs--1 font-weight-semi-bold text-500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, isIterableArray(data) && data.map((d, index) => /*#__PURE__*/React.createElement(StorageStatusDot, Object.assign({}, d, {\n    isFirst: index === 0,\n    isLast: data.length - 1 === index,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  })))))));\n};\n\nStorageStatus.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    size: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired\n  }).isRequired)\n};\nexport default StorageStatus;","map":{"version":3,"sources":["/Users/matt/Documents/Dev/letter/letter-support/src/components/dashboard-alt/StorageStatus.js"],"names":["React","PropTypes","Card","CardBody","Row","Flex","isIterableArray","StorageStatusProgressBar","StorageStatusDot","FalconProgress","StorageStatus","data","className","totalStorage","map","d","size","reduce","total","currentValue","freeStorage","find","name","Math","round","height","index","length","propTypes","arrayOf","shape","string","isRequired","number","color"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, CardBody, Row } from 'reactstrap';\r\nimport Flex from '../common/Flex';\r\nimport { isIterableArray } from '../../helpers/utils';\r\nimport StorageStatusProgressBar from './StorageStatusProgressBar';\r\nimport StorageStatusDot from './StorageStatusDot';\r\nimport FalconProgress from '../common/FalconProgress';\r\n\r\nconst StorageStatus = ({ data, className }) => {\r\n  const totalStorage = data.map(d => d.size).reduce((total, currentValue) => total + currentValue, 0);\r\n  const freeStorage = data.find(d => d.name === 'Free').size;\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardBody tag={Flex} align=\"center\">\r\n        <div className=\"w-100\">\r\n          <h6 className=\"mb-3 text-800\">\r\n            Using Storage <strong className=\"text-dark\">{totalStorage - freeStorage} MB </strong>of{' '}\r\n            {Math.round(totalStorage / 1024)} GB\r\n          </h6>\r\n          <FalconProgress multi className=\"rounded-soft mb-3\" style={{ height: '10px' }}>\r\n            {isIterableArray(data) &&\r\n              data.map((d, index) => {\r\n                return (\r\n                  <StorageStatusProgressBar\r\n                    {...d}\r\n                    percentage={(d.size * 100) / totalStorage}\r\n                    isLast={data.length - 1 === index}\r\n                    key={index}\r\n                  />\r\n                );\r\n              })}\r\n          </FalconProgress>\r\n          <Row className=\"fs--1 font-weight-semi-bold text-500\">\r\n            {isIterableArray(data) &&\r\n              data.map((d, index) => (\r\n                <StorageStatusDot {...d} isFirst={index === 0} isLast={data.length - 1 === index} key={index} />\r\n              ))}\r\n          </Row>\r\n        </div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nStorageStatus.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      size: PropTypes.number.isRequired,\r\n      color: PropTypes.string.isRequired\r\n    }).isRequired\r\n  )\r\n};\r\n\r\nexport default StorageStatus;\r\n"]},"metadata":{},"sourceType":"module"}