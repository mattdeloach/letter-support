{"ast":null,"code":"var _jsxFileName = \"/Users/greypro/Documents/Dev/letter/letter-support/src/components/chat/content/ChatContentBody.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Scrollbar from 'react-scrollbars-custom';\nimport Message from './Message';\nimport ThreadInfo from './ThreadInfo';\nimport { isIterableArray } from '../../../helpers/utils';\nimport AppContext, { ChatContext } from '../../../context/Context';\nimport ChatContentBodyIntro from './ChatContentBodyIntro';\n\nconst ChatContentBody = ({\n  thread,\n  isOpenThreadInfo\n}) => {\n  let lastDate = null;\n  const {\n    isRTL\n  } = useContext(AppContext);\n  const {\n    messages,\n    getUser,\n    textAreaInitialHeight\n  } = useContext(ChatContext);\n  const [scrollHeight, setScrollHeight] = useState(0);\n  const user = getUser(thread);\n  const isGroup = isIterableArray(thread.userId);\n  const {\n    content\n  } = messages.find(({\n    id\n  }) => id === thread.messagesId);\n  useEffect(() => {\n    setTimeout(() => {\n      setScrollHeight(document.getElementsByClassName('chat-content-scroll-area')[0].scrollHeight);\n    }, 500);\n  }, [textAreaInitialHeight]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-content-body\",\n    style: {\n      display: 'inherit'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ThreadInfo, {\n    thread: thread,\n    isOpenThreadInfo: isOpenThreadInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Scrollbar, {\n    style: {\n      height: '100%',\n      minWidth: '75px',\n      display: 'block'\n    },\n    rtl: isRTL,\n    scrollTop: scrollHeight,\n    noScrollX: true,\n    trackYProps: {\n      renderer(props) {\n        const {\n          elementRef,\n          ...restProps\n        } = props;\n        return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, restProps, {\n          ref: elementRef,\n          className: \"TrackY\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 20\n          }\n        }));\n      }\n\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-content-scroll-area\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ChatContentBodyIntro, {\n    user: user,\n    isGroup: isGroup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }), isIterableArray(content) && content.map(({\n    message,\n    time,\n    senderUserId,\n    status\n  }, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 15\n    }\n  }, lastDate !== time.date && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-center fs--2 text-500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 19\n    }\n  }, `${time.date}, ${time.hour}`), (() => {\n    lastDate = time.date;\n  })(), /*#__PURE__*/React.createElement(Message, {\n    message: message,\n    senderUserId: senderUserId,\n    time: time,\n    status: status,\n    isGroup: isGroup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }))))));\n};\n\nChatContentBody.propTypes = {\n  thread: PropTypes.object.isRequired,\n  isOpenThreadInfo: PropTypes.bool\n};\nChatContentBody.defaultProps = {\n  isOpenThreadInfo: false\n};\nexport default ChatContentBody;","map":{"version":3,"sources":["/Users/greypro/Documents/Dev/letter/letter-support/src/components/chat/content/ChatContentBody.js"],"names":["React","useState","useContext","useEffect","PropTypes","Scrollbar","Message","ThreadInfo","isIterableArray","AppContext","ChatContext","ChatContentBodyIntro","ChatContentBody","thread","isOpenThreadInfo","lastDate","isRTL","messages","getUser","textAreaInitialHeight","scrollHeight","setScrollHeight","user","isGroup","userId","content","find","id","messagesId","setTimeout","document","getElementsByClassName","display","height","minWidth","renderer","props","elementRef","restProps","map","message","time","senderUserId","status","index","date","hour","propTypes","object","isRequired","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Scrollbar from 'react-scrollbars-custom';\r\nimport Message from './Message';\r\nimport ThreadInfo from './ThreadInfo';\r\nimport { isIterableArray } from '../../../helpers/utils';\r\nimport AppContext, { ChatContext } from '../../../context/Context';\r\nimport ChatContentBodyIntro from './ChatContentBodyIntro';\r\n\r\nconst ChatContentBody = ({ thread, isOpenThreadInfo }) => {\r\n  let lastDate = null;\r\n  const { isRTL } = useContext(AppContext);\r\n  const { messages, getUser, textAreaInitialHeight } = useContext(ChatContext);\r\n  const [scrollHeight, setScrollHeight] = useState(0);\r\n  const user = getUser(thread);\r\n  const isGroup = isIterableArray(thread.userId);\r\n  const { content } = messages.find(({ id }) => id === thread.messagesId);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setScrollHeight(document.getElementsByClassName('chat-content-scroll-area')[0].scrollHeight);\r\n    }, 500);\r\n  }, [textAreaInitialHeight]);\r\n\r\n  return (\r\n    <div className=\"chat-content-body\" style={{ display: 'inherit' }}>\r\n      <ThreadInfo thread={thread} isOpenThreadInfo={isOpenThreadInfo} />\r\n      <Scrollbar\r\n        style={{\r\n          height: '100%',\r\n          minWidth: '75px',\r\n          display: 'block'\r\n        }}\r\n        rtl={isRTL}\r\n        scrollTop={scrollHeight}\r\n        noScrollX\r\n        trackYProps={{\r\n          renderer(props) {\r\n            const { elementRef, ...restProps } = props;\r\n            return <span {...restProps} ref={elementRef} className=\"TrackY\" />;\r\n          }\r\n        }}\r\n      >\r\n        <div className=\"chat-content-scroll-area\">\r\n          <ChatContentBodyIntro user={user} isGroup={isGroup} />\r\n\r\n          {isIterableArray(content) &&\r\n            content.map(({ message, time, senderUserId, status }, index) => (\r\n              <div key={index}>\r\n                {lastDate !== time.date && (\r\n                  <div className=\"text-center fs--2 text-500\">{`${time.date}, ${time.hour}`}</div>\r\n                )}\r\n                {(() => {\r\n                  lastDate = time.date;\r\n                })()}\r\n                <Message message={message} senderUserId={senderUserId} time={time} status={status} isGroup={isGroup} />\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </Scrollbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nChatContentBody.propTypes = {\r\n  thread: PropTypes.object.isRequired,\r\n  isOpenThreadInfo: PropTypes.bool\r\n};\r\nChatContentBody.defaultProps = {\r\n  isOpenThreadInfo: false\r\n};\r\nexport default ChatContentBody;\r\n"]},"metadata":{},"sourceType":"module"}